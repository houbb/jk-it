import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-6Bz2fGO5.js";const c={};function p(l,e){return i(),n("div",null,e[0]||(e[0]=[a(`<p><audio id="audio" title="04 | 容器汇编 I：比较简单的若干容器" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/d8/ed/d8e06a7a49fccf72ff930414d7c23ced.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>上几讲我们学习了 C++ 的资源管理和值类别。今天我们换一个话题，来看一下 C++ 里的容器。</p><p>关于容器，已经存在不少的学习资料了。在 cppreference 上有很完备的参考资料（[1]）。今天我们采取一种非正规的讲解方式，尽量不重复已有的参考资料，而是让你加深对于重要容器的理解。</p><p>对于容器，学习上的一个麻烦点是你无法直接输出容器的内容——如果你定义了一个 <code>vector&amp;lt;int&amp;gt; v</code>，你是没法简单输出 <code>v</code> 的内容的。有人也许会说用 <code>copy(v.begin(), v.end(), ostream_iterator(…))</code>，可那既啰嗦，又对像 <code>map</code> 或 <code>vector&amp;lt;vector&amp;lt;…&amp;gt;&amp;gt;</code> 这样的复杂类型无效。因此，我们需要一个更好用的工具。在此，我向你大力推荐 xeus-cling [2]。它的便利性无与伦比——你可以直接在浏览器里以交互的方式运行代码，不需要本机安装任何编译器（点击“Trying it online”下面的 binder 链接）。下面是在线运行的一个截图：</p><img src="https://static001.geekbang.org/resource/image/71/ca/7199bb5b1394fe1aa9f91b850c309eca.png" alt=""><p>xeus-cling 也可以在本地安装。对于使用 Linux 的同学，安装应当是相当便捷的。有兴趣的话，使用其他平台的同学也可以尝试一下。</p><p>如果你既没有本地运行的条件，也不方便远程使用互联网来运行代码，我个人还为本专栏写了一个小小的工具 [3]。在你的代码中包含这个头文件，也可以方便地得到类似于上面的输出。示例代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;map&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  map&amp;lt;int, int&amp;gt; mp{</span></span>
<span class="line"><span>    {1, 1}, {2, 4}, {3, 9}};</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; mp &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vv{</span></span>
<span class="line"><span>    {1, 1}, {2, 4}, {3, 9}};</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; vv &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会得到下面的输出：</p><blockquote></blockquote><p>\`{ 1 =&gt; 1, 2 =&gt; 4, 3 =&gt; 9 }\`<br> \`{ { 1, 1 }, { 2, 4 }, { 3, 9 } }\`</p><p>这个代码中用到了很多我们目前专栏还没有讲的知识，所以你暂且不用关心它的实现原理。如果你能看得懂这个代码，那就太棒了。如果你看不懂，唔，不急，慢慢来，你会明白的。</p><p>工具在手，天下我有。下面我们正式开讲容器篇。</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h2><p><code>string</code> 一般并不被认为是一个 C++ 的容器。但鉴于其和容器有很多共同点，我们先拿 <code>string</code> 类来开说。</p><p><code>string</code> 是模板 <code>basic_string</code> 对于 <code>char</code> 类型的特化，可以认为是一个只存放字符 <code>char</code> 类型数据的容器。“真正”的容器类与 <code>string</code> 的最大不同点是里面可以存放任意类型的对象。</p><p>跟其他大部分容器一样， <code>string</code> 具有下列成员函数：</p><ul><li><code>begin</code> 可以得到对象起始点</li><li><code>end</code> 可以得到对象的结束点</li><li><code>empty</code> 可以得到容器是否为空</li><li><code>size</code> 可以得到容器的大小</li><li><code>swap</code> 可以和另外一个容器交换其内容</li></ul><p>（对于不那么熟悉容器的人，需要知道 C++ 的 <code>begin</code> 和 <code>end</code> 是半开半闭区间：在容器非空时，<code>begin</code> 指向第一个元素，而 <code>end</code> 指向最后一个元素后面的位置；在容器为空时，<code>begin</code> 等于 <code>end</code>。在 <code>string</code> 的情况下，由于考虑到和 C 字符串的兼容，<code>end</code> 指向代表字符串结尾的 <code>\\0</code> 字符。）</p><p>上面就几乎是所有容器的共同点了。也就是说：</p><ul><li>容器都有开始和结束点</li><li>容器会记录其状态是否非空</li><li>容器有大小</li><li>容器支持交换</li></ul><p>当然，这只是容器的“共同点”而已。每个容器都有其特殊的用途。</p><p><code>string</code> 的内存布局大致如下图所示：</p><img src="https://static001.geekbang.org/resource/image/ee/62/eec393f933220a9998b7235c8acc1862.png" alt=""><p>下面你会看到，不管是内存布局，还是成员函数，<code>string</code> 和 <code>vector</code> 是非常相似的。</p><p><code>string</code> 当然是为了存放字符串。和简单的 C 字符串不同：</p><ul><li><code>string</code> 负责自动维护字符串的生命周期</li><li><code>string</code> 支持字符串的拼接操作（如之前说过的 <code>+</code> 和 <code>+=</code>）</li><li><code>string</code> 支持字符串的查找操作（如 <code>find</code> 和 <code>rfind</code>）</li><li><code>string</code> 支持从 <code>istream</code> 安全地读入字符串（使用 <code>getline</code>）</li><li><code>string</code> 支持给期待 <code>const char*</code> 的接口传递字符串内容（使用 <code>c_str</code>）</li><li><code>string</code> 支持到数字的互转（<code>stoi</code> 系列函数和 <code>to_string</code>）</li><li>等等</li></ul><p>推荐你在代码中尽量使用 <code>string</code> 来管理字符串。不过，对于对外暴露的接口，情况有一点复杂。我一般不建议在接口中使用 <code>const string&amp;amp;</code>，除非确知调用者已经持有 <code>string</code>：如果函数里不对字符串做复杂处理的话，使用 <code>const char*</code> 可以避免在调用者只有 C 字符串时编译器自动构造 <code>string</code>，这种额外的构造和析构代价并不低。反过来，如果实现较为复杂、希望使用 <code>string</code> 的成员函数的话，那就应该考虑下面的策略：</p><ul><li>如果不修改字符串的内容，使用 <code>const string&amp;amp;</code> 或 C++17 的 <code>string_view</code> 作为参数类型。后者是最理想的情况，因为即使在只有 C 字符串的情况，也不会引发不必要的内存复制。</li><li>如果需要在函数内修改字符串内容、但不影响调用者的该字符串，使用 <code>string</code> 作为参数类型（自动拷贝）。</li><li>如果需要改变调用者的字符串内容，使用 <code>string&amp;amp;</code> 作为参数类型（通常不推荐）。</li></ul><p>估计大部分同学对 <code>string</code> 已经很熟悉了。我们在此只给出一个非常简单的小例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>string name;</span></span>
<span class="line"><span>cout &amp;lt;&amp;lt; &quot;What&#39;s your name? &quot;;</span></span>
<span class="line"><span>getline(cin, name);</span></span>
<span class="line"><span>cout &amp;lt;&amp;lt; &quot;Nice to meet you, &quot; &amp;lt;&amp;lt; name</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; &quot;!\\n&quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector"><span>vector</span></a></h2><p><code>vector</code> 应该是最常用的容器了。它的名字“向量”来源于数学术语，但在实际应用中，我们把它当成动态数组更为合适。它基本相当于 Java 的 <code>ArrayList</code> 和 Python 的 <code>list</code>。</p><p>和 <code>string</code> 相似，<code>vector</code> 的成员在内存里连续存放，同时 <code>begin</code>、<code>end</code>、<code>front</code>、<code>back</code> 成员函数指向的位置也和 <code>string</code> 一样，大致如下图所示：</p><img src="https://static001.geekbang.org/resource/image/24/10/247951f886561c30ced2eb7700f9d510.png" alt=""><p>除了容器类的共同点，<code>vector</code> 允许下面的操作（不完全列表）：</p><ul><li>可以使用中括号的下标来访问其成员（同 <code>string</code>）</li><li>可以使用 <code>data</code> 来获得指向其内容的裸指针（同 <code>string</code>）</li><li>可以使用 <code>capacity</code> 来获得当前分配的存储空间的大小，以元素数量计（同 <code>string</code>）</li><li>可以使用 <code>reserve</code> 来改变所需的存储空间的大小，成功后 <code>capacity()</code> 会改变（同 <code>string</code>）</li><li>可以使用 <code>resize</code> 来改变其大小，成功后 <code>size()</code> 会改变（同 <code>string</code>）</li><li>可以使用 <code>pop_back</code> 来删除最后一个元素（同 <code>string</code>）</li><li>可以使用 <code>push_back</code> 在尾部插入一个元素（同 <code>string</code>）</li><li>可以使用 <code>insert</code> 在指定位置前插入一个元素（同 <code>string</code>）</li><li>可以使用 <code>erase</code> 在指定位置删除一个元素（同 <code>string</code>）</li><li>可以使用 <code>emplace</code> 在指定位置构造一个元素</li><li>可以使用 <code>emplace_back</code> 在尾部新构造一个元素</li></ul><p>大家可以留意一下 <code>push_…</code> 和 <code>pop_…</code> 成员函数。它们存在时，说明容器对指定位置的删除和插入性能较高。<code>vector</code> 适合在尾部操作，这是它的内存布局决定的。只有在尾部插入和删除时，其他元素才会不需要移动，除非内存空间不足导致需要重新分配内存空间。</p><p>当 <code>push_back</code>、<code>insert</code>、<code>reserve</code>、<code>resize</code> 等函数导致内存重分配时，或当 <code>insert</code>、<code>erase</code> 导致元素位置移动时，<code>vector</code> 会试图把元素“移动”到新的内存区域。<code>vector</code> 通常保证强异常安全性，如果元素类型没有提供一个<strong>保证不抛异常的移动构造函数</strong>，<code>vector</code> 通常会使用拷贝构造函数。因此，对于拷贝代价较高的自定义元素类型，我们应当定义移动构造函数，并标其为 <code>noexcept</code>，或只在容器中放置对象的智能指针。这就是为什么我之前需要在 <code>smart_ptr</code> 的实现中标上 <code>noexcept</code> 的原因。</p><p>下面的代码可以演示这一行为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Obj1 {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  Obj1()</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj1()\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Obj1(const Obj1&amp;amp;)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj1(const Obj1&amp;amp;)\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Obj1(Obj1&amp;amp;&amp;amp;)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj1(Obj1&amp;amp;&amp;amp;)\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Obj2 {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  Obj2()</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj2()\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Obj2(const Obj2&amp;amp;)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj2(const Obj2&amp;amp;)\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Obj2(Obj2&amp;amp;&amp;amp;) noexcept</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; &quot;Obj2(Obj2&amp;amp;&amp;amp;)\\n&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  vector&amp;lt;Obj1&amp;gt; v1;</span></span>
<span class="line"><span>  v1.reserve(2);</span></span>
<span class="line"><span>  v1.emplace_back();</span></span>
<span class="line"><span>  v1.emplace_back();</span></span>
<span class="line"><span>  v1.emplace_back();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  vector&amp;lt;Obj2&amp;gt; v2;</span></span>
<span class="line"><span>  v2.reserve(2);</span></span>
<span class="line"><span>  v2.emplace_back();</span></span>
<span class="line"><span>  v2.emplace_back();</span></span>
<span class="line"><span>  v2.emplace_back();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以立即得到下面的输出：</p><blockquote></blockquote><p>\`Obj1()\`<br> \`Obj1()\`<br> \`Obj1()\`<br> \`Obj1(const Obj1&amp;)\`<br> \`Obj1(const Obj1&amp;)\`<br> \`Obj2()\`<br> \`Obj2()\`<br> \`Obj2()\`<br> \`Obj2(Obj2&amp;&amp;)\`<br> \`Obj2(Obj2&amp;&amp;)\`</p><p><code>Obj1</code> 和 <code>Obj2</code> 的定义只差了一个 <code>noexcept</code>，但这个小小的差异就导致了 <code>vector</code> 是否会移动对象。这点非常重要。</p><p>C++11 开始提供的 <code>emplace…</code> 系列函数是为了提升容器的性能而设计的。你可以试试把 <code>v1.emplace_back()</code> 改成 <code>v1.push_back(Obj1())</code>。对于 <code>vector</code> 里的内容，结果是一样的；但使用 <code>push_back</code> 会额外生成临时对象，多一次（移动或拷贝）构造和析构。如果是移动的情况，那会有小幅性能损失；如果对象没有实现移动的话，那性能差异就可能比较大了。</p><p>现代处理器的体系架构使得对连续内存访问的速度比不连续的内存要快得多。因而，<code>vector</code> 的连续内存使用是它的一大优势所在。当你不知道该用什么容器时，缺省就使用 <code>vector</code> 吧。</p><p><code>vector</code> 的一个主要缺陷是大小增长时导致的元素移动。如果可能，尽早使用 <code>reserve</code> 函数为 <code>vector</code> 保留所需的内存，这在 <code>vector</code> 预期会增长很大时能带来很大的性能提升。</p><h2 id="deque" tabindex="-1"><a class="header-anchor" href="#deque"><span>deque</span></a></h2><p><code>deque</code> 的意思是 double-ended queue，双端队列。它主要是用来满足下面这个需求：</p><ul><li>容器不仅可以从尾部自由地添加和删除元素，也可以从头部自由地添加和删除。</li></ul><p><code>deque</code> 的接口和 <code>vector</code> 相比，有如下的区别：</p><ul><li><code>deque</code> 提供 <code>push_front</code>、<code>emplace_front</code> 和 <code>pop_front</code> 成员函数。</li><li><code>deque</code> 不提供 <code>data</code>、<code>capacity</code> 和 <code>reserve</code> 成员函数。</li></ul><p><code>deque</code> 的内存布局一般是这样的：</p><img src="https://static001.geekbang.org/resource/image/ae/a1/aea92e7e005d65fa56d6332bb7706fa1.png" alt=""><p>可以看到：</p><ul><li>如果只从头、尾两个位置对 <code>deque</code> 进行增删操作的话，容器里的对象永远不需要移动。</li><li>容器里的元素只是部分连续的（因而没法提供 <code>data</code> 成员函数）。</li><li>由于元素的存储大部分仍然连续，它的遍历性能是比较高的。</li><li>由于每一段存储大小相等，<code>deque</code> 支持使用下标访问容器元素，大致相当于 <code>index[i / chunk_size][i % chunk_size]</code>，也保持高效。</li></ul><p>如果你需要一个经常在头尾增删元素的容器，那 <code>deque</code> 会是个合适的选择。</p><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>list</span></a></h2><p><code>list</code> 在 C++ 里代表双向链表。和 <code>vector</code> 相比，它优化了在容器中间的插入和删除：</p><ul><li><code>list</code> 提供高效的、O(1) 复杂度的任意位置的插入和删除操作。</li><li><code>list</code> 不提供使用下标访问其元素。</li><li><code>list</code> 提供 <code>push_front</code>、<code>emplace_front</code> 和 <code>pop_front</code> 成员函数（和 <code>deque</code> 相同）。</li><li><code>list</code> 不提供 <code>data</code>、<code>capacity</code> 和 <code>reserve</code> 成员函数（和 <code>deque</code> 相同）。</li></ul><p>它的内存布局一般是下图这个样子：</p><img src="https://static001.geekbang.org/resource/image/ad/14/addb521e20de1a302206f4286eac3914.png" alt=""><p>需要指出的是，虽然 <code>list</code> 提供了任意位置插入新元素的灵活性，但由于每个元素的内存空间都是单独分配、不连续，它的遍历性能比 <code>vector</code> 和 <code>deque</code> 都要低。这在很大程度上抵消了它在插入和删除操作时不需要移动元素的理论性能优势。如果你不太需要遍历容器、又需要在中间频繁插入或删除元素，可以考虑使用 <code>list</code>。</p><p>另外一个需要注意的地方是，因为某些标准算法在 <code>list</code> 上会导致问题，list 提供了成员函数作为替代，包括下面几个：</p><ul><li><code>merge</code></li><li><code>remove</code></li><li><code>remove_if</code></li><li><code>reverse</code></li><li><code>sort</code></li><li><code>unique</code></li></ul><p>下面是一个示例（以 xeus-cling 的交互为例）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;list&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span>using namespace std;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>list&amp;lt;int&amp;gt; lst{1, 7, 2, 8, 3};</span></span>
<span class="line"><span>vector&amp;lt;int&amp;gt; vec{1, 7, 2, 8, 3};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sort(vec.begin(), vec.end());     // 正常</span></span>
<span class="line"><span>// sort(lst.begin(), lst.end());  // 会出错</span></span>
<span class="line"><span>lst.sort();                       // 正常</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lst  // 输出 { 1, 2, 3, 7, 8 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>vec  // 输出 { 1, 2, 3, 7, 8 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果不用 xeus-cling 的话，我们需要做点转换：</p><ul><li>把 <code>using namespace std;</code> 后面的部分放到 <code>main</code> 函数里。</li><li>文件开头加上 <code>#include &quot;output_container.h&quot;</code> 和 <code>#include &amp;lt;iostream&amp;gt;</code>。</li><li>把输出语句改写成 <code>cout &amp;lt;&amp;lt; … &amp;lt;&amp;lt; endl;</code>。</li></ul><p>这次我会给一下改造的示例（下次就请你自行改写了😉）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;list&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  list&amp;lt;int&amp;gt; lst{1, 7, 2, 8, 3};</span></span>
<span class="line"><span>  vector&amp;lt;int&amp;gt; vec{1, 7, 2, 8, 3};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  sort(vec.begin(), vec.end());    // 正常</span></span>
<span class="line"><span>  // sort(lst.begin(), lst.end()); // 会出错</span></span>
<span class="line"><span>  lst.sort();                      // 正常</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; lst &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  // 输出 { 1, 2, 3, 7, 8 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; vec &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  // 输出 { 1, 2, 3, 7, 8 }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="forward-list" tabindex="-1"><a class="header-anchor" href="#forward-list"><span>forward_list</span></a></h2><p>既然 <code>list</code> 是双向链表，那么 C++ 里有没有单向链表呢？答案是肯定的。从 C++11 开始，前向列表 <code>forward_list</code> 成了标准的一部分。</p><p>我们先看一下它的内存布局：</p><img src="https://static001.geekbang.org/resource/image/ef/4e/ef23c4d60940c170629cf65771df084e.png" alt=""><p>大部分 C++ 容器都支持 <code>insert</code> 成员函数，语义是从指定的位置之前插入一个元素。对于 <code>forward_list</code>，这不是一件容易做到的事情（想一想，为什么？）。标准库提供了一个 <code>insert_after</code> 作为替代。此外，它跟 <code>list</code> 相比还缺了下面这些成员函数：</p><ul><li><code>back</code></li><li><code>size</code></li><li><code>push_back</code></li><li><code>emplace_back</code></li><li><code>pop_back</code></li></ul><p>为什么会需要这么一个阉割版的 list 呢？原因是，在元素大小较小的情况下，<code>forward_list</code> 能节约的内存是非常可观的；在列表不长的情况下，不能反向查找也不是个大问题。提高内存利用率，往往就能提高程序性能，更不用说在内存可能不足时的情况了。</p><p>目前你只需要知道这个东西的存在就可以了。如果你觉得不需要用到它的话，也许你真的不需要它。</p><h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>queue</span></a></h2><p>在结束本讲之前，我们再快速讲两个类容器。它们的特别点在于它们都不是完整的实现，而是依赖于某个现有的容器，因而被称为容器适配器（container adaptor）。</p><p>我们先看一下队列 <code>queue</code>，先进先出（FIFO）的数据结构。</p><p><code>queue</code> 缺省用 <code>deque</code> 来实现。它的接口跟 <code>deque</code> 比，有如下改变：</p><ul><li>不能按下标访问元素</li><li>没有 <code>begin</code>、<code>end</code> 成员函数</li><li>用 <code>emplace</code> 替代了 <code>emplace_back</code>，用 <code>push</code> 替代了 <code>push_back</code>，用 <code>pop</code> 替代了 <code>pop_front</code>；没有其他的 <code>push_…</code>、<code>pop_…</code>、<code>emplace…</code>、<code>insert</code>、<code>erase</code> 函数</li></ul><p>它的实际内存布局当然是随底层的容器而定的。从概念上讲，它的结构可如下所示：</p><img src="https://static001.geekbang.org/resource/image/09/ff/090f23e3b4cdd8d297e4b970cbbf6cff.png" alt=""><p>鉴于 <code>queue</code> 不提供 <code>begin</code> 和 <code>end</code> 方法，无法无损遍历，我们只能用下面的代码约略展示一下其接口：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;queue&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  std::queue&amp;lt;int&amp;gt; q;</span></span>
<span class="line"><span>  q.push(1);</span></span>
<span class="line"><span>  q.push(2);</span></span>
<span class="line"><span>  q.push(3);</span></span>
<span class="line"><span>  while (!q.empty()) {</span></span>
<span class="line"><span>    std::cout &amp;lt;&amp;lt; q.front()</span></span>
<span class="line"><span>              &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>    q.pop();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码的输出就不用解释了吧。哈哈。</p><h2 id="stack" tabindex="-1"><a class="header-anchor" href="#stack"><span>stack</span></a></h2><p>类似地，栈 <code>stack</code> 是后进先出（LIFO）的数据结构。</p><p><code>stack</code> 缺省也是用 <code>deque</code> 来实现，但它的概念和 <code>vector</code> 更相似。它的接口跟 <code>vector</code> 比，有如下改变：</p><ul><li>不能按下标访问元素</li><li>没有 <code>begin</code>、<code>end</code> 成员函数</li><li><code>back</code> 成了 <code>top</code>，没有 <code>front</code></li><li>用 <code>emplace</code> 替代了 <code>emplace_back</code>，用 <code>push</code> 替代了 <code>push_back</code>，用 <code>pop</code> 替代了 <code>pop_back</code>；没有其他的 <code>push_…</code>、<code>pop_…</code>、<code>emplace…</code>、<code>insert</code>、<code>erase</code> 函数</li></ul><p>一般图形表示法会把 <code>stack</code> 表示成一个竖起的 <code>vector</code>：</p><img src="https://static001.geekbang.org/resource/image/68/47/68026091ff5eacac00c49d75151fff47.png" alt=""><p>这里有一个小细节需要注意。<code>stack</code> 跟我们前面讨论内存管理时的栈有一个区别：在这里下面是低地址，向上则地址增大；而我们讨论内存管理时，高地址在下面，向上则地址减小，方向正好相反。提这一点，是希望你在有需要检查栈结构时不会因此而发生混淆；在使用 <code>stack</code> 时，这个区别通常无关紧要。</p><p>示例代码和上面的 <code>queue</code> 相似，但输出正好相反：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;stack&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  std::stack&amp;lt;int&amp;gt; s;</span></span>
<span class="line"><span>  s.push(1);</span></span>
<span class="line"><span>  s.push(2);</span></span>
<span class="line"><span>  s.push(3);</span></span>
<span class="line"><span>  while (!s.empty()) {</span></span>
<span class="line"><span>    std::cout &amp;lt;&amp;lt; s.top()</span></span>
<span class="line"><span>              &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>    s.pop();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>本讲我们介绍了 C++ 里面的序列容器和两个容器适配器。通过本讲的介绍，你应该已经对容器有了一定的理解和认识。下一讲我们会讲完剩余的标准容器。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>留几个问题请你思考一下：</p><ol><li>今天讲的容器有哪些共同的特点？</li><li>为什么 C++ 有这么多不同的序列容器类型？</li><li>为什么 <code>stack</code>（或 <code>queue</code>）的 <code>pop</code> 函数返回类型为 <code>void</code>，而不是直接返回容器的 <code>top</code>（或 <code>front</code>）成员？</li></ol><p>欢迎留言和我交流你的看法。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Containers library”. <a href="https://en.cppreference.com/w/cpp/container" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/container</a></p><p>[1a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “容器库”. <a href="https://zh.cppreference.com/w/cpp/container" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/container</a></p><p>[2] QuantStack, xeus-cling. <a href="https://github.com/QuantStack/xeus-cling" target="_blank" rel="noopener noreferrer">https://github.com/QuantStack/xeus-cling</a></p><p>[3] 吴咏炜, output_container. <a href="https://github.com/adah1972/output_container/blob/master/output_container.h" target="_blank" rel="noopener noreferrer">https://github.com/adah1972/output_container/blob/master/output_container.h</a></p>`,115)]))}const t=s(c,[["render",p]]),r=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/04%20_%20%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96%20I%EF%BC%9A%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%AE%B9%E5%99%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是吴咏炜。 上几讲我们学习了 C++ 的资源管理和值类别。今天我们换一个话题，来看一下 C++ 里的容器。 关于容器，已经存在不少的学习资料了。在 cppreference 上有很完备的参考资料（[1]）。今天我们采取一种非正规的讲解方式，尽量不重复已有的参考资料，而是让你加深对于重要容器的理解。 对于容器，学习上的一个麻烦点是你无法直接输出容...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/04%20_%20%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96%20I%EF%BC%9A%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是吴咏炜。 上几讲我们学习了 C++ 的资源管理和值类别。今天我们换一个话题，来看一下 C++ 里的容器。 关于容器，已经存在不少的学习资料了。在 cppreference 上有很完备的参考资料（[1]）。今天我们采取一种非正规的讲解方式，尽量不重复已有的参考资料，而是让你加深对于重要容器的理解。 对于容器，学习上的一个麻烦点是你无法直接输出容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":14.8,"words":4440},"filePathRelative":"posts/现代C++实战30讲/基础篇/04 _ 容器汇编 I：比较简单的若干容器.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"04 | 容器汇编 I：比较简单的若干容器\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/d8/ed/d8e06a7a49fccf72ff930414d7c23ced.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>上几讲我们学习了 C++ 的资源管理和值类别。今天我们换一个话题，来看一下 C++ 里的容器。</p>\\n<p>关于容器，已经存在不少的学习资料了。在 cppreference 上有很完备的参考资料（[1]）。今天我们采取一种非正规的讲解方式，尽量不重复已有的参考资料，而是让你加深对于重要容器的理解。</p>","autoDesc":true}');export{t as comp,r as data};
