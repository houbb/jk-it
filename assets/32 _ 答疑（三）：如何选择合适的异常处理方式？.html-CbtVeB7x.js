import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as n}from"./app-6Bz2fGO5.js";const t={};function p(r,e){return n(),i("div",null,e[0]||(e[0]=[s(`<p><audio id="audio" title="32 | 答疑（三）：如何选择合适的异常处理方式？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/af/fb/af75cfd5d3ee79f171f71ab740bf95fb.mp3"></audio></p><p>你好，我是景霄。</p><p>不知不觉中，我们又一起完成了第三大章规范篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。</p><p>大部分留言，我都在相对应的文章中回复过了。而一些手机上不方便回复，或是很有价值很典型的问题，我专门摘录了出来，作为今天的答疑内容，集中回复。</p><h2 id="问题一-应该使用哪种异常处理方式" tabindex="-1"><a class="header-anchor" href="#问题一-应该使用哪种异常处理方式"><span>问题一：应该使用哪种异常处理方式？</span></a></h2><img src="https://static001.geekbang.org/resource/image/c7/42/c766890764672c7c924092d9dfd0c942.png" alt=""><p>第一个问题是code2同学的疑惑。下面这两种处理的风格，哪一种风格更有效、更优雅？</p><ul><li>第一种，在代码中对数据进行检测，并直接处理与抛出异常。</li><li>第二种，在异常处理代码中进行处理。</li></ul><p>其实，第一种方法，可以翻译成下面的“if…elif…”语句：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if [condition1]:</span></span>
<span class="line"><span>    raise Exception1(&#39;exception 1&#39;)</span></span>
<span class="line"><span>elif [condition2]:</span></span>
<span class="line"><span>    raise Exception2(&#39;exception 2&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而第二种方法，则对应着下面异常处理的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except Exception as e:</span></span>
<span class="line"><span>    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法很大的一个区别是，第一种方法一旦抛出异常，那么程序就会终止；而在第二种方法中，如果抛出异常，会被程序捕获（catch），程序还会继续运行。这也是我们选择这两种方法的重要依据。当然，在实际工作中，到底使用哪一种方法，还是取决于具体的场景。</p><p>比方说，一个模块的功能是对输入进行检测，如果输入不合法，则弹出对话框进行提示，并终止程序。那么，这种情况下，使用第一种方法更加合理。</p><p>但是，如果换成一个产品的服务器端，它需要应对各种可能发生的情况，以保证服务器不崩溃。比如在连接数据库时，如果网络异常，无法连接，那就需要捕获（catch）这个异常（exception），进行记录，并同时保证其他功能不受影响。这种情况下，我们通常会选择第二种方式。</p><h2 id="问题二-先写出能跑起来的代码-后期再优化可以吗" tabindex="-1"><a class="header-anchor" href="#问题二-先写出能跑起来的代码-后期再优化可以吗"><span>问题二：先写出能跑起来的代码，后期再优化可以吗？</span></a></h2><img src="https://static001.geekbang.org/resource/image/d5/b0/d5efddbe80757e61e33596ce41440bb0.png" alt=""><p>第二个问题，夜路破晓同学提到了很多程序员传授的“经验之谈”，即先写出能跑起来的代码，后期再优化。很明显，这种认知是错误的。我们从一开始写代码时，就必须对功能和规范这两者双管齐下。</p><p>代码功能完整和规范完整的优先级是不分先后的，应该是同时进行的。如果你一开始只注重代码的功能完整，而不关注其质量、规范，那么规范问题很容易越积越多。这样就会导致产品的bug越来越多，相应的代码库越发难以维护，到最后不得已只能推倒重来。</p><p>我在Facebook工作时就遇到过这样的情况，参与过类似的项目。当时，某些功能模块因为赶时间，code review很宽松，代码写得很不规范，留下了隐患。时间一长，bug越来越多，legacy越来越多。到最后，万分无奈的情况下，我们几个工程师专门立项，花了三个多月时间，重写了这一模块的代码，才解决了这个问题。</p><h2 id="问题三-代码中写多少注释才合适" tabindex="-1"><a class="header-anchor" href="#问题三-代码中写多少注释才合适"><span>问题三：代码中写多少注释才合适？</span></a></h2><img src="https://static001.geekbang.org/resource/image/f2/71/f22b2ec07051b244ed4a852189745671.png" alt=""><p>第三个问题，小侠龙旋风同学留言说，自己的同事要求代码中有70%的注释，这显然有点过了。但是反过来说，如果你的代码中没有注释或者注释很少，仅凭规范的变量名肯定是远远不够的。</p><p>通常来说，我们会在类的开头、函数的开头或者是某一个功能块的开头加上一段描述性的注释，来说明这段代码的功能，并指明所有的输入和输出。除此之外，我们也要求在一些比较tricky的代码上方加上注释，帮助阅读者理解代码的含义。</p><p>总的来说，代码中到底需要有多少注释，其实并没有一个统一的要求，还是要根据代码量和代码的复杂度来决定。不过，我们平常书写时，只要满足这样的规范就可以了。</p><p>另外，必须提醒一点，如果在写好之后修改了代码，那么代码对应的注释一定也要做出相应的修改，不然很容易造成“文不对题”的现象，给别人也给你自己带来困扰。</p><h2 id="问题四-项目的api文档重要吗" tabindex="-1"><a class="header-anchor" href="#问题四-项目的api文档重要吗"><span>问题四：项目的API文档重要吗？</span></a></h2><img src="https://static001.geekbang.org/resource/image/fc/c5/fc59ac08ab33764afa439056e75acac5.png" alt=""><p>第四个问题，是未来已来同学的留言。他提到了项目的API文档的问题，这一点说得非常好，在这里我也简单介绍一下。</p><p>我在专栏中主要讲的是代码的规范问题，但很多情况下，光有规范的代码还是远远不够的。因为一个系统，一个产品，甚至一个功能模块的代码，都有可能非常复杂。少则几千行，动辄几十万行，尤其是对于刚加入的新人来说，在ramp up阶段光看代码可能就是一个噩梦了。</p><p>因此，在这方面做得比较规范的公司，通常也会要求书写文档。项目的文档，主要是对相应的系统、产品或是功能模块做一个概述，有助于后人理解。以一个service为例，其对应的文档通常会包括下面几部分：</p><ul><li>第一点，系统的概述，包括各个组成部分以及工作流程的介绍；</li><li>第二点，每个组成部分的具体介绍，包括必要性、设计原理等等；</li><li>第三点，系统的performance，包括latency等等参数；</li><li>第四点主要说明如何对系统的各个部分进行修改，主要给出相应的code pointer及对应的测试方案。</li></ul><p>这些内容，也希望屏幕前的你能够牢记。</p><p>今天我主要回答这些问题，同时也欢迎你继续在留言区写下疑问和感想，我会持续不断地解答。希望每一次的留言和答疑，都能给你带来新的收获和价值。</p>`,34)]))}const l=a(t,[["render",p]]),d=JSON.parse('{"path":"/posts/Python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E8%A7%84%E8%8C%83%E7%AF%87/32%20_%20%E7%AD%94%E7%96%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是景霄。 不知不觉中，我们又一起完成了第三大章规范篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。 大部分留言，我都在相对应的文章中回复过了。而一些手机上不方便回复，或是很有价值很典型的问题，我专门摘录了出来...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E8%A7%84%E8%8C%83%E7%AF%87/32%20_%20%E7%AD%94%E7%96%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是景霄。 不知不觉中，我们又一起完成了第三大章规范篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。 大部分留言，我都在相对应的文章中回复过了。而一些手机上不方便回复，或是很有价值很典型的问题，我专门摘录了出来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"posts/Python核心技术与实战/规范篇/32 _ 答疑（三）：如何选择合适的异常处理方式？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"32 | 答疑（三）：如何选择合适的异常处理方式？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/af/fb/af75cfd5d3ee79f171f71ab740bf95fb.mp3\\"></audio></p>\\n<p>你好，我是景霄。</p>\\n<p>不知不觉中，我们又一起完成了第三大章规范篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。</p>","autoDesc":true}');export{l as comp,d as data};
