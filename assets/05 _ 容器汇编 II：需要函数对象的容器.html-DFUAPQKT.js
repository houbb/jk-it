import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-6Bz2fGO5.js";const l={};function p(d,s){return i(),a("div",null,s[0]||(s[0]=[n(`<p><audio id="audio" title="05 | 容器汇编 II：需要函数对象的容器" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/c0/a8/c0be78d32a3c20c24679e93c0f151ba8.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>上一讲我们学习了 C++ 的序列容器和两个容器适配器，今天我们继续讲完剩下的标准容器（[1]）。</p><h2 id="函数对象及其特化" tabindex="-1"><a class="header-anchor" href="#函数对象及其特化"><span>函数对象及其特化</span></a></h2><p>在讲容器之前，我们需要首先来讨论一下两个重要的函数对象，<code>less</code> 和 <code>hash</code>。</p><p>我们先看一下 <code>less</code>，小于关系。在标准库里，通用的 <code>less</code> 大致是这样定义的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>struct less</span></span>
<span class="line"><span>  : binary_function&amp;lt;T, T, bool&amp;gt; {</span></span>
<span class="line"><span>  bool operator()(const T&amp;amp; x,</span></span>
<span class="line"><span>                  const T&amp;amp; y) const</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    return x &amp;lt; y;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，<code>less</code> 是一个函数对象，并且是个二元函数，执行对任意类型的值的比较，返回布尔类型。作为函数对象，它定义了函数调用运算符（<code>operator()</code>），并且缺省行为是对指定类型的对象进行 <code>&amp;lt;</code> 的比较操作。</p><p>有点平淡无奇，是吧？原因是因为这个缺省实现在大部分情况下已经够用，我们不太需要去碰它。在需要大小比较的场合，C++ 通常默认会使用 <code>less</code>，包括我们今天会讲到的若干容器和排序算法 <code>sort</code>。如果我们需要产生相反的顺序的话，则可以使用 <code>greater</code>，大于关系。</p><p>计算哈希值的函数对象 <code>hash</code> 就不一样了。它的目的是把一个某种类型的值转换成一个无符号整数哈希值，类型为 <code>size_t</code>。它没有一个可用的默认实现。对于常用的类型，系统提供了需要的特化 [2]，类似于：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt; struct hash;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;&amp;gt;</span></span>
<span class="line"><span>struct hash&amp;lt;int&amp;gt;</span></span>
<span class="line"><span>  : public unary_function&amp;lt;int, size_t&amp;gt; {</span></span>
<span class="line"><span>  size_t operator()(int v) const</span></span>
<span class="line"><span>    noexcept</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    return static_cast&amp;lt;size_t&amp;gt;(v);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这当然是一个极其简单的例子。更复杂的类型，如指针或者 <code>string</code> 的特化，都会更复杂。要点是，对于每个类，类的作者都可以提供 <code>hash</code> 的特化，使得对于不同的对象值，函数调用运算符都能得到尽可能均匀分布的不同数值。</p><p>我们用下面这个例子来加深一下理解：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;algorithm&amp;gt;   // std::sort</span></span>
<span class="line"><span>#include &amp;lt;functional&amp;gt;  // std::less/greater/hash</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;    // std::cout/endl</span></span>
<span class="line"><span>#include &amp;lt;string&amp;gt;      // std::string</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;      // std::vector</span></span>
<span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // 初始数组</span></span>
<span class="line"><span>  vector&amp;lt;int&amp;gt; v{13, 6, 4, 11, 29};</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 从小到大排序</span></span>
<span class="line"><span>  sort(v.begin(), v.end());</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 从大到小排序</span></span>
<span class="line"><span>  sort(v.begin(), v.end(),</span></span>
<span class="line"><span>       greater&amp;lt;int&amp;gt;());</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; hex;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  auto hp = hash&amp;lt;int*&amp;gt;();</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;hash(nullptr)  = &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; hp(nullptr) &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;hash(v.data()) = &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; hp(v.data()) &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;v.data()       = &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; static_cast&amp;lt;void*&amp;gt;(v.data())</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  auto hs = hash&amp;lt;string&amp;gt;();</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;hash(\\&quot;hello\\&quot;)  = &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; hs(string(&quot;hello&quot;)) &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;hash(\\&quot;hellp\\&quot;)  = &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; hs(string(&quot;hellp&quot;)) &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 MSVC 下的某次运行结果如下所示：</p><blockquote></blockquote><p>\`{ 13, 6, 4, 11, 29 }\`<br> \`{ 4, 6, 11, 13, 29 }\`<br> \`{ 29, 13, 11, 6, 4 }\`<br> \`hash(nullptr) = a8c7f832281a39c5\`<br> \`hash(v.data()) = 7a0bdfd7df0923d2\`<br> \`v.data() = 000001EFFB10EAE0\`<br> \`hash(&quot;hello&quot;) = a430d84680aabd0b\`<br> \`hash(&quot;hellp&quot;) = a430e54680aad322\`</p><p>可以看到，在这个实现里，空指针的哈希值是一个非零的数值，指针的哈希值也和指针的数值不一样。要注意不同的实现处理的方式会不一样。事实上，我的测试结果是 GCC、Clang 和 MSVC 对常见类型的哈希方式都各有不同。</p><p>在上面的例子里，我们同时可以看到，这两个函数对象的值不重要。我们甚至可以认为，每个 <code>less</code>（或 <code>greater</code> 或 <code>hash</code>）对象都是等价的。关键在于其类型。以 <code>sort</code> 为例，第三个参数的类型确定了其排序行为。</p><p>对于容器也是如此，函数对象的类型确定了容器的行为。</p><h2 id="priority-queue" tabindex="-1"><a class="header-anchor" href="#priority-queue"><span>priority_queue</span></a></h2><p><code>priority_queue</code> 也是一个容器适配器。上一讲没有和其他容器适配器一起讲的原因就在于它用到了比较函数对象（默认是 <code>less</code>）。它和 <code>stack</code> 相似，支持 <code>push</code>、<code>pop</code>、<code>top</code> 等有限的操作，但容器内的顺序既不是后进先出，也不是先进先出，而是（部分）排序的结果。在使用缺省的 <code>less</code> 作为其 <code>Compare</code> 模板参数时，最大的数值会出现在容器的“顶部”。如果需要最小的数值出现在容器顶部，则可以传递 <code>greater</code> 作为其 <code>Compare</code> 模板参数。</p><p>下面的代码可以演示其功能：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;functional&amp;gt;  // std::greater</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;    // std::cout/endl</span></span>
<span class="line"><span>#include &amp;lt;memory&amp;gt;      // std::pair</span></span>
<span class="line"><span>#include &amp;lt;queue&amp;gt;       // std::priority_queue</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;      // std::vector</span></span>
<span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  priority_queue&amp;lt;</span></span>
<span class="line"><span>    pair&amp;lt;int, int&amp;gt;,</span></span>
<span class="line"><span>    vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;,</span></span>
<span class="line"><span>    greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;</span></span>
<span class="line"><span>    q;</span></span>
<span class="line"><span>  q.push({1, 1});</span></span>
<span class="line"><span>  q.push({2, 2});</span></span>
<span class="line"><span>  q.push({0, 3});</span></span>
<span class="line"><span>  q.push({9, 4});</span></span>
<span class="line"><span>  while (!q.empty()) {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; q.top() &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>    q.pop();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><blockquote></blockquote><p>\`(0, 3)\`<br> \`(1, 1)\`<br> \`(2, 2)\`<br> \`(9, 4)\`</p><h2 id="关联容器" tabindex="-1"><a class="header-anchor" href="#关联容器"><span>关联容器</span></a></h2><p>关联容器有 <code>set</code>（集合）、<code>map</code>（映射）、<code>multiset</code>（多重集）和 <code>multimap</code>（多重映射）。跳出 C++ 的语境，<code>map</code>（映射）的更常见的名字是关联数组和字典 [3]，而在 JSON 里直接被称为对象（object）。在 C++ 外这些容器常常是无序的；在 C++ 里关联容器则被认为是有序的。</p><p>我们可以通过以下的 xeus-cling 交互来体会一下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;functional&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;map&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;set&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;string&amp;gt;</span></span>
<span class="line"><span>using namespace std;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set&amp;lt;int&amp;gt; s{1, 1, 1, 2, 3, 4};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ 1, 2, 3, 4 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>multiset&amp;lt;int, greater&amp;lt;int&amp;gt;&amp;gt; ms{1, 1, 1, 2, 3, 4};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ 4, 3, 2, 1, 1, 1 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>map&amp;lt;string, int&amp;gt; mp{</span></span>
<span class="line"><span>  {&quot;one&quot;, 1},</span></span>
<span class="line"><span>  {&quot;two&quot;, 2},</span></span>
<span class="line"><span>  {&quot;three&quot;, 3},</span></span>
<span class="line"><span>  {&quot;four&quot;, 4}</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ &quot;four&quot; =&amp;gt; 4, &quot;one&quot; =&amp;gt; 1, &quot;three&quot; =&amp;gt; 3, &quot;two&quot; =&amp;gt; 2 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp.insert({&quot;four&quot;, 4});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ &quot;four&quot; =&amp;gt; 4, &quot;one&quot; =&amp;gt; 1, &quot;three&quot; =&amp;gt; 3, &quot;two&quot; =&amp;gt; 2 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp.find(&quot;four&quot;) == mp.end()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>false</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp.find(&quot;five&quot;) == mp.end()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>(bool) true</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp[&quot;five&quot;] = 5;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ &quot;five&quot; =&amp;gt; 5, &quot;four&quot; =&amp;gt; 4, &quot;one&quot; =&amp;gt; 1, &quot;three&quot; =&amp;gt; 3, &quot;two&quot; =&amp;gt; 2 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>multimap&amp;lt;string, int&amp;gt; mmp{</span></span>
<span class="line"><span>  {&quot;one&quot;, 1},</span></span>
<span class="line"><span>  {&quot;two&quot;, 2},</span></span>
<span class="line"><span>  {&quot;three&quot;, 3},</span></span>
<span class="line"><span>  {&quot;four&quot;, 4}</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mmp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ &quot;four&quot; =&amp;gt; 4, &quot;one&quot; =&amp;gt; 1, &quot;three&quot; =&amp;gt; 3, &quot;two&quot; =&amp;gt; 2 }</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mmp.insert({&quot;four&quot;, -4});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mmp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>{ &quot;four&quot; =&amp;gt; 4, &quot;four&quot; =&amp;gt; -4, &quot;one&quot; =&amp;gt; 1, &quot;three&quot; =&amp;gt; 3, &quot;two&quot; =&amp;gt; 2 }</code></p><p>可以看到，关联容器是一种有序的容器。名字带“multi”的允许键重复，不带的不允许键重复。<code>set</code> 和 <code>multiset</code> 只能用来存放键，而 <code>map</code> 和 <code>multimap</code> 则存放一个个键值对。</p><p>与序列容器相比，关联容器没有前、后的概念及相关的成员函数，但同样提供 <code>insert</code>、<code>emplace</code> 等成员函数。此外，关联容器都有 <code>find</code>、<code>lower_bound</code>、<code>upper_bound</code> 等查找函数，结果是一个迭代器：</p><ul><li><code>find(k)</code> 可以找到任何一个等价于查找键 k 的元素（<code>!(x &amp;lt; k || k &amp;lt; x)</code>）</li><li><code>lower_bound(k)</code> 找到第一个不小于查找键 k 的元素（<code>!(x &amp;lt; k)</code>）</li><li><code>upper_bound(k)</code> 找到第一个大于查找键 k 的元素（<code>k &amp;lt; x</code>）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp.find(&quot;four&quot;)-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>4</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mp.lower_bound(&quot;four&quot;)-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>4</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(--mp.upper_bound(&quot;four&quot;))-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>4</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mmp.lower_bound(&quot;four&quot;)-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>4</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(--mmp.upper_bound(&quot;four&quot;))-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>-4</code></p><p>如果你需要在 <code>multimap</code> 里精确查找满足某个键的区间的话，建议使用 <code>equal_range</code>，可以一次性取得上下界（半开半闭）。如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;tuple&amp;gt;</span></span>
<span class="line"><span>multimap&amp;lt;string, int&amp;gt;::iterator</span></span>
<span class="line"><span>  lower, upper;</span></span>
<span class="line"><span>std::tie(lower, upper) =</span></span>
<span class="line"><span>  mmp.equal_range(&quot;four&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(lower != upper)  // 检测区间非空</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>true</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lower-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>4</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(--upper)-&amp;gt;second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote></blockquote><p><code>-4</code></p><p>如果在声明关联容器时没有提供比较类型的参数，缺省使用 <code>less</code> 来进行排序。如果键的类型提供了比较算符 <code>&amp;lt;</code> 的重载，我们不需要做任何额外的工作。否则，我们就需要对键类型进行 <code>less</code> 的特化，或者提供一个其他的函数对象类型。</p><p>对于自定义类型，我推荐尽量使用标准的 <code>less</code> 实现，通过重载 <code>&amp;lt;</code>（及其他标准比较运算符）对该类型的对象进行排序。存储在关联容器中的键一般应满足严格弱序关系（strict weak ordering；[4]），即：</p><ul><li>对于任何该类型的对象 x：<code>!(x &amp;lt; x)</code>（非自反）</li><li>对于任何该类型的对象 x 和 y：如果 <code>x &amp;lt; y</code>，则 <code>!(y &amp;lt; x)</code>（非对称）</li><li>对于任何该类型的对象 x、y 和 z：如果 <code>x &amp;lt; y</code> 并且 <code>y &amp;lt; z</code>，则 <code>x &amp;lt; z</code>（传递性）</li><li>对于任何该类型的对象 x、y 和 z：如果 x 和 y 不可比（<code>!(x &amp;lt; y)</code> 并且 <code>!(y &amp;lt; x)</code>）并且 y 和 z 不可比，则 x 和 z 不可比（不可比的传递性）</li></ul><p>大部分情况下，类型是可以满足这些条件的，不过：</p><ul><li>如果类型没有一般意义上的大小关系（如复数），我们一定要别扭地定义一个大小关系吗？</li><li>通过比较来进行查找、插入和删除，复杂度为对数 O(log(n))，有没有达到更好的性能的方法？</li></ul><h2 id="无序关联容器" tabindex="-1"><a class="header-anchor" href="#无序关联容器"><span>无序关联容器</span></a></h2><p>从 C++11 开始，每一个关联容器都有一个对应的无序关联容器，它们是：</p><ul><li><code>unordered_set</code></li><li><code>unordered_map</code></li><li><code>unordered_multiset</code></li><li><code>unordered_multimap</code></li></ul><p>这些容器和关联容器非常相似，主要的区别就在于它们是“无序”的。这些容器不要求提供一个排序的函数对象，而要求一个可以计算哈希值的函数对象。你当然可以在声明容器对象时手动提供这样一个函数对象类型，但更常见的情况是，我们使用标准的 <code>hash</code> 函数对象及其特化。</p><p>下面是一个示例（这次我们暂不使用 xeus-cling，因为它在输出复数时有限制，不能显示其数值）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;complex&amp;gt;        // std::complex</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;       // std::cout/endl</span></span>
<span class="line"><span>#include &amp;lt;unordered_map&amp;gt;  // std::unordered_map</span></span>
<span class="line"><span>#include &amp;lt;unordered_set&amp;gt;  // std::unordered_set</span></span>
<span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace std {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;typename T&amp;gt;</span></span>
<span class="line"><span>struct hash&amp;lt;complex&amp;lt;T&amp;gt;&amp;gt; {</span></span>
<span class="line"><span>  size_t</span></span>
<span class="line"><span>  operator()(const complex&amp;lt;T&amp;gt;&amp;amp; v) const</span></span>
<span class="line"><span>    noexcept</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    hash&amp;lt;T&amp;gt; h;</span></span>
<span class="line"><span>    return h(v.real()) + h(v.imag());</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}  // namespace std</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  unordered_set&amp;lt;int&amp;gt; s{</span></span>
<span class="line"><span>    1, 1, 2, 3, 5, 8, 13, 21</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  unordered_map&amp;lt;complex&amp;lt;double&amp;gt;,</span></span>
<span class="line"><span>                double&amp;gt;</span></span>
<span class="line"><span>    umc{{{1.0, 1.0}, 1.4142},
        {{3.0, 4.0}, 5.0}};</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; umc &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出可能是（顺序不能保证）：</p><blockquote></blockquote><p>\`{ 21, 5, 8, 3, 13, 2, 1 }\`<br> \`{ (3,4) =&gt; 5, (1,1) =&gt; 1.4142 }\`</p><p>请注意我们在 <code>std</code> 名空间中添加了特化，这是少数用户可以向 <code>std</code> 名空间添加内容的情况之一。正常情况下，向 <code>std</code> 名空间添加声明或定义是禁止的，属于未定义行为。</p><p>从实际的工程角度，无序关联容器的主要优点在于其性能。关联容器和 <code>priority_queue</code> 的插入和删除操作，以及关联容器的查找操作，其复杂度都是 O(log(n))，而无序关联容器的实现使用哈希表 [5]，可以达到平均 O(1)！但这取决于我们是否使用了一个好的哈希函数：在哈希函数选择不当的情况下，无序关联容器的插入、删除、查找性能可能成为最差情况的 O(n)，那就比关联容器糟糕得多了。</p><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span>array</span></a></h2><p>我们讲的最后一个容器是 C 数组的替代品。C 数组在 C++ 里继续存在，主要是为了保留和 C 的向后兼容性。C 数组本身和 C++ 的容器相差是非常大的：</p><ul><li>C 数组没有 <code>begin</code> 和 <code>end</code> 成员函数（虽然可以使用全局的 <code>begin</code> 和 <code>end</code> 函数）</li><li>C 数组没有 <code>size</code> 成员函数（得用一些模板技巧来获取其长度）</li><li>C 数组作为参数有退化行为，传递给另外一个函数后那个函数不再能获得 C 数组的长度和结束位置</li></ul><p>在 C 的年代，大家有时候会定义这样一个宏来获得数组的长度：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#define ARRAY_LEN(a) \\</span></span>
<span class="line"><span>  (sizeof(a) / sizeof((a)[0]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在一个函数内部对数组参数使用这个宏，结果肯定是错的。现在 GCC 会友好地发出警告：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void test(int a[8])</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; ARRAY_LEN(a) &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><p>warning: sizeof on array function parameter will return size of ‘int *’ instead of ‘int [8]’ [-Wsizeof-array-argument]<br>     cout &lt;&lt; ARRAY_LEN(a) &lt;&lt; endl;</p><p>C++17 直接提供了一个 <code>size</code> 方法，可以用于提供数组长度，并且在数组退化成指针的情况下会直接失败：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;  // std::cout/endl</span></span>
<span class="line"><span>#include &amp;lt;iterator&amp;gt;  // std::size</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void test(int arr[])</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // 不能编译</span></span>
<span class="line"><span>  // std::cout &amp;lt;&amp;lt; std::size(arr)</span></span>
<span class="line"><span>  //           &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  int arr[] = {1, 2, 3, 4, 5};</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; &quot;The array length is &quot;</span></span>
<span class="line"><span>            &amp;lt;&amp;lt; std::size(arr)</span></span>
<span class="line"><span>            &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>  test(arr);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，C 数组也没有良好的复制行为。你无法用 C 数组作为 <code>map</code> 或 <code>unordered_map</code> 的键类型。下面的代码演示了失败行为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;map&amp;gt;  // std::map</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typedef char mykey_t[8];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  std::map&amp;lt;mykey_t, int&amp;gt; mp;</span></span>
<span class="line"><span>  mykey_t mykey{&quot;hello&quot;};</span></span>
<span class="line"><span>  mp[mykey] = 5;</span></span>
<span class="line"><span>  // 轰，大段的编译错误</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不用 C 数组的话，我们该用什么来替代呢？</p><p>我们有三个可以考虑的选项：</p><ul><li>如果数组较大的话，应该考虑 <code>vector</code>。<code>vector</code> 有最大的灵活性和不错的性能。</li><li>对于字符串数组，当然应该考虑 <code>string</code>。</li><li>如果数组大小固定（C 的数组在 C++ 里本来就是大小固定的）并且较小的话，应该考虑 <code>array</code>。<code>array</code> 保留了 C 数组在栈上分配的特点，同时，提供了 <code>begin</code>、<code>end</code>、<code>size</code> 等通用成员函数。</li></ul><p><code>array</code> 可以避免 C 数组的种种怪异行径。上面的失败代码，如果使用 <code>array</code> 的话，稍作改动就可以通过编译：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;array&amp;gt;     // std::array</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;  // std::cout/endl</span></span>
<span class="line"><span>#include &amp;lt;map&amp;gt;       // std::map</span></span>
<span class="line"><span>#include &quot;output_container.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typedef std::array&amp;lt;char, 8&amp;gt; mykey_t;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  std::map&amp;lt;mykey_t, int&amp;gt; mp;</span></span>
<span class="line"><span>  mykey_t mykey{&quot;hello&quot;};</span></span>
<span class="line"><span>  mp[mykey] = 5;  // OK</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; mp &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出则是意料之中的：</p><blockquote></blockquote><p><code>{ hello =&amp;gt; 5 }</code></p><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>本讲介绍了 C++ 的两个常用的函数对象，<code>less</code> 和 <code>hash</code>；然后介绍了用到这两个函数对象的容器适配器、关联容器和无序关联容器；最后，通过例子展示了为什么我们应当避免 C 数组而考虑使用 <code>array</code>。通过这两讲，我们已经完整地了解了 C++ 提供的标准容器。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>请思考一下：</p><ol><li>为什么大部分容器都提供了 <code>begin</code>、<code>end</code> 等方法？</li><li>为什么容器没有继承一个公用的基类？</li></ol><p>欢迎留言和我交流你的看法。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Containers library”. <a href="https://en.cppreference.com/w/cpp/container" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/container</a></p><p>[1a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “容器库”. <a href="https://zh.cppreference.com/w/cpp/container" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/container</a></p><p>[2] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Explicit (full) template specialization”. <a href="https://en.cppreference.com/w/cpp/language/template_specialization" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/language/template_specialization</a></p><p>[2a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “显式（全）模板特化”. <a href="https://zh.cppreference.com/w/cpp/language/template_specialization" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/language/template_specialization</a></p><p>[3] Wikipedia, “Associative array”. <a href="https://en.wikipedia.org/wiki/Associative_array" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Associative_array</a></p><p>[3a] 维基百科, “关联数组”. <a href="https://zh.wikipedia.org/zh-cn/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/关联数组</a></p><p>[4] Wikipedia, “Weak ordering”. <a href="https://en.wikipedia.org/wiki/Weak_ordering" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Weak_ordering</a></p><p>[5] Wikipedia, “Hash table”. <a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Hash_table</a></p><p>[5a] 维基百科, “哈希表”. <a href="https://zh.wikipedia.org/zh-cn/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/哈希表</a></p>`,147)]))}const r=e(l,[["render",p]]),o=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/05%20_%20%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96%20II%EF%BC%9A%E9%9C%80%E8%A6%81%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%B9%E5%99%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是吴咏炜。 上一讲我们学习了 C++ 的序列容器和两个容器适配器，今天我们继续讲完剩下的标准容器（[1]）。 函数对象及其特化 在讲容器之前，我们需要首先来讨论一下两个重要的函数对象，less 和 hash。 我们先看一下 less，小于关系。在标准库里，通用的 less 大致是这样定义的： 也就是说，less 是一个函数对象，并且是个二元函数...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/05%20_%20%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96%20II%EF%BC%9A%E9%9C%80%E8%A6%81%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是吴咏炜。 上一讲我们学习了 C++ 的序列容器和两个容器适配器，今天我们继续讲完剩下的标准容器（[1]）。 函数对象及其特化 在讲容器之前，我们需要首先来讨论一下两个重要的函数对象，less 和 hash。 我们先看一下 less，小于关系。在标准库里，通用的 less 大致是这样定义的： 也就是说，less 是一个函数对象，并且是个二元函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":12.52,"words":3755},"filePathRelative":"posts/现代C++实战30讲/基础篇/05 _ 容器汇编 II：需要函数对象的容器.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"05 | 容器汇编 II：需要函数对象的容器\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/c0/a8/c0be78d32a3c20c24679e93c0f151ba8.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>上一讲我们学习了 C++ 的序列容器和两个容器适配器，今天我们继续讲完剩下的标准容器（[1]）。</p>\\n<h2>函数对象及其特化</h2>\\n<p>在讲容器之前，我们需要首先来讨论一下两个重要的函数对象，<code>less</code> 和 <code>hash</code>。</p>","autoDesc":true}');export{r as comp,o as data};
