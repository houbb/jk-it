import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as i,o as n}from"./app-CrA-f6So.js";const l={};function p(d,e){return n(),s("div",null,e[0]||(e[0]=[i(`<h1 id="_23-数字计算-介绍线性代数和数值计算库" tabindex="-1"><a class="header-anchor" href="#_23-数字计算-介绍线性代数和数值计算库"><span>23 _ 数字计算：介绍线性代数和数值计算库</span></a></h1><p><audio id="audio" title="23 | 数字计算：介绍线性代数和数值计算库" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/8b/b1/8bcc899b1dfec29c3d6b90f47a522db1.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>科学计算在今天已经完全可以使用 C++ 了。我不是从事科学计算这一领域的工作的，不过，在工作中也多多少少接触到了一些计算相关的库。今天，我就给你介绍几个有用的计算库。</p><h2 id="armadillo" tabindex="-1"><a class="header-anchor" href="#armadillo"><span>Armadillo</span></a></h2><p>说到计算，你可能首先会想到矩阵、矢量这些东西吧？这些计算，确实就是科学计算中的常见内容了。这些领域的标准，即是一些 Fortran 库定下的，如：</p><ul><li>BLAS [1]</li><li>LAPACK [2]</li><li>ARPACK [3]</li></ul><p>它们的实现倒不一定用 Fortran，尤其是 BLAS：</p><ul><li>OpenBLAS [4] 是用汇编和 C 语言写的</li><li>Intel MKL [5] 有针对 Intel 的特定 CPU 指令集进行优化的汇编代码</li><li>Mir GLAS [6] 是用 D 语言写的</li></ul><p>不管实现的方法是哪一种，暴露出来的函数名字是这个样子的：</p><ul><li><code>ddot</code></li><li><code>dgemv</code></li><li><code>dsyrk</code></li><li><code>sgemm</code></li><li>……</li></ul><p>这个接口的唯一好处，应该就是，它是跨语言并且跨实现的😅。所以，使用这些函数时，你可以切换不同的实现，而不需要更改代码。唯一需要修改的，通常就是链接库的名字或位置而已。</p><p>假设我们需要做一个简单的矩阵运算，对一个矢量进行旋转：</p><p>$$<br><br> \\begin{aligned}<br><br> \\mathbf{P} &amp;= \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}\\&lt;br/&gt;<br> \\mathbf{R} &amp;= \\begin{bmatrix}<br><br> \\cos(\\theta) &amp; -\\sin(\\theta) \\&lt;br/&gt;<br> \\sin(\\theta) &amp; \\cos(\\theta)\\end{bmatrix}\\&lt;br/&gt;<br> \\mathbf{P^\\prime} &amp;= \\mathbf{R} \\cdot \\mathbf{P}<br><br> \\end{aligned}<br><br> $$</p><p>这么一个简单的操作，用纯 C 接口的 BLAS 来表达，有点痛苦：你需要使用的大概是 <code>dgemv_</code> 函数，而这个函数需要 11 个参数！我查阅了一下资料之后，也就放弃了给你展示一下如何调用 <code>dgemv_</code> 的企图，我们还是老老实实地看一下在现代 C++ 里的写法吧：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;armadillo&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;cmath&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // 代表位置的向量</span></span>
<span class="line"><span>  arma::vec pos{1.0, 0.0};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 旋转矩阵</span></span>
<span class="line"><span>  auto&amp;amp; pi = arma::datum::pi;</span></span>
<span class="line"><span>  double angle = pi / 2;</span></span>
<span class="line"><span>  arma::mat rot = {</span></span>
<span class="line"><span>    {cos(angle), -sin(angle)},</span></span>
<span class="line"><span>    {sin(angle), cos(angle)}};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;Current position:\\n&quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; pos;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;Rotating &quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; angle * 180 / pi</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; &quot; deg\\n&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  arma::vec new_pos = rot * pos;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;New position:\\n&quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; new_pos;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是使用 Armadillo [7] 库来实现矢量旋转的代码。这个代码，基本就是上面的数学公式的一一对应了。代码相当直白，我只需要稍稍说明一下：</p><ul><li>所有的 Armadillo 的类型和函数都定义在 <code>arma</code> 名空间下。</li><li>Armadillo 在 <code>arma::datum</code> 下定义了包括 pi 和 e 在内的一些数学常量。</li><li><code>vec</code> 是矢量类型，<code>mat</code> 是矩阵类型，这两个类型实际上是 <code>Col&amp;lt;double&amp;gt;</code> 和 <code>Mat&amp;lt;double&amp;gt;</code> 的缩写别名。</li><li>Armadillo 支持使用 C++11 的列表初始化语法来初始化对象。</li><li>Armadillo 支持使用流来输出对象。</li></ul><p>上面代码的输出为：</p><blockquote></blockquote><p>\`Current position:\`<br> \`1.0000\`<br> \`0\`<br> \`Rotating 90 deg\`<br> \`New position:\`<br> \`6.1232e-17\`<br> \`1.0000e+00\`</p><p>输出里面的 <code>6.1232e-17</code> 是浮点数表示不精确的后果，把它理解成 0 就对了。</p><p>我们上面已经提到了 <code>vec</code> 实际上是 <code>Col&amp;lt;double&amp;gt;</code>，双精度浮点数类型的列矢量。自然，Armadillo 也有行矢量 <code>rowvec</code>（即 <code>Row&amp;lt;double&amp;gt;</code>），也可以使用其他的数字类型，如 <code>int</code>、 <code>float</code> 和 <code>complex&amp;lt;float&amp;gt;</code>。此外，除了大小不确定的线性代数对象之外，Armadillo 也提供了固定大小的子类型，如 <code>vec::fixed&amp;lt;2&amp;gt;</code> 和 <code>mat::fixed&amp;lt;2, 2&amp;gt;</code>；为方便使用，还提供了不少别名，如 <code>imat22</code> 代表 <code>Mat&amp;lt;int&amp;gt;::fixed&amp;lt;2, 2&amp;gt;</code> 等。固定大小的对象不需要动态内存分配，使用上有一定的性能优势。</p><p>Armadillo 是一个非常复杂的库，它的头文件数量超过了 500 个。我们今天不可能、也不必要描述它的所有功能，只能稍稍部分列举一下：</p><ul><li>除了目前提到的列矢量、行矢量和矩阵外，Armadillo 也支持三维的数据立方体，<code>Cube</code> 模板。</li><li>Armadillo 支持稀疏矩阵，<code>SpMat</code> 模板。</li><li>除了数学上的加、减、乘运算，Armadillo 支持按元素的乘法、除法、相等、不等、小于比较等（使用 <code>%</code>、<code>/</code>、<code>==</code>、<code>!=</code>、<code>&amp;lt;</code> 等）运算，结果的大小跟参数相同，每个元素是相应运算的结果。某些运算符可能不太直观，尤其是 <code>%</code>（不是取模）和 <code>==</code>（返回不是单个布尔值，而是矩阵）。</li><li>Armadillo 支持对非固定大小的矢量、矩阵和立方体，改变其大小（<code>.reshape()</code> 和 <code>resize()</code>）。</li><li>Armadillo 可以方便地按行（<code>.col()</code>）、列（<code>.row()</code>）、对角线（<code>.diag()</code>）读写矩阵的内容，包括用一个矢量去改写矩阵的对角线。</li><li>Armadillo 可以方便地对矩阵进行转置（<code>.t()</code>）、求反（<code>.inv()</code>）。</li><li>Armadillo 可以对矩阵进行特征分解（<code>eigen_sym()</code>、<code>eigen_gen()</code> 等）。</li><li>Armadillo 支持傅立叶变换（<code>fft()</code>、<code>fft2()</code> 等）。</li><li>Armadillo 支持常见的统计计算，如平均值、中位值、标准偏差等（<code>mean()</code>、<code>median()</code>、<code>stddev()</code> 等）。</li><li>Armadillo 支持多项式方程求根（<code>roots</code>）。</li><li>Armadillo 支持 k‐平均聚类（<strong>k</strong>-means clustering）算法（<code>kmeans</code>）。</li><li>等等。</li></ul><p>如果你需要用到这些功能，你可以自己去查看一下具体的细节，我们这儿只提几个与编程有关的细节。</p><h3 id="对象的输出" tabindex="-1"><a class="header-anchor" href="#对象的输出"><span>对象的输出</span></a></h3><p>我们上面已经展示了直接把对象输出到一个流。我们的写法是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cout &amp;lt;&amp;lt; &quot;Current position:\\n&quot;</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; pos;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上基本等价于调用 <code>print</code> 成员函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pos.print(&quot;Current position:&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个写法可能会更简单些。此外，在这两种情况，输出的格式都是 Armadillo 自动控制的。如果你希望自己控制的话，可以使用 <code>raw_print</code> 成员函数。比如，对于上面代码里对 <code>new_pos</code> 的输出，我们可以写成（需要包含 &lt;iomanip&gt;）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; setw(9)</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; setprecision(4);</span></span>
<span class="line"><span>new_pos.raw_print(</span></span>
<span class="line"><span>  cout, &quot;New position:&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况下，你可以有效地对格式、宽度和精度进行设置，能得到：</p><blockquote></blockquote><p>\`New position:\`<br> \`0.0000\`<br> \`1.0000\`</p><p>记得我们说过 <code>vec</code> 是 <code>Col&amp;lt;double&amp;gt;</code> 的别名，因此输出是多行的。我们要输出成单行的话，转置（transpose）一下就可以了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; setw(9)</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; setprecision(4);</span></span>
<span class="line"><span>new_pos.t().raw_print(</span></span>
<span class="line"><span>  cout, &quot;New position:&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><blockquote></blockquote><p>\`New position:\`<br> \`0.0000 1.0000\`</p><h3 id="表达式模板" tabindex="-1"><a class="header-anchor" href="#表达式模板"><span>表达式模板</span></a></h3><p>如果你奇怪前面 <code>dgemv_</code> 为什么有 11 个参数，这里有个我没有提的细节是，它执行的实际上是个复合操作：</p><p>$$<br><br> \\mathbf{y} \\gets \\alpha\\mathbf{A}\\cdot\\mathbf{x} + \\beta\\mathbf{y}<br><br> $$</p><p>如果你只是简单地做乘法的话，就相当于 $\\alpha$ 为 1、$\\beta$ 为 0 的特殊情况。那么问题来了，如果你真的写了类似于上面这样的公式的话，编译器和线性代数库能不能转成合适的调用、而没有额外的开销呢？</p><p>答案是，至少在某些情况下是可以的。秘诀就是表达式模板（expression template）[8]。</p><p>那什么是表达式模板呢？我们先回过去看我上面的例子。有没有注意到我写的是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>arma::vec new_pos = rot * pos;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而没有使用 <code>auto</code> 来声明？</p><p>其中部分的原因是，<code>rot * pos</code> 的类型并不是 <code>vec</code>，而是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const Glue&amp;lt;Mat&amp;lt;double&amp;gt;, Col&amp;lt;double&amp;gt;, glue_times&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>换句话说，结果是一个表达式，而并没有实际进行计算。如果我用 <code>auto</code> 的话，行为上似乎一切都正常，但我每次输出这个结果时，都会重新进行一次矩阵的乘法！而我用 <code>arma::vec</code> 接收的话，构造时就直接进行了计算，存储了表达式的结果。</p><p>上面的简单例子不能实际触发对 <code>dgemv_</code> 的调用，我用下面的代码实际验证出了表达式模板产生的优化（<code>fill::randu</code> 表示对矢量和矩阵的内容进行随机填充）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;armadillo&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span>using namespace arma;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  vec x(8, fill::randu);</span></span>
<span class="line"><span>  mat r(8, 8, fill::randu);</span></span>
<span class="line"><span>  vec result = 2.5 * r * x;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; result;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值语句右边的类型是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const Glue&amp;lt;eOp&amp;lt;Mat&amp;lt;double&amp;gt;,</span></span>
<span class="line"><span>               eop_scalar_times&amp;gt;,</span></span>
<span class="line"><span>           Col&amp;lt;double&amp;gt;, glue_times&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用这个表达式构造 <code>vec</code> 时，就会实际发生对 <code>dgemv_</code> 的调用。我也确实跟踪到了，在将要调用 <code>dgemv_</code> 时，标量值 2.5 确实在参数 <code>alpha</code> 指向的位置上（这个接口的参数都是指针）。</p><p>从上面的描述可以看到，表达式模板是把双刃剑：既可以提高代码的性能，又能增加代码被误用的可能性。在可能用到表达式模板的地方，你需要注意这些问题。</p><h3 id="平台细节" tabindex="-1"><a class="header-anchor" href="#平台细节"><span>平台细节</span></a></h3><p>Armadillo 的文档里说明了如何从源代码进行安装，但在 Linux 和 macOS 下通过包管理器安装可能是更快的方式。在 CentOS 下可使用 <code>sudo yum install armadillo-devel</code>，在 macOS 下可使用 <code>brew install armadillo</code>。使用包管理器一般也会同时安装常见的依赖软件，如 ARPACK 和 OpenBLAS。</p><p>在 Windows 上，Armadillo 的安装包里自带了一个基本版本的 64 位 BLAS 和 LAPACK 库。如果需要更高性能或 32 位版本的话，就需要自己另外去安装了。除非你只是做一些非常简单的线性代数计算（就像我今天的例子），那直接告诉 Armadillo 不要使用第三方库也行。</p><blockquote></blockquote><p><code>cl /EHsc /DARMA_DONT_USE_BLAS /DARMA_DONT_USE_LAPACK …</code></p><h2 id="boost-multiprecision" tabindex="-1"><a class="header-anchor" href="#boost-multiprecision"><span>Boost.Multiprecision</span></a></h2><p>众所周知，C 和 C++（甚至推而广之到大部分的常用编程语言）里的数值类型是有精度限制的。比如，上一讲的代码里我们就用到了 <code>INT_MIN</code>，最小的整数。很多情况下，使用目前这些类型是够用的（最高一般是 64 位整数和 80 位浮点数）。但也有很多情况，这些标准的类型远远不能满足需要。这时你就需要一个高精度的数值类型了。</p><p>有一次我需要找一个高精度整数类型和计算库，最后找到的就是 Boost.Multiprecision [9]。它基本满足我的需求，以及一般意义上对库的期望：</p><ul><li>正确实现我需要的功能</li><li>接口符合直觉、易用</li><li>有良好的性能</li></ul><p>正确实现功能这点我就不多讲了。这是一个基本出发点，没有太多可讨论的地方。在我上次的需求里，对性能其实也没有很高的要求。让我对 Boost.Multiprecision 满意的主要原因，就是它的接口了。</p><h3 id="接口易用性" tabindex="-1"><a class="header-anchor" href="#接口易用性"><span>接口易用性</span></a></h3><p>我在<a href="https://time.geekbang.org/column/article/179363" target="_blank" rel="noopener noreferrer">[第 12 讲]</a> 提到了 CLN。它对我来讲就是个反面教材。它的整数类型不仅不提供 <code>%</code> 运算符，居然还不提供 <code>/</code> 运算符！它强迫用户在下面两个方案中做出选择：</p><ul><li>使用 <code>truncate2</code> 函数，得到一个商数和余数</li><li>使用 <code>exquo</code> 函数，当且仅当可以整除的时候</li></ul><p>不管作者的设计原则是什么，这简直就是易用性方面的灾难了——不仅这些函数要查文档才能知晓，而且有的地方我真的只需要简单的除法呀……</p><p>哦，对了，它在 Windows 编译还很不方便，而我那时用的正是 Windows。</p><p>Boost.Multiprecision 的情况则恰恰相反，让我当即大为满意：</p><ul><li>使用基本的 <code>cpp_int</code> 对象不需要预先编译库，只需要 Boost 的头文件和一个好的编译器。</li><li>常用运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code> 一个不缺，全部都有。</li><li>可以自然地通过整数和字符串来进行构造。</li><li>提供了用户自定义字面量来高效地进行初始化。</li><li>在使用 IO 流时，输入输出既可以使用十进制，也可以通过 <code>hex</code> 来切换到十六进制。</li></ul><p>下面的代码展示了它的基本功能：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iomanip&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  using namespace boost::</span></span>
<span class="line"><span>    multiprecision::literals;</span></span>
<span class="line"><span>  using boost::multiprecision::</span></span>
<span class="line"><span>    cpp_int;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cpp_int a =</span></span>
<span class="line"><span>    0x123456789abcdef0_cppi;</span></span>
<span class="line"><span>  cpp_int b = 16;</span></span>
<span class="line"><span>  cpp_int c{&quot;0400&quot;};</span></span>
<span class="line"><span>  cpp_int result = a * b / c;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是：</p><blockquote></blockquote><p>\`123456789abcdef\`<br> \`81985529216486895\`</p><p>我们可以看到，<code>cpp_int</code> 可以通过自定义字面量（后缀 <code>_cppi</code>；只能十六进制）来初始化，可以通过一个普通整数来初始化，也可以通过字符串来初始化（并可以使用 <code>0x</code> 和 <code>0</code> 前缀来选择十六进制和八进制）。拿它可以正常地进行加减乘除操作，也可以通过 IO 流来输入输出。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h3><p>Boost.Multiprecision 使用了表达式模板和 C++11 的移动来避免不必要的拷贝。后者当然是件好事，而前者曾经坑了我一下——我第一次使用 Boost.Multiprecision 时非常困惑为什么我使用 <code>half(n - 1)</code> 调用下面的简单函数居然会编译不过：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename N&amp;gt;</span></span>
<span class="line"><span>inline N half(N n)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return n / 2;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我的意图当然是 <code>N</code> 应当被推导为 <code>cpp_int</code>，<code>half</code> 的结果也是 <code>cpp_int</code>。可实际上，<code>n - 1</code> 的结果跟上面的 Armadillo 展示的情况类似，是另外一个单独的类型。我需要把 <code>half(n - 1)</code> 改写成 <code>half(N(n - 1))</code> 才能得到期望的结果。</p><p>我做的计算挺简单，并不觉得表达式模板对我的计算有啥帮助，所以我最后是禁用了表达式模板：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef boost::multiprecision::</span></span>
<span class="line"><span>  number&amp;lt;</span></span>
<span class="line"><span>    boost::multiprecision::</span></span>
<span class="line"><span>      cpp_int_backend&amp;lt;&amp;gt;,</span></span>
<span class="line"><span>    boost::multiprecision::et_off&amp;gt;</span></span>
<span class="line"><span>    int_type;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于 Armadillo 可以换不同的 BLAS 和 LAPACK 实现，Boost.Multiprecision 也可以改换不同的后端。比如，如果我们打算使用 GMP [10] 的话，我们需要包含利用 GMP 的头文件，并把上面的 <code>int_type</code> 的定义修正一下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typedef boost::multiprecision::</span></span>
<span class="line"><span>  number&amp;lt;</span></span>
<span class="line"><span>    boost::multiprecision::gmp_int,</span></span>
<span class="line"><span>    boost::multiprecision::et_off&amp;gt;</span></span>
<span class="line"><span>    int_type;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我并不是推荐你换用 GMP。如果你真的对性能非常渴求的话，应当进行测试来选择合适的后端。否则缺省的后端易用性最好——比如，使用 GMP 后端就不能使用自定义字面量了。</p><p>我当时寻找高精度算术库是为了做 RSA 加解密。计算本身不复杂，属于编程几小时、运行几毫秒的情况。如果你有兴趣的话，可以看一下我那时的挑选过程和最终代码 [11]。</p><p>Boost 里好东西很多，远远不止这一样。下一讲我们就来专门聊聊 Boost。</p><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>本讲我们讨论了两个进行计算的模板库，Armadillo 和 Boost.Multiprecision，并讨论了它们用到的表达式模板技巧和相关的计算库，如 BLAS、LAPACK 和 GMP。可以看到，使用 C++ 你可以站到巨人肩上，轻松写出高性能的计算代码。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>性能和易用性往往是有矛盾的。你对性能和易用性有什么样的偏好呢？欢迎留言与我分享。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] Wikipedia, “Basic Linear Algebra Subprograms”. <a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms</a></p><p>[2] Wikipedia, “LAPACK”. <a href="https://en.wikipedia.org/wiki/LAPACK" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/LAPACK</a></p><p>[3] Wikipedia, “ARPACK”. <a href="https://en.wikipedia.org/wiki/ARPACK" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/ARPACK</a></p><p>[4] Zhang Xianyi et al., OpenBLAS. <a href="https://github.com/xianyi/OpenBLAS" target="_blank" rel="noopener noreferrer">https://github.com/xianyi/OpenBLAS</a></p><p>[5] Intel, Math Kernel Library. <a href="https://software.intel.com/mkl" target="_blank" rel="noopener noreferrer">https://software.intel.com/mkl</a></p><p>[6] Ilya Yaroshenko, mir-glas. <a href="https://github.com/libmir/mir-glas" target="_blank" rel="noopener noreferrer">https://github.com/libmir/mir-glas</a></p><p>[7] Conrad Sanderson and Ryan Curtin, “Armadillo: C++ library for linear algebra &amp; scientific computing”. <a href="http://arma.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://arma.sourceforge.net/</a></p><p>[8] Wikipedia, “Expression templates”. <a href="https://en.wikipedia.org/wiki/Expression_templates" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Expression_templates</a></p><p>[9] John Maddock, Boost.Multiprecision. <a href="https://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/index.html" target="_blank" rel="noopener noreferrer">https://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/index.html</a></p><p>[10] The GNU MP bignum library. <a href="https://gmplib.org/" target="_blank" rel="noopener noreferrer">https://gmplib.org/</a></p><p>[11] 吴咏炜, “Choosing a multi-precision library for C++—a critique”. <a href="https://yongweiwu.wordpress.com/2016/06/04/choosing-a-multi-precision-library-for-c-a-critique/" target="_blank" rel="noopener noreferrer">https://yongweiwu.wordpress.com/2016/06/04/choosing-a-multi-precision-library-for-c-a-critique/</a></p>`,108)]))}const r=a(l,[["render",p]]),c=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%AE%9E%E6%88%98%E7%AF%87/23%20_%20%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%EF%BC%9A%E4%BB%8B%E7%BB%8D%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%92%8C%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%BA%93.html","title":"23 _ 数字计算：介绍线性代数和数值计算库","lang":"zh-CN","frontmatter":{"description":"23 _ 数字计算：介绍线性代数和数值计算库 你好，我是吴咏炜。 科学计算在今天已经完全可以使用 C++ 了。我不是从事科学计算这一领域的工作的，不过，在工作中也多多少少接触到了一些计算相关的库。今天，我就给你介绍几个有用的计算库。 Armadillo 说到计算，你可能首先会想到矩阵、矢量这些东西吧？这些计算，确实就是科学计算中的常见内容了。这些领域的...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%AE%9E%E6%88%98%E7%AF%87/23%20_%20%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%EF%BC%9A%E4%BB%8B%E7%BB%8D%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%92%8C%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"23 _ 数字计算：介绍线性代数和数值计算库"}],["meta",{"property":"og:description","content":"23 _ 数字计算：介绍线性代数和数值计算库 你好，我是吴咏炜。 科学计算在今天已经完全可以使用 C++ 了。我不是从事科学计算这一领域的工作的，不过，在工作中也多多少少接触到了一些计算相关的库。今天，我就给你介绍几个有用的计算库。 Armadillo 说到计算，你可能首先会想到矩阵、矢量这些东西吧？这些计算，确实就是科学计算中的常见内容了。这些领域的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"23 _ 数字计算：介绍线性代数和数值计算库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":13.11,"words":3934},"filePathRelative":"posts/现代C++实战30讲/实战篇/23 _ 数字计算：介绍线性代数和数值计算库.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"23 | 数字计算：介绍线性代数和数值计算库\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/8b/b1/8bcc899b1dfec29c3d6b90f47a522db1.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>科学计算在今天已经完全可以使用 C++ 了。我不是从事科学计算这一领域的工作的，不过，在工作中也多多少少接触到了一些计算相关的库。今天，我就给你介绍几个有用的计算库。</p>","autoDesc":true}');export{r as comp,c as data};
