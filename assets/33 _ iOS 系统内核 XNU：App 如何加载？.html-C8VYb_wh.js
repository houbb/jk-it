import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as i}from"./app-6Bz2fGO5.js";const p={};function l(r,a){return i(),s("div",null,a[0]||(a[0]=[e(`<p><audio id="audio" title="33 | iOS 系统内核 XNU：App 如何加载？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/3a/e7/3a98828ea4ed48df332bb26ca897e8e7.mp3"></audio></p><p>你好，我是戴铭。</p><p>在专栏的第2篇文章<a href="https://time.geekbang.org/column/article/85331" target="_blank" rel="noopener noreferrer">《App 启动速度怎么做优化与监控？》</a>更新完之后，我看到很多同学对启动加载 App 的底层原理表示出了浓厚兴趣。所谓工欲善其事，必先利其器，相信有着好奇心的你，一定也会对支撑着 App 运行的操作系统有着各种各样的疑问。</p><p>我曾在专栏的第5篇文章<a href="https://time.geekbang.org/column/article/86840" target="_blank" rel="noopener noreferrer">《链接器：符号是怎么绑定到地址上的？》</a>中，和你分享了链接器在编译时和程序启动时会做的事情。而今天这篇文章，我会重点与你说说加载动态链接器之前，系统是怎么加载 App 的。</p><p>所以，今天我会先跟你说说iOS系统的架构是怎样的，各部分的作用是什么，帮助你理解iOS系统的原理，进而更全面地理解它在 App 加载时做了哪些事情？</p><p>接下来，我就先跟你聊聊 iOS 的系统架构是怎样的。在理解iOS系统架构之前，你最好掌握一些操作系统原理的基础知识。</p><h2 id="ios-系统架构" tabindex="-1"><a class="header-anchor" href="#ios-系统架构"><span>iOS 系统架构</span></a></h2><p>iOS 系统是基于 ARM 架构的，大致可以分为四层：</p><ul><li>最上层是用户体验层，主要是提供用户界面。这一层包含了 SpringBoard、Spotlight、Accessibility。</li><li>第二层是应用框架层，是开发者会用到的。这一层包含了开发框架 Cocoa Touch。</li><li>第三层是核心框架层，是系统核心功能的框架层。这一层包含了各种图形和媒体核心框架、Metal 等。</li><li>第四层是 Darwin层，是操作系统的核心，属于操作系统的内核态。这一层包含了系统内核 XNU、驱动等。</li></ul><img src="https://static001.geekbang.org/resource/image/6d/01/6d0c4526f448d03c232cfa0149a32d01.png" alt=""><p>其中，用户体验层、应用框架层和核心框架层，属于用户态，是上层 App 的活动空间。Darwin是用户态的下层支撑，是iOS系统的核心。</p><p>Darwin的内核是XNU，而XNU是在UNIX的基础上做了很多改进以及创新。了解XNU的内部是怎么样的，将有助于我们解决系统层面的问题。</p><p>所以接下来，我们就一起看看XNU的架构，看看它的内部到底都包含了些什么。</p><h2 id="xnu" tabindex="-1"><a class="header-anchor" href="#xnu"><span>XNU</span></a></h2><p>XNU 内部由 Mach、BSD、驱动 API IOKit 组成，这些都依赖于 libkern、libsa、Platform Expert。如下图所示：</p><img src="https://static001.geekbang.org/resource/image/0f/7b/0f51e4995ead8b5b4c0e8cd2a987917b.png" alt=""><p>其中，<a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/Mach/Mach.html" target="_blank" rel="noopener noreferrer">Mach</a>是作为 UNIX 内核的替代，主要解决 UNIX一切皆文件导致抽象机制不足的问题，为现代操作系统做了进一步的抽象工作。 Mach 负责操作系统最基本的工作，包括进程和线程抽象、处理器调度、进程间通信、消息机制、虚拟内存管理、内存保护等。</p><p>进程对应到 Mach 是 Mach Task，Mach Task 可以看做是线程执行环境的抽象，包含虚拟地址空间、IPC 空间、处理器资源、调度控制、线程容器。</p><p>进程在 BSD 里是由 BSD Process 处理，BSD Process 扩展了 Mach Task，增加了进程 ID、信号信息等，BSD Process 里面包含了扩展 Mach Thread 结构的 Uthread。</p><p>Mach 的模块包括进程和线程都是对象，对象之间不能直接调用，只能通过 Mach Msg 进行通信，也就是 mach_msg() 函数。在用户态的那三层中，也就是在用户体验层、应用框架层和核心框架层中，你可以通过 mach_msg_trap() 函数触发陷阱，从而切至 Mach，由 Mach 里的 mach_msg() 函数完成实际通信，具体实现可以参看 NSHipster 的这篇文章“<a href="https://nshipster.com/inter-process-communication/" target="_blank" rel="noopener noreferrer">Inter-Process Communication</a>”。</p><p>每个 Mach Thread 表示一个线程，是 Mach 里的最小执行单位。Mach Thread 有自己的状态，包括机器状态、线程栈、调度优先级（有128个，数字越大表示优先级越高）、调度策略、内核 Port、异常 Port。</p><p>Mach Thread 既可以由 Mach Task 处理，也可以扩展为 Uthread，通过 BSD Process 处理。这是因为 XNU 采用的是微内核 Mach 和 宏内核 BSD 的混合内核，具备微内核和宏内核的优点。</p><ul><li>微内核可以提高系统的模块化程度，提供内存保护的消息传递机制；</li><li>宏内核也可以叫单内核，在出现高负荷状态时依然能够让系统保持高效运作。</li></ul><p>Mach 是微内核，可以将操作系统的核心独立在进程上运行，不过，内核层和用户态各层之间切换上下文和进程间消息传递都会降低性能。为了提高性能，苹果深度定制了 BSD 宏内核，使其和 Mach 混合使用。</p><p>宏内核 BSD 是对 Mach 封装，提供进程管理、安全、网络、驱动、内存、文件系统（HFS+）、网络文件系统（NFS）、虚拟文件系统（VFS）、POSIX（Portable Operating System Interface of UNIX，可移植操作系统接口）兼容。</p><p>早期的 BSD 是 UNIX 衍生出的操作系统，现在 BSD 是类 UNIX 操作系统的统称。XNU 的 BSD 来源于 FreeBSD 内核，经过深度定制而成。IEEE 为了保证软件可以在各个 UNIX 系统上运行而制定了 POSIX 标准，iOS 也是通过 BSD 对 POSIX 的兼容而成为了类 UNIX 系统。</p><p>BSD 提供了更现代、更易用的内核接口，以及 POSIX 的兼容，比如通过扩展 Mach Task 进程结构为 BSD Process。对于 Mach 使用 mach_msg_trap() 函数触发陷阱来处理异常消息，BSD 则在异常消息机制的基础上建立了信号处理机制，用户态产生的信号会先被 Mach 转换成异常，BSD 将异常再转换成信号。对于进程和线程，BSD 会构建 UNIX 进程模型，创建 POSIX 兼容的线程模型 pthread。</p><p>iOS 6后，为了增强系统安全，BSD 实行了ASLR（Address Space Layout Randomization，地址空间布局随机化）。随着 iPhone 硬件升级，为了更好地利用多核，BSD 加入了工作队列，以支持多核多线程处理，这也是 GCD 能更高效工作的基础。 BSD 还从 TrustdBSD 引入了 MAC 框架以增强权限 entitlement 机制的安全。</p><p>除了微内核 Mach 和宏内核 BSD 外，XNU 还有 IOKit。IOKit 是硬件驱动程序的运行环境，包含电源、内存、CPU等信息。IOKit 底层 libkern 使用 C++ 子集 Embedded C++ 编写了驱动程序基类，比如 OSObject、OSArray、OSString等，新驱动可以继承这些基类来写。</p><p>了解了 XNU 后，接下来，我再跟你聊聊 XNU 怎么加载 App 的？</p><h2 id="xnu-怎么加载-app" tabindex="-1"><a class="header-anchor" href="#xnu-怎么加载-app"><span>XNU 怎么加载 App？</span></a></h2><p>iOS 的可执行文件和动态库都是 Mach-O 格式，所以加载 APP 实际上就是加载 Mach-O 文件。</p><p>Mach-O header 信息结构代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct mach_header_64 {</span></span>
<span class="line"><span>    uint32_t        magic;      // 64位还是32位</span></span>
<span class="line"><span>    cpu_type_t      cputype;    // CPU 类型，比如 arm 或 X86</span></span>
<span class="line"><span>    cpu_subtype_t   cpusubtype; // CPU 子类型，比如 armv8</span></span>
<span class="line"><span>    uint32_t        filetype;   // 文件类型</span></span>
<span class="line"><span>    uint32_t        ncmds;      // load commands 的数量</span></span>
<span class="line"><span>    uint32_t        sizeofcmds; // load commands 大小</span></span>
<span class="line"><span>    uint32_t        flags;      // 标签</span></span>
<span class="line"><span>    uint32_t        reserved;   // 保留字段</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面代码所示，包含了表示是64位还是32位的 magic、CPU 类型 cputype、CPU 子类型 cpusubtype、文件类型 filetype、描述文件在虚拟内存中逻辑结构和布局的 load commands 数量和大小等文件信息。</p><p>其中，文件类型 filetype 表示了当前 Mach-O 属于哪种类型。Mach-O 包括以下几种类型。</p><ul><li>OBJECT，指的是 .o 文件或者 .a 文件；</li><li>EXECUTE，指的是IPA 拆包后的文件；</li><li>DYLIB，指的是 .dylib 或 .framework 文件；</li><li>DYLINKER，指的是动态链接器；</li><li>DSYM，指的是保存有符号信息用于分析闪退信息的文件。</li></ul><p>加载 Mach-O 文件，内核会 fork 进程，并对进程进行一些基本设置，比如为进程分配虚拟内存、为进程创建主线程、代码签名等。用户态 dyld 会对 Mach-O 文件做库加载和符号解析。</p><p>苹果公司已经将 <a href="https://opensource.apple.com/" target="_blank" rel="noopener noreferrer">XNU 开源</a>，并在 GitHub 上创建了<a href="https://github.com/apple/darwin-xnu" target="_blank" rel="noopener noreferrer">镜像</a>。要想编译 XNU，你可以查看“<a href="https://0xcc.re/building-xnu-kernel-macosx-sierrra-10-12-x/" target="_blank" rel="noopener noreferrer">Building the XNU kernel on Mac OS X Sierra (10.12.X)</a>”这篇文章；要想调试 XNU，可以查看“<a href="https://shadowfile.inode.link/blog/2018/10/source-level-debugging-the-xnu-kernel/" target="_blank" rel="noopener noreferrer">Source Level Debugging the XNU Kernel</a>”这篇文章。</p><p>整个 fork 进程，加载解析 Mach-O文件的过程可以在 XNU 的源代码中查看，代码路径是darwin-xnu/bsd/kern/kern_exec.c，地址是<a href="https://github.com/apple/darwin-xnu/blob/master/bsd/kern/kern_exec.c" target="_blank" rel="noopener noreferrer">https://github.com/apple/darwin-xnu/blob/master/bsd/kern/kern_exec.c</a>，相关代码在 __mac_execve 函数里，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int __mac_execve(proc_t p, struct __mac_execve_args *uap, int32_t *retval)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    // 字段设置</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    int is_64 = IS_64BIT_PROCESS(p);</span></span>
<span class="line"><span>    struct vfs_context context;</span></span>
<span class="line"><span>    struct uthread  *uthread; // 线程</span></span>
<span class="line"><span>    task_t new_task = NULL;   // Mach Task</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    context.vc_thread = current_thread();</span></span>
<span class="line"><span>    context.vc_ucred = kauth_cred_proc_ref(p);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 分配大块内存，不用堆栈是因为 Mach-O 结构很大。</span></span>
<span class="line"><span>    MALLOC(bufp, char *, (sizeof(*imgp) + sizeof(*vap) + sizeof(*origvap)), M_TEMP, M_WAITOK | M_ZERO);</span></span>
<span class="line"><span>    imgp = (struct image_params *) bufp;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 初始化 imgp 结构里的公共数据</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    uthread = get_bsdthread_info(current_thread());</span></span>
<span class="line"><span>    if (uthread-&amp;gt;uu_flag &amp;amp; UT_VFORK) {</span></span>
<span class="line"><span>        imgp-&amp;gt;ip_flags |= IMGPF_VFORK_EXEC;</span></span>
<span class="line"><span>        in_vfexec = TRUE;</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        // 程序如果是启动态，就需要 fork 新进程</span></span>
<span class="line"><span>        imgp-&amp;gt;ip_flags |= IMGPF_EXEC;</span></span>
<span class="line"><span>        // fork 进程</span></span>
<span class="line"><span>        imgp-&amp;gt;ip_new_thread = fork_create_child(current_task(),</span></span>
<span class="line"><span>                    NULL, p, FALSE, p-&amp;gt;p_flag &amp;amp; P_LP64, TRUE);</span></span>
<span class="line"><span>        // 异常处理</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        new_task = get_threadtask(imgp-&amp;gt;ip_new_thread);</span></span>
<span class="line"><span>        context.vc_thread = imgp-&amp;gt;ip_new_thread;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 加载解析 Mach-O</span></span>
<span class="line"><span>    error = exec_activate_image(imgp);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    if (imgp-&amp;gt;ip_new_thread != NULL) {</span></span>
<span class="line"><span>        new_task = get_threadtask(imgp-&amp;gt;ip_new_thread);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (!error &amp;amp;&amp;amp; !in_vfexec) {</span></span>
<span class="line"><span>        p = proc_exec_switch_task(p, current_task(), new_task, imgp-&amp;gt;ip_new_thread);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>        should_release_proc_ref = TRUE;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    kauth_cred_unref(&amp;amp;context.vc_ucred);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    if (!error) {</span></span>
<span class="line"><span>        task_bank_init(get_threadtask(imgp-&amp;gt;ip_new_thread));</span></span>
<span class="line"><span>        proc_transend(p, 0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        thread_affinity_exec(current_thread());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 继承进程处理</span></span>
<span class="line"><span>        if (!in_vfexec) {</span></span>
<span class="line"><span>            proc_inherit_task_role(get_threadtask(imgp-&amp;gt;ip_new_thread), current_task());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 设置进程的主线程</span></span>
<span class="line"><span>        thread_t main_thread = imgp-&amp;gt;ip_new_thread;</span></span>
<span class="line"><span>        task_set_main_thread_qos(new_task, main_thread);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，由于 Mach-O 文件很大， __mac_execve 函数会先为 Mach-O 分配一大块内存 imgp，接下来会初始化 imgp 里的公共数据。内存处理完，__mac_execve 函数就会通过 fork_create_child() 函数 fork 出一个新的进程。新进程 fork 后，会通过 exec_activate_image() 函数解析加载 Mach-O 文件到内存 imgp 里。最后，使用 task_set_main_thread_qos() 函数设置新 fork 出进程的主线程。</p><p>exec_activate_image() 函数会调用不同格式对应的加载函数，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct execsw {</span></span>
<span class="line"><span>    int (*ex_imgact)(struct image_params *);</span></span>
<span class="line"><span>    const char *ex_name;</span></span>
<span class="line"><span>} execsw[] = {</span></span>
<span class="line"><span>    { exec_mach_imgact,     &amp;quot;Mach-o Binary&amp;quot; },</span></span>
<span class="line"><span>    { exec_fat_imgact,      &amp;quot;Fat Binary&amp;quot; },</span></span>
<span class="line"><span>    { exec_shell_imgact,        &amp;quot;Interpreter Script&amp;quot; },</span></span>
<span class="line"><span>    { NULL, NULL}</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，加载 Mach-O 文件的是 exec_mach_imgact() 函数。exec_mach_imgact() 会通过 load_machfile() 函数加载 Mach-O 文件，根据解析 Mach-O 后得到的 load command 信息，通过映射方式加载到内存中。还会使用 activate_exec_state() 函数处理解析加载 Mach-O 后的结构信息，设置执行 App 的入口点。</p><p>设置完入口点后会通过 load_dylinker() 函数来解析加载 dyld，然后将入口点地址改成 dyld 的入口地址。这一步完后，内核部分就完成了 Mach-O文件的加载。剩下的就是用户态层 dyld 加载 App 了。</p><p>Dyld 的入口函数是 __dyld_start，dyld 属于用户态进程，不在 XNU 里，__dyld_start 函数的实现代码在 dyld 仓库中的 <a href="https://github.com/opensource-apple/dyld/blob/master/src/dyldStartup.s" target="_blank" rel="noopener noreferrer">dyldStartup.s 文件</a>里。__dyld_start 会加载 App 相关的动态库，处理完成后会返回 App 的入口地址，然后到 App 的 main 函数。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>今天我跟你介绍了 iOS 系统的内核 XNU，以及 XNU 是如何加载 App 的。总体来说，XNU 加载就是为 Mach-O 创建一个新进程，建立虚拟内存空间，解析Mach-O文件，最后映射到内存空间。流程可以概括为：</p><li> fork 新进程； </li><li> 为 Mach-O 分配内存； </li><li> 解析 Mach-O； </li><li> 读取 Mach-O 头信息； </li><li> 遍历 load command 信息，将 Mach-O 映射到内存； </li><li> 启动 dyld。 </li><h2 id="课后作业" tabindex="-1"><a class="header-anchor" href="#课后作业"><span>课后作业</span></a></h2><p>在今天这篇文章中，我主要和你分享的是系统内核加载 App的流程，而关于用户态 dyld 加载过程没有展开说。如果你想了解 dyld 加载过程的话，可以看看 Mike Ash 的“<a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html" target="_blank" rel="noopener noreferrer">dyld: Dynamic Linking On OS X</a>”这篇文章。</p><p>相应地，今天的课后思考题，我希望你能够和我分享一下这篇文章的读后感。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p>`,59)]))}const d=n(p,[["render",l]]),m=JSON.parse('{"path":"/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%8E%9F%E7%90%86%E7%AF%87/33%20_%20iOS%20%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%20XNU%EF%BC%9AApp%20%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是戴铭。 在专栏的第2篇文章《App 启动速度怎么做优化与监控？》更新完之后，我看到很多同学对启动加载 App 的底层原理表示出了浓厚兴趣。所谓工欲善其事，必先利其器，相信有着好奇心的你，一定也会对支撑着 App 运行的操作系统有着各种各样的疑问。 我曾在专栏的第5篇文章《链接器：符号是怎么绑定到地址上的？》中，和你分享了链接器在编译时和程序启...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%8E%9F%E7%90%86%E7%AF%87/33%20_%20iOS%20%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%20XNU%EF%BC%9AApp%20%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是戴铭。 在专栏的第2篇文章《App 启动速度怎么做优化与监控？》更新完之后，我看到很多同学对启动加载 App 的底层原理表示出了浓厚兴趣。所谓工欲善其事，必先利其器，相信有着好奇心的你，一定也会对支撑着 App 运行的操作系统有着各种各样的疑问。 我曾在专栏的第5篇文章《链接器：符号是怎么绑定到地址上的？》中，和你分享了链接器在编译时和程序启..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.32,"words":3097},"filePathRelative":"posts/iOS开发高手课/原理篇/33 _ iOS 系统内核 XNU：App 如何加载？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"33 | iOS 系统内核 XNU：App 如何加载？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/3a/e7/3a98828ea4ed48df332bb26ca897e8e7.mp3\\"></audio></p>\\n<p>你好，我是戴铭。</p>\\n<p>在专栏的第2篇文章<a href=\\"https://time.geekbang.org/column/article/85331\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《App 启动速度怎么做优化与监控？》</a>更新完之后，我看到很多同学对启动加载 App 的底层原理表示出了浓厚兴趣。所谓工欲善其事，必先利其器，相信有着好奇心的你，一定也会对支撑着 App 运行的操作系统有着各种各样的疑问。</p>","autoDesc":true}');export{d as comp,m as data};
