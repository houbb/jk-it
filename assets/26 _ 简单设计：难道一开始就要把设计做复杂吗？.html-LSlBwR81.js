import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-6Bz2fGO5.js";const p={};function l(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<p><audio id="audio" title="26 | 简单设计：难道一开始就要把设计做复杂吗？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/02/52/02f230175af2d5ab78280b350e949052.mp3"></audio></p><p>你好！我是郑晔。</p><p>从专栏开始到现在，关于软件设计，我们已经聊了很多。在学习设计原则和模式这个部分时，我们看着每次的代码调整，虽然结果还不错，但不知道你脑子之中有没有闪过这样的疑问：</p><p>如果我的每段代码都这么写，会不会把设计做复杂了呢？</p><p>确实，几乎每个人在初学设计的时候，都会有用力过猛的倾向。如何把握设计的度，是每个做设计的人需要耐心锤炼的。所以，行业里有人总结了一些实践原则，给了我们一些启发性的规则，帮助我们把握设计的度。</p><p>我把这些原则放到这个部分的最后来讲，是因为它们并不是指导你具体如何编码的原则，它们更像是一种思考方法、一种行为准则。</p><p>好，我们就来看看这样的原则有哪些。</p><h2 id="kiss" tabindex="-1"><a class="header-anchor" href="#kiss"><span>KISS</span></a></h2><p>KISS原则，是“Keep it simple, stupid”的缩写，也就是保持简单、愚蠢的意思。它告诫我们，对于大多数系统而言，和变得复杂相比，<strong>保持简单能够让系统运行得更好</strong>。</p><p>很多程序员都知道这条原则，然而，很少人知道这条原则其实是出自美国海军。所以，它的适用范围远比我们以为的程序员社区要广泛得多。无论是制定一个目标，还是设计一个产品，抑或是管理一个公司，我们都可以用KISS作为一个统一的原则指导自己的工作。</p><p>这个原则看起来有点抽象，每个人对它都会有自己理解的角度，所以，每个人都会觉得它很有道理，而且，越是资深的人越会觉得它有道理。因为资深的人通常都是在自己的工作领域中，见识过因为复杂而引发的各种问题。比如说，堆了太多的功能，调整起来很费劲这样的情况。我们在专栏前面讲过的各种问题，很多时候都是由于复杂引起的。</p><p>所以，对资深的人来说，保持简单是一个再好不过的指引了。其实，每个人都可以针对自己的工作场景给出自己的阐释，比如：</p><ul><li>如果有现成的程序库，就不要自己写；</li><li>能用文本做协议就别用二进制；</li><li>方法写得越小越好；</li><li>能把一个基本的流程打通，软件就可以发布，无需那么多的功能；</li><li>……</li></ul><p>这种级别的原则听上去很有吸引力，但问题是，你并不能用它指导具体的工作。因为，怎么做叫保持简单，怎么做就叫复杂了呢？这个标准是没办法确定的。所以，有人基于自己的理解给出了一些稍微具体一点的原则。比如，在软件开发领域，你可能听说过的YAGNI和DRY原则。</p><h2 id="yagni" tabindex="-1"><a class="header-anchor" href="#yagni"><span>YAGNI</span></a></h2><p>YAGNI 是“You aren’t gonna need it”的缩写，也就是，你用不着它。这个说法来自于极限编程社区（Extreme Programming，简称 XP），我们可以把它理解成：<strong>如非必要，勿增功能</strong>。</p><p>我们在开篇词里就说过，软件设计对抗的是需求规模。一方面，我们会通过自己的努力，让软件在需求规模膨胀之后，依然能有一个平稳的发展；另一方面，我们还应该努力地控制需求的规模。</p><p>YAGNI就告诫我们，其实很多需求是不需要做的。很多产品经理以为很重要的功能实际上是没什么用的。人们常说二八原则，真正重要的功能大约只占20%，80%的功能可能大多数人都用不到。做了更多的功能，并不会得到更多的回报，但是，做了更多的功能，软件本身却会不断地膨胀，变得越发难以维护。</p><p>所以，在现实世界中，我们经常看到一些功能简单的东西不断涌现，去颠覆更复杂的东西。比如，虽然Word已经很强大了，但对于很多人而言，它还只是一个写字的工具，甚至它的重点排版功能都用得非常少。</p><p>于是，这就给了Markdown一个机会。它可以让我们专注写内容，而且简单的排版标记在日常沟通中也完全够用。至少，我已经不记得自己上一次用Word写东西是什么时候了。</p><p>我在<a href="http://https://time.geekbang.org/column/intro/100022301" target="_blank" rel="noopener noreferrer">《10x 程序员工作法》</a>里写的大部分内容，实际上就是告诉你，什么样的做法可以规避哪些的不必要功能。通过这里的介绍，我们不难发现，YAGNI是一种上游思维，就是尽可能不去做不该做的事，从源头上堵住。从某种意义上说，它比其他各种设计原则都重要。</p><h2 id="dry" tabindex="-1"><a class="header-anchor" href="#dry"><span>DRY</span></a></h2><p>DRY是“Don’t repeat yourself”的缩写，也就是，<strong>不要重复自己</strong>。这个说法源自Andy Hunt和Dave Thomas的《程序员修炼之道》（The Pragmatic Programmer）。这个原则的阐述是这样的：</p><blockquote></blockquote><p>在一个系统中，每一处知识都必须有单一、明确、权威地表述。<br> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p><p>每个人对于DRY原则的理解是千差万别的，最浅层的理解就是“不要复制粘贴代码”。不过，两个作者在二十年后的第二版特意强调，这个理解是远远不够的。<strong>DRY针对的是你对知识和意图的复制</strong>。它强调的是，在两个不同地方的两样东西表达的形式是不同的，但其要表达的内容却可能是相同的。</p><p>我从《程序员修炼之道》中借鉴了一个例子，看看我们怎么在实际的工作中运用 DRY 原则。下面是一段打印账户信息的代码，这种写法在实际的工作中也非常常见：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void printBalance(final Account account) {</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Debits: %10.2f\\n&amp;quot;, account.getDebits());</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Credits: %10.2f\\n&amp;quot;, account.getCredits());</span></span>
<span class="line"><span>  if (account.getFees() &amp;lt; 0) {</span></span>
<span class="line"><span>    System.out.printf(&amp;quot;Fees: %10.2f-\\n&amp;quot;, -account.getFees());</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    System.out.printf(&amp;quot;Fees: %10.2f\\n&amp;quot;, account.getFees());</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  System.out.printf(&amp;quot; ----\\n&amp;quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if (account.getBalance() &amp;lt; 0) {</span></span>
<span class="line"><span>    System.out.printf(&amp;quot;Balance: %10.2f-\\n&amp;quot;, -account.getBalance());</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    System.out.printf(&amp;quot;Balance: %10.2f\\n&amp;quot;, account.getBalance());</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在这段代码中，隐藏着一些重复。比如，对负数的处理显然是复制的，可以通过增加一个方法消除它：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String formatValue(final double value) {</span></span>
<span class="line"><span>  String result = String.format(&amp;quot;%10.2f&amp;quot;, Math.abs(value));</span></span>
<span class="line"><span>  if (value &amp;lt; 0) {</span></span>
<span class="line"><span>    return result + &amp;quot;-&amp;quot;;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    return result + &amp;quot; &amp;quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void printBalance(final Account account) {</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Debits: %10.2f\\n&amp;quot;, account.getDebits());</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Credits: %10.2f\\n&amp;quot;, account.getCredits());</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Fees:%s\\n&amp;quot;, formatValue(account.getFees()));</span></span>
<span class="line"><span>  System.out.printf(&amp;quot; ----\\n&amp;quot;);</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Balance:%s\\n&amp;quot;, formatValue(account.getBalance()));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有，数字字段格式也是反复出现的，不过，格式与我们抽取出来的方法是一致的，所以，可以复用一下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String formatValue(final double value) {</span></span>
<span class="line"><span>  String result = String.format(&amp;quot;%10.2f&amp;quot;, Math.abs(value));</span></span>
<span class="line"><span>  if (value &amp;lt; 0) {</span></span>
<span class="line"><span>    return result + &amp;quot;-&amp;quot;;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    return result + &amp;quot; &amp;quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void printBalance(final Account account) {</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Debits: %s\\n&amp;quot;, formatValue(account.getDebits()));</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Credits: %s\\n&amp;quot;, formatValue(account.getCredits()));</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Fees:%s\\n&amp;quot;, formatValue(account.getFees()));</span></span>
<span class="line"><span>  System.out.printf(&amp;quot; ----\\n&amp;quot;);</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;Balance:%s\\n&amp;quot;, formatValue(account.getBalance()));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再有，这里面的打印格式其实也是重复的，如果我要在标签和金额之间加一个空格，相关的代码都要改，所以，这也是一个可以消除的重复：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String formatValue(final double value) {</span></span>
<span class="line"><span>  String result = String.format(&amp;quot;%10.2f&amp;quot;, Math.abs(value));</span></span>
<span class="line"><span>  if (value &amp;lt; 0) {</span></span>
<span class="line"><span>    return result + &amp;quot;-&amp;quot;;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    return result + &amp;quot; &amp;quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void printLine(final String label, final String value) {</span></span>
<span class="line"><span>  System.out.printf(&amp;quot;%-9s%s\\n&amp;quot;, label, value);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void reportLine(final String label, final double value) {</span></span>
<span class="line"><span>  printLine(label + &amp;quot;:&amp;quot;, formatValue(value));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void printBalance(final Account account) {</span></span>
<span class="line"><span>  reportLine(&amp;quot;Debits&amp;quot;, account.getDebits());</span></span>
<span class="line"><span>  reportLine(&amp;quot;Credits&amp;quot;, account.getCredits());</span></span>
<span class="line"><span>  reportLine(&amp;quot;Fees&amp;quot;, account.getFees());</span></span>
<span class="line"><span>  System.out.printf(&amp;quot; ----\\n&amp;quot;);</span></span>
<span class="line"><span>  reportLine(&amp;quot;Balance&amp;quot;, account.getBalance());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过这样的修改，如果我们要改金额打印的格式，就去改formatValue方法；如果我们要改标签的格式，就去改reportLine方法。</p><p>可能对于有的人来说，这种调整的粒度太小了。不过，我想说的是，如果你的感觉是这样的话，证明你看问题的粒度太大了。</p><p>如果仔细品味这个修改，你就能从中感觉到它与我们之前说的分离关注点和单一职责原则有异曲同工的地方，没错，确实是这样的。在讲分离关注点和单一职责原则的时候，我强调的重点也是<strong>粒度要小</strong>。这个例子从某种程度上说，也是为它们增加了注脚。</p><p>虽然我们在这里讲的是代码，但DRY原则并不局限于写代码，比如：</p><ul><li>注释和代码之间存在重复，可以尝试把代码写得更清晰；</li><li>内部API在不同的使用者之间存在重复，可以通过中立格式进行API的定义，然后用工具生成文档、模拟 API 等等；</li><li>开发人员之间做的事情存在重复，可以建立沟通机制降低重复；</li><li>……</li></ul><p>所有这些努力都是在试图减少重复，同时也是为了减少后期维护的成本。</p><h2 id="简单设计" tabindex="-1"><a class="header-anchor" href="#简单设计"><span>简单设计</span></a></h2><p>上面说的这三个原则都是在偏思维方式的层面，而下面这个原则稍稍往实际的工作中靠了一些，它就是简单设计（Simple Design）原则。</p><p>这个原则来自极限编程社区，它的提出者是Kent Beck（这个名字在我的两个专栏中已经出现了很多次，由此可见，他对现代软件开发的影响很大）。</p><p>简单设计之所以叫简单设计，因为它只包含了4条规则：</p><ul><li>通过所有测试；</li><li>消除重复；</li><li>表达出程序员的意图；</li><li>让类和方法的数量最小化。</li></ul><p>这4条规则看起来很简单，但想做到，对于很多人来说，是一个非常大的挑战。Kent Beck是极限编程这种工作方式的创始人，所以，想满足他提出的简单设计原则，最好要做到与之配套的各种实践。</p><p>我们来逐一地看下每条规则。第1条是<strong>保证系统能够按照预期工作</strong>，其实，这一点对于大多数项目而言，已经是很高的要求了。怎么才能知道系统按照预期工作，那就需要有配套的自动化测试。大多数项目并不拥有自己的自动化测试，更何况是在开发阶段使用的单元测试，尤其是还得保证测试覆盖了大多数场景。</p><p>在XP实践中，想要拥有这种测试，最好是能够以测试驱动开发（Test Driven Development，简称 TDD）的方式工作。而你要想做好TDD，最根本的还是要懂设计，否则，你的代码就是不可测的，想给它写测试就是难上加难的事情。</p><p>后面3条规则其实说的是<strong>重构的方向</strong>，而重构也是XP的重要实践。第2条，消除重复，正如前面讲DRY原则所说的，你得能够发现重复，这需要你对分离关注点有着深刻的认识。第3条，表达出程序员的意图，我们需要编写有表达性的代码，这也需要你对“什么是有表达性的代码”有认识。我们在讲DSL曾经说过，代码要说明做什么，而不是怎么做。</p><p>第4条，让类和方法的数量最小化，则告诉我们不要过度设计，除非你已经看到这个地方必须要做一个设计，比如，留下适当的扩展点，否则，就不要做。</p><p>但是，有一点我们需要知道，能做出过度设计的前提，是已经懂得了设计的各种知识，这时才需要用简单设计的标准对自己进行约束。所以，所谓的简单设计，对大多数人而言，并不“简单”。</p><p>我们前面说了，简单设计的理念来自于极限编程社区，这是一个重要的敏捷流派。谈到敏捷，很多人以为做敏捷是不需要设计的，其实这是严重的误解。在敏捷实践的工程派，也就是XP这一派中，如果单看这些实践的步骤，你都会觉得都非常简单，无论是TDD也好，抑或是重构也罢，如果你没有对设计的理解，任何一个实践你都很难做好。</p><p>没有良好的设计，代码就没有可测试的接口，根本没有办法测试，TDD也就无从谈起。不懂设计，重构就只是简单的提取方法，改改名字，对代码的改进也是相当有限的。</p><p>简单设计，是Kent Beck这样的大师级程序员在经历了足够的积累，返璞归真之后提出的设计原则，它确实可以指导我们的日常工作，但前提是，我们需要把基础打牢。片面地追求敏捷实践，而忽视基本功，往往是舍本逐末的做法。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻"><span>总结时刻</span></a></h2><p>今天，我给你讲了一些启发性的编程原则，这些设计原则更像是一种思考方式，让我们在软件设计上有更高的追求：</p><ul><li>KISS原则，Keep it simple, stupid，我们要让系统保持简单；</li><li>YAGNI原则，You aren’t gonna need it，不要做不该做的需求；</li><li>DRY原则，Don’t repeat yourself，不要重复自己，消除各种重复。</li></ul><p>我们还讲了一个可以指导我们实际工作的简单设计原则，它有4条规则：</p><ul><li>通过所有测试；</li><li>消除重复；</li><li>表达出程序员的意图；</li><li>让类和方法的数量最小化。</li></ul><p>软件设计相关的基础内容，到这里，我已经全部给你讲了一遍。然而，你可能会有疑问，有了这些东西之后，我该如何用呢？从下一讲开始，我们来聊聊，如果有机会从头开始的话，该如何设计一个软件。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>简单地做设计</strong>。</p><img src="https://static001.geekbang.org/resource/image/c4/f9/c455311f514e9d66f830597ba7a5c2f9.jpg" alt=""><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>最后，我想请你分享一下，你还知道哪些让你受益匪浅的设计原则，欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>`,65)]))}const o=s(p,[["render",l]]),u=JSON.parse('{"path":"/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%BE%8E/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%BD%AF%E4%BB%B6%E2%80%94%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%A8%A1%E5%BC%8F/26%20_%20%E7%AE%80%E5%8D%95%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%9A%BE%E9%81%93%E4%B8%80%E5%BC%80%E5%A7%8B%E5%B0%B1%E8%A6%81%E6%8A%8A%E8%AE%BE%E8%AE%A1%E5%81%9A%E5%A4%8D%E6%9D%82%E5%90%97%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好！我是郑晔。 从专栏开始到现在，关于软件设计，我们已经聊了很多。在学习设计原则和模式这个部分时，我们看着每次的代码调整，虽然结果还不错，但不知道你脑子之中有没有闪过这样的疑问： 如果我的每段代码都这么写，会不会把设计做复杂了呢？ 确实，几乎每个人在初学设计的时候，都会有用力过猛的倾向。如何把握设计的度，是每个做设计的人需要耐心锤炼的。所以，行业里有...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%BE%8E/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%BD%AF%E4%BB%B6%E2%80%94%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%A8%A1%E5%BC%8F/26%20_%20%E7%AE%80%E5%8D%95%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%9A%BE%E9%81%93%E4%B8%80%E5%BC%80%E5%A7%8B%E5%B0%B1%E8%A6%81%E6%8A%8A%E8%AE%BE%E8%AE%A1%E5%81%9A%E5%A4%8D%E6%9D%82%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好！我是郑晔。 从专栏开始到现在，关于软件设计，我们已经聊了很多。在学习设计原则和模式这个部分时，我们看着每次的代码调整，虽然结果还不错，但不知道你脑子之中有没有闪过这样的疑问： 如果我的每段代码都这么写，会不会把设计做复杂了呢？ 确实，几乎每个人在初学设计的时候，都会有用力过猛的倾向。如何把握设计的度，是每个做设计的人需要耐心锤炼的。所以，行业里有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":12.41,"words":3722},"filePathRelative":"posts/软件设计之美/设计一个软件—设计原则与模式/26 _ 简单设计：难道一开始就要把设计做复杂吗？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"26 | 简单设计：难道一开始就要把设计做复杂吗？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/02/52/02f230175af2d5ab78280b350e949052.mp3\\"></audio></p>\\n<p>你好！我是郑晔。</p>\\n<p>从专栏开始到现在，关于软件设计，我们已经聊了很多。在学习设计原则和模式这个部分时，我们看着每次的代码调整，虽然结果还不错，但不知道你脑子之中有没有闪过这样的疑问：</p>","autoDesc":true}');export{o as comp,u as data};
