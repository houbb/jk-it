import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,o as a}from"./app-6Bz2fGO5.js";const o={};function i(c,e){return a(),n("div",null,e[0]||(e[0]=[r(`<p><audio id="audio" title="19 | 错误处理（上）" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/87/ef/8721ac7cd9292553db302c15cb996bef.mp3"></audio></p><p>提到Go语言中的错误处理，我们其实已经在前面接触过几次了。</p><p>比如，我们声明过<code>error</code>类型的变量<code>err</code>，也调用过<code>errors</code>包中的<code>New</code>函数。今天，我会用这篇文章为你梳理Go语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。</p><p>我们说过<code>error</code>类型其实是一个接口类型，也是一个Go语言的内建类型。在这个接口类型的声明中只包含了一个方法<code>Error</code>。<code>Error</code>方法不接受任何参数，但是会返回一个<code>string</code>类型的结果。它的作用是返回错误信息的字符串表示形式。</p><p>我们使用<code>error</code>类型的方式通常是，在函数声明的结果列表的最后，声明一个该类型的结果，同时在调用这个函数之后，先判断它返回的最后一个结果值是否“不为<code>nil</code>”。</p><p>如果这个值“不为<code>nil</code>”，那么就进入错误处理流程，否则就继续进行正常的流程。下面是一个例子，代码在demo44.go文件中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import (</span></span>
<span class="line"><span>	&amp;quot;errors&amp;quot;</span></span>
<span class="line"><span>	&amp;quot;fmt&amp;quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func echo(request string) (response string, err error) {</span></span>
<span class="line"><span>	if request == &amp;quot;&amp;quot; {</span></span>
<span class="line"><span>		err = errors.New(&amp;quot;empty request&amp;quot;)</span></span>
<span class="line"><span>		return</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	response = fmt.Sprintf(&amp;quot;echo: %s&amp;quot;, request)</span></span>
<span class="line"><span>	return</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func main() {</span></span>
<span class="line"><span>	for _, req := range []string{&amp;quot;&amp;quot;, &amp;quot;hello!&amp;quot;} {</span></span>
<span class="line"><span>		fmt.Printf(&amp;quot;request: %s\\n&amp;quot;, req)</span></span>
<span class="line"><span>		resp, err := echo(req)</span></span>
<span class="line"><span>		if err != nil {</span></span>
<span class="line"><span>			fmt.Printf(&amp;quot;error: %s\\n&amp;quot;, err)</span></span>
<span class="line"><span>			continue</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		fmt.Printf(&amp;quot;response: %s\\n&amp;quot;, resp)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先看<code>echo</code>函数的声明。<code>echo</code>函数接受一个<code>string</code>类型的参数<code>request</code>，并会返回两个结果。</p><p>这两个结果都是有名称的，第一个结果<code>response</code>也是<code>string</code>类型的，它代表了这个函数正常执行后的结果值。</p><p>第二个结果<code>err</code>就是<code>error</code>类型的，它代表了函数执行出错时的结果值，同时也包含了具体的错误信息。</p><p>当<code>echo</code>函数被调用时，它会先检查参数<code>request</code>的值。如果该值为空字符串，那么它就会通过调用<code>errors.New</code>函数，为结果<code>err</code>赋值，然后忽略掉后边的操作并直接返回。</p><p>此时，结果<code>response</code>的值也会是一个空字符串。如果<code>request</code>的值并不是空字符串，那么它就为结果<code>response</code>赋一个适当的值，然后返回，此时结果<code>err</code>的值会是<code>nil</code>。</p><p>再来看<code>main</code>函数中的代码。我在每次调用<code>echo</code>函数之后，都会把它返回的结果值赋给变量<code>resp</code>和<code>err</code>，并且总是先检查<code>err</code>的值是否“不为<code>nil</code>”，如果是，就打印错误信息，否则就打印常规的响应信息。</p><p>这里值得注意的地方有两个。第一，在<code>echo</code>函数和<code>main</code>函数中，我都使用到了卫述语句。我在前面讲函数用法的时候也提到过卫述语句。简单地讲，它就是被用来检查后续操作的前置条件并进行相应处理的语句。</p><p>对于<code>echo</code>函数来说，它进行常规操作的前提是：传入的参数值一定要符合要求。而对于调用<code>echo</code>函数的程序来说，进行后续操作的前提就是<code>echo</code>函数的执行不能出错。</p><blockquote></blockquote><p>我们在进行错误处理的时候经常会用到卫述语句，以至于有些人会吐槽说：“我的程序满屏都是卫述语句，简直是太难看了！”<br> 不过，我倒认为这有可能是程序设计上的问题。每个编程语言的理念和风格几乎都会有明显的不同，我们常常需要顺应它们的纹理去做设计，而不是用其他语言的编程思想来编写当下语言的程序。</p><p>再来说第二个值得注意的地方。我在生成<code>error</code>类型值的时候，用到了<code>errors.New</code>函数。</p><p>这是一种最基本的生成错误值的方式。我们调用它的时候传入一个由字符串代表的错误信息，它会给返回给我们一个包含了这个错误信息的<code>error</code>类型值。该值的静态类型当然是<code>error</code>，而动态类型则是一个在<code>errors</code>包中的，包级私有的类型<code>*errorString</code>。</p><p>显然，<code>errorString</code>类型拥有的一个指针方法实现了<code>error</code>接口中的<code>Error</code>方法。这个方法在被调用后，会原封不动地返回我们之前传入的错误信息。实际上，<code>error</code>类型值的<code>Error</code>方法就相当于其他类型值的<code>String</code>方法。</p><p>我们已经知道，通过调用<code>fmt.Printf</code>函数，并给定占位符<code>%s</code>就可以打印出某个值的字符串表示形式。</p><p>对于其他类型的值来说，只要我们能为这个类型编写一个<code>String</code>方法，就可以自定义它的字符串表示形式。而对于<code>error</code>类型值，它的字符串表示形式则取决于它的<code>Error</code>方法。</p><p>在上述情况下，<code>fmt.Printf</code>函数如果发现被打印的值是一个<code>error</code>类型的值，那么就会去调用它的<code>Error</code>方法。<code>fmt</code>包中的这类打印函数其实都是这么做的。</p><p>顺便提一句，当我们想通过模板化的方式生成错误信息，并得到错误值时，可以使用<code>fmt.Errorf</code>函数。该函数所做的其实就是先调用<code>fmt.Sprintf</code>函数，得到确切的错误信息；再调用<code>errors.New</code>函数，得到包含该错误信息的<code>error</code>类型值，最后返回该值。</p><p>好了，我现在问一个关于对错误值做判断的问题。我们今天的<strong>问题是：对于具体错误的判断，Go语言中都有哪些惯用法？</strong></p><p>由于<code>error</code>是一个接口类型，所以即使同为<code>error</code>类型的错误值，它们的实际类型也可能不同。这个问题还可以换一种问法，即：怎样判断一个错误值具体代表的是哪一类错误？</p><p>这道题的<strong>典型回答</strong>是这样的：</p><ol><li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型<code>switch</code>语句来判断；</li><li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；</li><li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。</li></ol><h2 id="问题解析" tabindex="-1"><a class="header-anchor" href="#问题解析"><span>问题解析</span></a></h2><p>如果你看过一些Go语言标准库的源代码，那么对这几种情况应该都不陌生。我下面分别对它们做个说明。</p><p>类型在已知范围内的错误值其实是最容易分辨的。就拿<code>os</code>包中的几个代表错误的类型<code>os.PathError</code>、<code>os.LinkError</code>、<code>os.SyscallError</code>和<code>os/exec.Error</code>来说，它们的指针类型都是<code>error</code>接口的实现类型，同时它们也都包含了一个名叫<code>Err</code>，类型为<code>error</code>接口类型的代表潜在错误的字段。</p><p>如果我们得到一个<code>error</code>类型值，并且知道该值的实际类型肯定是它们中的某一个，那么就可以用类型<code>switch</code>语句去做判断。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func underlyingError(err error) error {</span></span>
<span class="line"><span>	switch err := err.(type) {</span></span>
<span class="line"><span>	case *os.PathError:</span></span>
<span class="line"><span>		return err.Err</span></span>
<span class="line"><span>	case *os.LinkError:</span></span>
<span class="line"><span>		return err.Err</span></span>
<span class="line"><span>	case *os.SyscallError:</span></span>
<span class="line"><span>		return err.Err</span></span>
<span class="line"><span>	case *exec.Error:</span></span>
<span class="line"><span>		return err.Err</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	return err</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>underlyingError</code>的作用是：获取和返回已知的操作系统相关错误的潜在错误值。其中的类型<code>switch</code>语句中有若干个<code>case</code>子句，分别对应了上述几个错误类型。当它们被选中时，都会把函数参数<code>err</code>的<code>Err</code>字段作为结果值返回。如果它们都未被选中，那么该函数就会直接把参数值作为结果返回，即放弃获取潜在错误值。</p><p>只要类型不同，我们就可以如此分辨。但是在错误值类型相同的情况下，这些手段就无能为力了。在Go语言的标准库中也有不少以相同方式创建的同类型的错误值。</p><p>我们还拿<code>os</code>包来说，其中不少的错误值都是通过调用<code>errors.New</code>函数来初始化的，比如：<code>os.ErrClosed</code>、<code>os.ErrInvalid</code>以及<code>os.ErrPermission</code>，等等。</p><p>注意，与前面讲到的那些错误类型不同，这几个都是已经定义好的、确切的错误值。<code>os</code>包中的代码有时候会把它们当做潜在错误值，封装进前面那些错误类型的值中。</p><p>如果我们在操作文件系统的时候得到了一个错误值，并且知道该值的潜在错误值肯定是上述值中的某一个，那么就可以用普通的<code>switch</code>语句去做判断，当然了，用<code>if</code>语句和判等操作符也是可以的。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>printError := func(i int, err error) {</span></span>
<span class="line"><span>	if err == nil {</span></span>
<span class="line"><span>		fmt.Println(&amp;quot;nil error&amp;quot;)</span></span>
<span class="line"><span>		return</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	err = underlyingError(err)</span></span>
<span class="line"><span>	switch err {</span></span>
<span class="line"><span>	case os.ErrClosed:</span></span>
<span class="line"><span>		fmt.Printf(&amp;quot;error(closed)[%d]: %s\\n&amp;quot;, i, err)</span></span>
<span class="line"><span>	case os.ErrInvalid:</span></span>
<span class="line"><span>		fmt.Printf(&amp;quot;error(invalid)[%d]: %s\\n&amp;quot;, i, err)</span></span>
<span class="line"><span>	case os.ErrPermission:</span></span>
<span class="line"><span>		fmt.Printf(&amp;quot;error(permission)[%d]: %s\\n&amp;quot;, i, err)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个由<code>printError</code>变量代表的函数会接受一个<code>error</code>类型的参数值。该值总会代表某个文件操作相关的错误，这是我故意地以不正确的方式操作文件后得到的。</p><p>虽然我不知道这些错误值的类型的范围，但却知道它们或它们的潜在错误值一定是某个已经在<code>os</code>包中定义的值。</p><p>所以，我先用<code>underlyingError</code>函数得到它们的潜在错误值，当然也可能只得到原错误值而已。然后，我用<code>switch</code>语句对错误值进行判等操作，三个<code>case</code>子句分别对应我刚刚提到的那三个已存在于<code>os</code>包中的错误值。如此一来，我就能分辨出具体错误了。</p><p>对于上面这两种情况，我们都有明确的方式去解决。但是，如果我们对一个错误值可能代表的含义知之甚少，那么就只能通过它拥有的错误信息去做判断了。</p><p>好在我们总是能通过错误值的<code>Error</code>方法，拿到它的错误信息。其实<code>os</code>包中就有做这种判断的函数，比如：<code>os.IsExist</code>、<code>os.IsNotExist</code>和<code>os.IsPermission</code>。命令源码文件demo45.go中包含了对它们的应用，这大致跟前面展示的代码差不太多，我就不在这里赘述了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天我们一起初步学习了错误处理的内容。我们总结了错误类型、错误值的处理技巧和设计方式，并一起分享了Go语言中处理错误的最基本方式。由于错误处理的内容分为上下两篇，在下一次的文章中，我们会站在建造者的角度，一起来探索一下：怎样根据实际情况给予恰当的错误值。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>请列举出你经常用到或者看到的3个错误类型，它们所在的错误类型体系都是怎样的？你能画出一棵树来描述它们吗？</p><p>感谢你的收听，我们下期再见。</p><p><a href="https://github.com/hyper0x/Golang_Puzzlers" target="_blank" rel="noopener noreferrer">戳此查看Go语言专栏文章配套详细代码。</a></p>`,50)]))}const l=s(o,[["render",i]]),t=JSON.parse('{"path":"/posts/Go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E6%A8%A1%E5%9D%97%E4%BA%8C%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/19%20_%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"提到Go语言中的错误处理，我们其实已经在前面接触过几次了。 比如，我们声明过error类型的变量err，也调用过errors包中的New函数。今天，我会用这篇文章为你梳理Go语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。 我们说过error类型其实是一个接口类型，也是一个Go语言的内建类型。在这个接口类型的声明中只包含了一个方法Error...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E6%A8%A1%E5%9D%97%E4%BA%8C%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6%E6%8A%80%E6%9C%AF/19%20_%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"提到Go语言中的错误处理，我们其实已经在前面接触过几次了。 比如，我们声明过error类型的变量err，也调用过errors包中的New函数。今天，我会用这篇文章为你梳理Go语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。 我们说过error类型其实是一个接口类型，也是一个Go语言的内建类型。在这个接口类型的声明中只包含了一个方法Error..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":9.56,"words":2869},"filePathRelative":"posts/Go语言核心36讲/模块二：Go语言进阶技术/19 _ 错误处理（上）.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"19 | 错误处理（上）\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/87/ef/8721ac7cd9292553db302c15cb996bef.mp3\\"></audio></p>\\n<p>提到Go语言中的错误处理，我们其实已经在前面接触过几次了。</p>\\n<p>比如，我们声明过<code>error</code>类型的变量<code>err</code>，也调用过<code>errors</code>包中的<code>New</code>函数。今天，我会用这篇文章为你梳理Go语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。</p>","autoDesc":true}');export{l as comp,t as data};
