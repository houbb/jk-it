import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-CrA-f6So.js";const p={};function l(t,a){return i(),e("div",null,a[0]||(a[0]=[n(`<h1 id="css渲染-css是如何绘制颜色的" tabindex="-1"><a class="header-anchor" href="#css渲染-css是如何绘制颜色的"><span>CSS渲染：CSS是如何绘制颜色的？</span></a></h1><p><audio id="audio" title="CSS渲染：CSS是如何绘制颜色的？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/71/fe/711438b80226d3d7f57ed180285fa1fe.mp3"></audio></p><p>你好，我是winter，今天我们来学习一下CSS的渲染相关的属性。</p><p>我们在布局篇讲到，CSS的一些属性决定了盒的位置，那么今天我讲到的属性就决定了盒如何被渲染。</p><p>按照惯例，还是先从简单得讲起，首先我们来讲讲颜色。</p><h2 id="颜色的原理" tabindex="-1"><a class="header-anchor" href="#颜色的原理"><span>颜色的原理</span></a></h2><p>首先我们来讲讲颜色，最常见的颜色相关的属性就是 <code>color</code> 和 <code>background-color</code>。</p><p>这两个属性没什么好讲的，它们分别表示文字颜色和背景颜色，我们这里重点讲讲颜色值。</p><h3 id="rgb颜色" tabindex="-1"><a class="header-anchor" href="#rgb颜色"><span>RGB颜色</span></a></h3><p>我们在计算机中，最常见的颜色表示法是RGB颜色，<strong>它符合光谱三原色理论：红、绿、蓝三种颜色的光可以构成所有的颜色。</strong></p><img src="https://static001.geekbang.org/resource/image/7f/a1/7f5bf39cbe44e36758683a674f9fcfa1.png" alt=""><p>为什么是这三种颜色呢？这跟人类的视神经系统相关，人类的视觉神经分别有对红、绿、蓝三种颜色敏感的类型。</p><p>顺便提一下，人类对红色的感觉最为敏感，所以危险信号提示一般会选择红色；而红绿色盲的人，就是红和绿两种神经缺失一种。其它的动物视觉跟人可能不太一样，比如皮皮虾拥有16种视锥细胞，所以我猜它们看到的世界一定特别精彩。</p><p>现代计算机中多用 0 - 255 的数字表示每一种颜色，这正好占据了一个字节，每一个颜色就占据三个字节。</p><p>这个数字远远超过了人体的分辨能力，因此，上世纪90年代刚推出这样的颜色系统的时候，它被称作真彩色。早年间还有更节约空间，但是精度更低的16色、256色、8位色和16位色表示法。</p><p>红绿蓝三种颜色的光混合起来就是白光，没有光就是黑暗，所以在RGB表示法中，三色数值最大表示白色，三色数值为0表示黑色。</p><h3 id="cmyk颜色" tabindex="-1"><a class="header-anchor" href="#cmyk颜色"><span>CMYK颜色</span></a></h3><p>如果你上过小学美术课，应该听过“红黄蓝”三原色的说法，这好像跟我们说的不太一样。实际上是这样的，颜料显示颜色的原理是它吸收了所有别的颜色的光，只反射一种颜色，所以颜料三原色其实是红、绿、蓝的补色，也就是：品红、黄、青。因为它们跟红、黄、蓝相近，所以有了这样的说法。</p><img src="https://static001.geekbang.org/resource/image/15/1b/15fefe9f80ec8e1f7bd9ecd223feb61b.png" alt=""><p>在印刷行业，使用的就是这样的三原色（品红、黄、青）来调配油墨，这种颜色的表示法叫做CMYK，它用一个四元组来表示颜色。</p><p>你一定会好奇，为什么它比三原色多了一种，其实答案并不复杂，在印刷行业中，黑色颜料价格最低，而品红、黄、青颜料价格较贵，如果要用三原色调配黑色，经济上是不划算的，所以印刷时会单独指定黑色。</p><p>对CMYK颜色表示法来说，同一种颜色会有多种表示方案，但是我们参考印刷行业的习惯，会尽量优先使用黑色。</p><h3 id="hsl颜色" tabindex="-1"><a class="header-anchor" href="#hsl颜色"><span>HSL颜色</span></a></h3><p>好了，讲了这么多，其实还没有涉及今天的主角：HSL颜色。接下来我们就讲一讲。</p><p>我们刚才讲的颜色是从人类的视觉原理建模，应该说是十分科学了。但是，人类对颜色的认识却并非来自自己的神经系统，当我们把阳光散射，可以得到七色光：红橙黄绿蓝靛紫，实际上，阳光接近白光，它包含了各种颜色的光，它散射之后，应该是个基本连续的。这说明对人的感知来说，颜色远远大于红、绿、蓝。</p><p>因此，HSL这样的颜色模型被设计出来了，它用一个值来表示人类认知中的颜色，我们用专业的术语叫做色相（H）。加上颜色的纯度（S）和明度（L），就构成了一种颜色的表示。</p><img src="https://static001.geekbang.org/resource/image/a3/ce/a3016a6ff178870d6dba23f807b0dfce.png" alt=""><p>在这里，我需要特别推荐HSL颜色，因为它是一种语义化的颜色。当我们对一张图片改变色相时，人们感知到的是“图片的颜色变了”。这里先容我卖个关子，具体的例子待我们讲完了渐变再看。</p><h3 id="其它颜色" tabindex="-1"><a class="header-anchor" href="#其它颜色"><span>其它颜色</span></a></h3><p>接下来我们讲一讲RGBA，RGBA是代表Red（红色）、Green（绿色）、Blue（蓝色）和Alpha的色彩空间。RGBA颜色被用来表示带透明度的颜色，实际上，Alpha通道类似一种颜色值的保留字。在CSS中，Alpha通道被用于透明度，所以我们的颜色表示被称作 RGBA，而不是RGBO（Opacity）。</p><p>为了方便使用，CSS还规定了名称型的颜色，它内置了大量（140种）的颜色名称。不过这里我要挑出两个颜色来讲一讲：金（gold）和银（silver）。</p><p>如果你使用过这两个颜色，你会发现，金（gold）和银（silver）的视觉表现跟我们想象中的金色和银色相差甚远。与其被叫做金色和银色，它们看起来更像是难看的暗黄色和浅灰色。</p><p>为什么会这样呢？在人类天然的色彩认知中，实际上混杂了很多其它因素，金色和银色不仅仅是一种颜色，它还意味着一定的镜面反光程度，在同样的光照条件下，金属会呈现出更亮的色彩，这并非是用一个色值可以描述的，这就引出了我们接下来要讲的渐变。</p><h2 id="渐变" tabindex="-1"><a class="header-anchor" href="#渐变"><span>渐变</span></a></h2><p>在CSS中，<code>background-image</code>这样的属性，可以设为渐变。CSS中支持两种渐变，一种是线性渐变，一种是放射性渐变，我们先了解一下它们的基本用法：</p><p>线性渐变的写法是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>linear-gradient(direction, color-stop1, color-stop2, ...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里的direction可以是方向，也可以是具体的角度。例如：</p><ul><li>to bottom</li><li>to top</li><li>to left</li><li>to right</li><li>to bottom left</li><li>to bottom right</li><li>to top left</li><li>to top right</li><li>120deg</li><li>3.14rad</li></ul><p>以上这些都是合理的方向取值。</p><p>color-stop是一个颜色和一个区段，例如：</p><ul><li>rgba(255,0,0,0)</li><li>orange</li><li>yellow 10%</li><li>green 20%</li><li>lime 28px</li></ul><p>我们组合一下，产生一个“真正的金色”的背景：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;style&amp;gt;</span></span>
<span class="line"><span>#grad1 {</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background: linear-gradient(45deg, gold 10%, yellow 50%, gold 90%); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&amp;lt;/style&amp;gt;</span></span>
<span class="line"><span>&amp;lt;div id=&quot;grad1&quot;&amp;gt;&amp;lt;/div&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>放射性渐变需要一个中心点和若干个颜色：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>radial-gradient(shape size at position, start-color, ..., last-color);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当我们应用的每一种颜色都是HSL颜色时，就产生了一些非常有趣的效果，比如，我们可以通过变量来调整一个按钮的风格：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;style&amp;gt;</span></span>
<span class="line"><span>.button {</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>    outline: none;</span></span>
<span class="line"><span>    cursor: pointer;</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>    text-decoration: none;</span></span>
<span class="line"><span>    font: 14px/100% Arial, Helvetica, sans-serif;</span></span>
<span class="line"><span>    padding: .5em 2em .55em;</span></span>
<span class="line"><span>    text-shadow: 0 1px 1px rgba(0,0,0,.3);</span></span>
<span class="line"><span>    border-radius: .5em;</span></span>
<span class="line"><span>    box-shadow: 0 1px 2px rgba(0,0,0,.2);</span></span>
<span class="line"><span>    color: white;</span></span>
<span class="line"><span>    border: solid 1px ;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&amp;lt;/style&amp;gt;</span></span>
<span class="line"><span>&amp;lt;div class=&quot;button orange&quot;&amp;gt;123&amp;lt;/div&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var btn = document.querySelector(&quot;.button&quot;);</span></span>
<span class="line"><span>var h = 25;</span></span>
<span class="line"><span>setInterval(function(){</span></span>
<span class="line"><span>  h ++;</span></span>
<span class="line"><span>  h = h % 360;</span></span>
<span class="line"><span>  btn.style.borderColor=\`hsl(\${h}, 95%, 45%)\`</span></span>
<span class="line"><span>  btn.style.background=\`linear-gradient(to bottom,  hsl(\${h},95%,54.1%),  hsl(\${h},95%,84.1%))\`</span></span>
<span class="line"><span>},100);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="形状" tabindex="-1"><a class="header-anchor" href="#形状"><span>形状</span></a></h2><p>CSS中的很多属性还会产生形状，比如我们常见的属性：</p><ul><li>border</li><li>box-shadow</li><li>border-radius</li></ul><p>这些产生形状的属性非常有趣，我们也能看到很多利用它们来产生的CSS黑魔法。然而，这里我有一个相反的建议，我们仅仅把它们用于基本的用途，把border用于边框、把阴影用于阴影，把圆角用于圆角，所有其它的场景，都有一个更好的替代品：datauri+svg。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天我们介绍了CSS中渲染相关的属性：颜色和形状。</p><p>我们重点介绍了CSS的颜色系统，从颜色基本原理讲解了RGB颜色、CMYK颜色和HSV颜色，我们还讲解了Alpha通道。</p><p>接下来我们又讲了颜色的一个重要应用：渐变，我们可以把渐变看作是一个更复杂的颜色，它非常实用，能够用渐变绘制很多的图像。</p><p>最后我们讲解了形状相关的属性，以及SVG应用的一个小技巧。</p><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h3><img src="https://static001.geekbang.org/resource/image/0f/ac/0f6f4cc6d564df9986e0108cb8a427ac.jpg" alt=""><p>折衷鹦鹉是一种可爱的鸟类，但是雄性折衷鹦鹉居然是跟雌性颜色不一样！你能用JavaScript和canvas，把这只雄性折衷鹦鹉变成跟雌性一样可爱的红色吗？</p>`,61)]))}const o=s(p,[["render",l]]),c=JSON.parse('{"path":"/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%BA%8C%EF%BC%9AHTML%E5%92%8CCSS/CSS%E6%B8%B2%E6%9F%93%EF%BC%9ACSS%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E9%A2%9C%E8%89%B2%E7%9A%84%EF%BC%9F.html","title":"CSS渲染：CSS是如何绘制颜色的？","lang":"zh-CN","frontmatter":{"description":"CSS渲染：CSS是如何绘制颜色的？ 你好，我是winter，今天我们来学习一下CSS的渲染相关的属性。 我们在布局篇讲到，CSS的一些属性决定了盒的位置，那么今天我讲到的属性就决定了盒如何被渲染。 按照惯例，还是先从简单得讲起，首先我们来讲讲颜色。 颜色的原理 首先我们来讲讲颜色，最常见的颜色相关的属性就是 color 和 background-co...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%BA%8C%EF%BC%9AHTML%E5%92%8CCSS/CSS%E6%B8%B2%E6%9F%93%EF%BC%9ACSS%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E9%A2%9C%E8%89%B2%E7%9A%84%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"CSS渲染：CSS是如何绘制颜色的？"}],["meta",{"property":"og:description","content":"CSS渲染：CSS是如何绘制颜色的？ 你好，我是winter，今天我们来学习一下CSS的渲染相关的属性。 我们在布局篇讲到，CSS的一些属性决定了盒的位置，那么今天我讲到的属性就决定了盒如何被渲染。 按照惯例，还是先从简单得讲起，首先我们来讲讲颜色。 颜色的原理 首先我们来讲讲颜色，最常见的颜色相关的属性就是 color 和 background-co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS渲染：CSS是如何绘制颜色的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":7.32,"words":2197},"filePathRelative":"posts/重学前端/模块二：HTML和CSS/CSS渲染：CSS是如何绘制颜色的？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"CSS渲染：CSS是如何绘制颜色的？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/71/fe/711438b80226d3d7f57ed180285fa1fe.mp3\\"></audio></p>\\n<p>你好，我是winter，今天我们来学习一下CSS的渲染相关的属性。</p>\\n<p>我们在布局篇讲到，CSS的一些属性决定了盒的位置，那么今天我讲到的属性就决定了盒如何被渲染。</p>\\n<p>按照惯例，还是先从简单得讲起，首先我们来讲讲颜色。</p>","autoDesc":true}');export{o as comp,c as data};
