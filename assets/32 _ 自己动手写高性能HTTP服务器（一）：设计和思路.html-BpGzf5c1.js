import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as i}from"./app-6Bz2fGO5.js";const l={};function p(t,n){return i(),s("div",null,n[0]||(n[0]=[e(`<p><audio id="audio" title="32 | 自己动手写高性能HTTP服务器（一）：设计和思路" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/fe/f1/fe2a0af5589cbe6648d8dcd62c55a6f1.mp3"></audio></p><p>\b你好，我是盛延敏，这里是网络编程实战第32讲，欢迎回来。</p><p>从这一讲开始，我们进入实战篇，开启一个高性能HTTP服务器的编写之旅。</p><p>在开始编写高性能HTTP服务器之前，我们先要构建一个支持TCP的高性能网络编程框架，完成这个TCP高性能网络框架之后，再增加HTTP特性的支持就比较容易了，这样就可以很快开发出一个高性能的HTTP服务器程序。</p><h2 id="设计需求" tabindex="-1"><a class="header-anchor" href="#设计需求"><span>设计需求</span></a></h2><p>在第三个模块性能篇中，我们已经使用这个网络编程框架完成了多个应用程序的开发，这也等于对网络编程框架提出了编程接口方面的需求。综合之前的使用经验，TCP高性能网络框架需要满足的需求有以下三点。</p><p>第一，采用reactor模型，可以灵活使用poll/epoll作为事件分发实现。</p><p>第二，必须支持多线程，从而可以支持单线程单reactor模式，也可以支持多线程主-从reactor模式。可以将套接字上的I/O事件分离到多个线程上。</p><p>第三，封装读写操作到Buffer对象中。</p><p>按照这三个需求，正好可以把整体设计思路分成三块来讲解，分别包括反应堆模式设计、I/O模型和多线程模型设计、数据读写封装和buffer。今天我们主要讲一下主要的设计思路和数据结构，以及反应堆模式设计。</p><h2 id="主要设计思路" tabindex="-1"><a class="header-anchor" href="#主要设计思路"><span>主要设计思路</span></a></h2><h3 id="反应堆模式设计" tabindex="-1"><a class="header-anchor" href="#反应堆模式设计"><span>反应堆模式设计</span></a></h3><p>反应堆模式，按照性能篇的讲解，主要是设计一个基于事件分发和回调的反应堆框架。这个框架里面的主要对象包括：</p><li><h3>event_loop</h3></li><p>你可以把event_loop这个对象理解成和一个线程绑定的无限事件循环，你会在各种语言里看到event_loop这个抽象。这是什么意思呢？简单来说，它就是一个无限循环着的事件分发器，一旦有事件发生，它就会回调预先定义好的回调函数，完成事件的处理。</p><p>具体来说，event_loop使用poll或者epoll方法将一个线程阻塞，等待各种I/O事件的发生。</p><li><h3>channel</h3></li><p>对各种注册到event_loop上的对象，我们抽象成channel来表示，例如注册到event_loop上的监听事件，注册到event_loop上的套接字读写事件等。在各种语言的API里，你都会看到channel这个对象，大体上它们表达的意思跟我们这里的设计思路是比较一致的。</p><li><h3>acceptor</h3></li><p>acceptor对象表示的是服务器端监听器，acceptor对象最终会作为一个channel对象，注册到event_loop上，以便进行连接完成的事件分发和检测。</p><li><h3>event_dispatcher</h3></li><p>event_dispatcher是对事件分发机制的一种抽象，也就是说，可以实现一个基于poll的poll_dispatcher，也可以实现一个基于epoll的epoll_dispatcher。在这里，我们统一设计一个event_dispatcher结构体，来抽象这些行为。</p><li><h3>channel_map</h3></li><p>channel_map保存了描述字到channel的映射，这样就可以在事件发生时，根据事件类型对应的套接字快速找到channel对象里的事件处理函数。</p><h3 id="i-o模型和多线程模型设计" tabindex="-1"><a class="header-anchor" href="#i-o模型和多线程模型设计"><span>I/O模型和多线程模型设计</span></a></h3><p>I/O线程和多线程模型，主要解决event_loop的线程运行问题，以及事件分发和回调的线程执行问题。</p><li><h3>thread_pool</h3></li><p>thread_pool维护了一个sub-reactor的线程列表，它可以提供给主reactor线程使用，每次当有新的连接建立时，可以从thread_pool里获取一个线程，以便用它来完成对新连接套接字的read/write事件注册，将I/O线程和主reactor线程分离。</p><li><h3>event_loop_thread</h3></li><p>event_loop_thread是reactor的线程实现，连接套接字的read/write事件检测都是在这个线程里完成的。</p><h3 id="buffer和数据读写" tabindex="-1"><a class="header-anchor" href="#buffer和数据读写"><span>Buffer和数据读写</span></a></h3><li><h3>buffer</h3></li><p>buffer对象屏蔽了对套接字进行的写和读的操作，如果没有buffer对象，连接套接字的read/write事件都需要和字节流直接打交道，这显然是不友好的。所以，我们也提供了一个基本的buffer对象，用来表示从连接套接字收取的数据，以及应用程序即将需要发送出去的数据。</p><li><h3>tcp_connection</h3></li><p>tcp_connection这个对象描述的是已建立的TCP连接。它的属性包括接收缓冲区、发送缓冲区、channel对象等。这些都是一个TCP连接的天然属性。</p><p>tcp_connection是大部分应用程序和我们的高性能框架直接打交道的数据结构。我们不想把最下层的channel对象暴露给应用程序，因为抽象的channel对象不仅仅可以表示tcp_connection，前面提到的监听套接字也是一个channel对象，后面提到的唤醒socketpair也是一个 channel对象。所以，我们设计了tcp_connection这个对象，希望可以提供给用户比较清晰的编程入口。</p><h2 id="反应堆模式设计-1" tabindex="-1"><a class="header-anchor" href="#反应堆模式设计-1"><span>反应堆模式设计</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>下面，我们详细讲解一下以event_loop为核心的反应堆模式设计。这里有一张event_loop的运行详图，你可以对照这张图来理解。</p><img src="https://static001.geekbang.org/resource/image/7a/61/7ab9f89544aba2021a9d2ceb94ad9661.jpg" alt=""><p>当event_loop_run完成之后，线程进入循环，首先执行dispatch事件分发，一旦有事件发生，就会调用channel_event_activate函数，在这个函数中完成事件回调函数eventReadcallback和eventWritecallback的调用，最后再进行event_loop_handle_pending_channel，用来修改当前监听的事件列表，完成这个部分之后，又进入了事件分发循环。</p><h3 id="event-loop分析" tabindex="-1"><a class="header-anchor" href="#event-loop分析"><span>event_loop分析</span></a></h3><p>说event_loop是整个反应堆模式设计的核心，一点也不为过。先看一下event_loop的数据结构。</p><p>在这个数据结构中，最重要的莫过于event_dispatcher对象了。你可以简单地把event_dispatcher理解为poll或者epoll，它可以让我们的线程挂起，等待事件的发生。</p><p>这里有一个小技巧，就是event_dispatcher_data，它被定义为一个void *类型，可以按照我们的需求，任意放置一个我们需要的对象指针。这样，针对不同的实现，例如poll或者epoll，都可以根据需求，放置不同的数据对象。</p><p>event_loop中还保留了几个跟多线程有关的对象，如owner_thread_id是保留了每个event loop的线程ID，mutex和con是用来进行线程同步的。</p><p>socketPair是父线程用来通知子线程有新的事件需要处理。pending_head和pending_tail是保留在子线程内的需要处理的新事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct event_loop {</span></span>
<span class="line"><span>    int quit;</span></span>
<span class="line"><span>    const struct event_dispatcher *eventDispatcher;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 对应的event_dispatcher的数据. */</span></span>
<span class="line"><span>    void *event_dispatcher_data;</span></span>
<span class="line"><span>    struct channel_map *channelMap;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    int is_handle_pending;</span></span>
<span class="line"><span>    struct channel_element *pending_head;</span></span>
<span class="line"><span>    struct channel_element *pending_tail;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    pthread_t owner_thread_id;</span></span>
<span class="line"><span>    pthread_mutex_t mutex;</span></span>
<span class="line"><span>    pthread_cond_t cond;</span></span>
<span class="line"><span>    int socketPair[2];</span></span>
<span class="line"><span>    char *thread_name;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们看一下event_loop最主要的方法event_loop_run方法，前面提到过，event_loop就是一个无限while循环，不断地在分发事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * 1.参数验证</span></span>
<span class="line"><span> * 2.调用dispatcher来进行事件分发,分发完回调事件处理函数</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>int event_loop_run(struct event_loop *eventLoop) {</span></span>
<span class="line"><span>    assert(eventLoop != NULL);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    struct event_dispatcher *dispatcher = eventLoop-&amp;gt;eventDispatcher;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (eventLoop-&amp;gt;owner_thread_id != pthread_self()) {</span></span>
<span class="line"><span>        exit(1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    yolanda_msgx(&amp;quot;event loop run, %s&amp;quot;, eventLoop-&amp;gt;thread_name);</span></span>
<span class="line"><span>    struct timeval timeval;</span></span>
<span class="line"><span>    timeval.tv_sec = 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while (!eventLoop-&amp;gt;quit) {</span></span>
<span class="line"><span>        //block here to wait I/O event, and get active channels</span></span>
<span class="line"><span>        dispatcher-&amp;gt;dispatch(eventLoop, &amp;amp;timeval);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //handle the pending channel</span></span>
<span class="line"><span>        event_loop_handle_pending_channel(eventLoop);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    yolanda_msgx(&amp;quot;event loop end, %s&amp;quot;, eventLoop-&amp;gt;thread_name);</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很明显地反映了这一点，这里我们在event_loop不退出的情况下，一直在循环，循环体中调用了dispatcher对象的dispatch方法来等待事件的发生。</p><h3 id="event-dispacher分析" tabindex="-1"><a class="header-anchor" href="#event-dispacher分析"><span>event_dispacher分析</span></a></h3><p>为了实现不同的事件分发机制，这里把poll、epoll等抽象成了一个event_dispatcher结构。event_dispatcher的具体实现有poll_dispatcher和epoll_dispatcher两种，实现的方法和性能篇<a href="https://time.geekbang.org/column/article/140520" target="_blank" rel="noopener noreferrer">21</a><a href="https://time.geekbang.org/column/article/140520" target="_blank" rel="noopener noreferrer">讲</a>和<a href="https://time.geekbang.org/column/article/141573" target="_blank" rel="noopener noreferrer">22讲</a>类似，这里就不再赘述，你如果有兴趣的话，可以直接研读代码。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/** 抽象的event_dispatcher结构体，对应的实现如select,poll,epoll等I/O复用. */</span></span>
<span class="line"><span>struct event_dispatcher {</span></span>
<span class="line"><span>    /**  对应实现 */</span></span>
<span class="line"><span>    const char *name;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**  初始化函数 */</span></span>
<span class="line"><span>    void *(*init)(struct event_loop * eventLoop);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 通知dispatcher新增一个channel事件*/</span></span>
<span class="line"><span>    int (*add)(struct event_loop * eventLoop, struct channel * channel);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 通知dispatcher删除一个channel事件*/</span></span>
<span class="line"><span>    int (*del)(struct event_loop * eventLoop, struct channel * channel);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 通知dispatcher更新channel对应的事件*/</span></span>
<span class="line"><span>    int (*update)(struct event_loop * eventLoop, struct channel * channel);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 实现事件分发，然后调用event_loop的event_activate方法执行callback*/</span></span>
<span class="line"><span>    int (*dispatch)(struct event_loop * eventLoop, struct timeval *);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 清除数据 */</span></span>
<span class="line"><span>    void (*clear)(struct event_loop * eventLoop);</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="channel对象分析" tabindex="-1"><a class="header-anchor" href="#channel对象分析"><span>channel对象分析</span></a></h3><p>channel对象是用来和event_dispather进行交互的最主要的结构体，它抽象了事件分发。一个channel对应一个描述字，描述字上可以有READ可读事件，也可以有WRITE可写事件。channel对象绑定了事件处理函数event_read_callback和event_write_callback。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef int (*event_read_callback)(void *data);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typedef int (*event_write_callback)(void *data);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct channel {</span></span>
<span class="line"><span>    int fd;</span></span>
<span class="line"><span>    int events;   //表示event类型</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    event_read_callback eventReadCallback;</span></span>
<span class="line"><span>    event_write_callback eventWriteCallback;</span></span>
<span class="line"><span>    void *data; //callback data, 可能是event_loop，也可能是tcp_server或者tcp_connection</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="channel-map对象分析" tabindex="-1"><a class="header-anchor" href="#channel-map对象分析"><span>channel_map对象分析</span></a></h3><p>event_dispatcher在获得活动事件列表之后，需要通过文件描述字找到对应的channel，从而回调channel上的事件处理函数event_read_callback和event_write_callback，为此，设计了channel_map对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * channel映射表, key为对应的socket描述字</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>struct channel_map {</span></span>
<span class="line"><span>    void **entries;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* The number of entries available in entries */</span></span>
<span class="line"><span>    int nentries;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>channel_map对象是一个数组，数组的下标即为描述字，数组的元素为channel对象的地址。</p><p>比如描述字3对应的channel，就可以这样直接得到。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct chanenl * channel = map-&amp;gt;entries[3];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，当event_dispatcher需要回调channel上的读、写函数时，调用channel_event_activate就可以，下面是channel_event_activate的实现，在找到了对应的channel对象之后，根据事件类型，回调了读函数或者写函数。注意，这里使用了EVENT_READ和EVENT_WRITE来抽象了poll和epoll的所有读写事件类型。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int channel_event_activate(struct event_loop *eventLoop, int fd, int revents) {</span></span>
<span class="line"><span>    struct channel_map *map = eventLoop-&amp;gt;channelMap;</span></span>
<span class="line"><span>    yolanda_msgx(&amp;quot;activate channel fd == %d, revents=%d, %s&amp;quot;, fd, revents, eventLoop-&amp;gt;thread_name);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (fd &amp;lt; 0)</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (fd &amp;gt;= map-&amp;gt;nentries)return (-1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    struct channel *channel = map-&amp;gt;entries[fd];</span></span>
<span class="line"><span>    assert(fd == channel-&amp;gt;fd);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (revents &amp;amp; (EVENT_READ)) {</span></span>
<span class="line"><span>        if (channel-&amp;gt;eventReadCallback) channel-&amp;gt;eventReadCallback(channel-&amp;gt;data);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if (revents &amp;amp; (EVENT_WRITE)) {</span></span>
<span class="line"><span>        if (channel-&amp;gt;eventWriteCallback) channel-&amp;gt;eventWriteCallback(channel-&amp;gt;data);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增加、删除、修改channel-event" tabindex="-1"><a class="header-anchor" href="#增加、删除、修改channel-event"><span>增加、删除、修改channel event</span></a></h3><p>那么如何增加新的channel event事件呢？下面这几个函数是用来增加、删除和修改channel event事件的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int event_loop_add_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int event_loop_remove_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int event_loop_update_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面三个函数提供了入口能力，而真正的实现则落在这三个函数上：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int event_loop_handle_pending_add(struct event_loop *eventLoop, int fd, struct channel *channel);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int event_loop_handle_pending_remove(struct event_loop *eventLoop, int fd, struct channel *channel);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int event_loop_handle_pending_update(struct event_loop *eventLoop, int fd, struct channel *channel);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看一下其中的一个实现，event_loop_handle_pending_add在当前event_loop的channel_map里增加一个新的key-value对，key是文件描述字，value是channel对象的地址。之后调用event_dispatcher对象的add方法增加channel event事件。注意这个方法总在当前的I/O线程中执行。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// in the i/o thread</span></span>
<span class="line"><span>int event_loop_handle_pending_add(struct event_loop *eventLoop, int fd, struct channel *channel) {</span></span>
<span class="line"><span>    yolanda_msgx(&amp;quot;add channel fd == %d, %s&amp;quot;, fd, eventLoop-&amp;gt;thread_name);</span></span>
<span class="line"><span>    struct channel_map *map = eventLoop-&amp;gt;channelMap;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (fd &amp;lt; 0)</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (fd &amp;gt;= map-&amp;gt;nentries) {</span></span>
<span class="line"><span>        if (map_make_space(map, fd, sizeof(struct channel *)) == -1)</span></span>
<span class="line"><span>            return (-1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //第一次创建，增加</span></span>
<span class="line"><span>    if ((map)-&amp;gt;entries[fd] == NULL) {</span></span>
<span class="line"><span>        map-&amp;gt;entries[fd] = channel;</span></span>
<span class="line"><span>        //add channel</span></span>
<span class="line"><span>        struct event_dispatcher *eventDispatcher = eventLoop-&amp;gt;eventDispatcher;</span></span>
<span class="line"><span>        eventDispatcher-&amp;gt;add(eventLoop, channel);</span></span>
<span class="line"><span>        return 1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在这一讲里，我们介绍了高性能网络编程框架的主要设计思路和基本数据结构，以及反应堆设计相关的具体做法。在接下来的章节中，我们将继续编写高性能网络编程框架的线程模型以及读写Buffer部分。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>和往常一样，给你留两道思考题:</p><p>第一道，如果你有兴趣，不妨实现一个select_dispatcher对象，用select方法实现定义好的event_dispatcher接口；</p><p>第二道，仔细研读channel_map实现中的map_make_space部分，说说你的理解。</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>`,79)]))}const r=a(l,[["render",p]]),v=JSON.parse('{"path":"/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%AC%AC%E5%9B%9B%E6%A8%A1%E5%9D%97%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87/32%20_%20%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%80%9D%E8%B7%AF.html","title":"","lang":"zh-CN","frontmatter":{"description":"\\b你好，我是盛延敏，这里是网络编程实战第32讲，欢迎回来。 从这一讲开始，我们进入实战篇，开启一个高性能HTTP服务器的编写之旅。 在开始编写高性能HTTP服务器之前，我们先要构建一个支持TCP的高性能网络编程框架，完成这个TCP高性能网络框架之后，再增加HTTP特性的支持就比较容易了，这样就可以很快开发出一个高性能的HTTP服务器程序。 设计需求 在...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%AC%AC%E5%9B%9B%E6%A8%A1%E5%9D%97%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87/32%20_%20%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%80%9D%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"\\b你好，我是盛延敏，这里是网络编程实战第32讲，欢迎回来。 从这一讲开始，我们进入实战篇，开启一个高性能HTTP服务器的编写之旅。 在开始编写高性能HTTP服务器之前，我们先要构建一个支持TCP的高性能网络编程框架，完成这个TCP高性能网络框架之后，再增加HTTP特性的支持就比较容易了，这样就可以很快开发出一个高性能的HTTP服务器程序。 设计需求 在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.51,"words":3153},"filePathRelative":"posts/网络编程实战/第四模块：实战篇/32 _ 自己动手写高性能HTTP服务器（一）：设计和思路.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"32 | 自己动手写高性能HTTP服务器（一）：设计和思路\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/fe/f1/fe2a0af5589cbe6648d8dcd62c55a6f1.mp3\\"></audio></p>\\n<p>\\b你好，我是盛延敏，这里是网络编程实战第32讲，欢迎回来。</p>\\n<p>从这一讲开始，我们进入实战篇，开启一个高性能HTTP服务器的编写之旅。</p>\\n<p>在开始编写高性能HTTP服务器之前，我们先要构建一个支持TCP的高性能网络编程框架，完成这个TCP高性能网络框架之后，再增加HTTP特性的支持就比较容易了，这样就可以很快开发出一个高性能的HTTP服务器程序。</p>","autoDesc":true}');export{r as comp,v as data};
