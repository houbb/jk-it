import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-6Bz2fGO5.js";const p={};function l(t,a){return i(),n("div",null,a[0]||(a[0]=[e(`<p><audio id="audio" title="26 | 如何提高 JSON 解析的性能？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a7/c4/a74dbde6c3bf91738e6acd7c821a47c4.mp3"></audio></p><p>你好，我是戴铭。</p><p>在iOS 开发中，我们都会碰到这样的问题：不同团队开发的库需要进行数据通信，而通信数据规范通常很难确定。今天，我们就来聊聊如何高效地解决这个问题吧。</p><p>同一个编程语言之间的数据通信非常简单，因为数据的规范都是相同的，所以输入和输出不需要做任何转换。但是，在不同编程语言之间进行数据通信，就会比较麻烦了。比如，一种语言按照自身的标准规范输出了一份数据，另一门语言接收到时需要依据自身编程语言标准进行数据对齐。</p><p>对齐一门语言的数据或许你还能够接受，但是如果对接的语言多了，你就需要写很多份能够与之对应的数据对齐转换代码。编写和维护的成本可想而知，那么目前有没有一种通用，而且各个编程语言都能支持的数据格式呢？</p><p>答案是有的。这个数据格式，就是我今天要跟你聊的 JSON。</p><p>接下来，在今天这篇文章中，我会先和你聊聊什么是 JSON；然后，再和你说说 JSON 的使用场景，以及 iOS 里是如何解析 JSON 的；最后，再和你分析如何提高 JSON 的解析性能。</p><h2 id="什么是-json" tabindex="-1"><a class="header-anchor" href="#什么是-json"><span>什么是 JSON？</span></a></h2><p>JSON ，是JavaScript Object Notation的缩写。其实，JSON最初是被设计为 JavaScript 语言的一个子集，但最终因为和编程语言无关，所以成为了一种开放标准的常见数据格式。</p><p>虽然JSON源于 JavaScript，但到目前很多编程语言都有了 JSON 解析的库，包括 C、C++、Java、Perl、Python 等等。除此之外，还有很多编程语言内置了 JSON 生成和解析的方法，比如 PHP 在5.2版本开始内置了 json_encode() 方法，可以将 PHP 里的 Array 直接转化成 JSON。转换代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$arr = array(array(7,11,21));</span></span>
<span class="line"><span>echo json_encode($arr).&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$dic = array(&#39;name1&#39; =&amp;gt; &#39;val1&#39;, &#39;name2&#39; =&amp;gt; &#39;val2&#39;);</span></span>
<span class="line"><span>echo json_encode($dic)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[[7,11,21]]</span></span>
<span class="line"><span>{&amp;quot;name1&amp;quot;:&amp;quot;val1&amp;quot;,&amp;quot;name2&amp;quot;:&amp;quot;val2&amp;quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，生成了两个 JSON 对象，第一个解析完后就是一个二维数组，第二个解析完后就是一个字典。<strong>有了编程语言内置方法解析和生成 JSON 的支持，JSON 成为了理想的数据交换格式。</strong></p><p>通过上面生成的 JSON 可以看出，JSON 这种文本数据交换格式易读，且结构简单。</p><p>JSON基于两种结构：</p><ul><li>名字/值对集合：这种结构在其他编程语言里被实现为对象、字典、Hash 表、结构体或者关联数组。</li><li>有序值列表：这种结构在其他编程语言里被实现为数组、向量、列表或序列。</li></ul><p>各种编程语言都以某种形式支持着这两种结构。比如，PHP 的 Array 既支持名字/值对集合又支持有序值列表；在 Swift 里键值集合就是字典，有序值列表就是数组。<strong>名字/值对集合</strong>在 JSON 和 JavaScript 里都被称为对象。JSON语法图以及说明，你可以在 <a href="https://www.json.org/" target="_blank" rel="noopener noreferrer">JSON 官网</a>查看。在这里，我只列出了几个用的比较多的语法图。</p><p><img src="https://static001.geekbang.org/resource/image/00/4b/00077e283c07754189106221b6886c4b.gif" alt=""><br><br> 如上面语法图所示，对象是以左大括号开头和右大括号结尾，名字后面跟冒号，名字/值对用逗号分隔。比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{&amp;quot;name1&amp;quot;:&amp;quot;val1&amp;quot;,&amp;quot;name2&amp;quot;:&amp;quot;val2&amp;quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>有序值列表</strong>在 JSON 和 JavaScript 里都叫数组，其语法图如下：</p><p><img src="https://static001.geekbang.org/resource/image/27/df/27be471d9d5c0a9604216fb55d1401df.gif" alt=""><br><br> 可以看出数组是以左中括号开头，以右中括号结尾，值以逗号分隔。数组代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[[7,11,21]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>语法图中值</strong>的语法图如下：</p><p><img src="https://static001.geekbang.org/resource/image/4b/ab/4b85ca012e31a1d9eb73b42a4e2220ab.gif" alt=""><br><br> 可以看出，值可以是字符串、数字、对象、数组、布尔值ture、布尔值false、空值。根据这个语法，JSON 可以通过实现对象和数组的嵌套来描述更为复杂的数据结构。</p><p>JSON 是没有注释的，水平制表符、换行符、回车符都会被当做空格。字符串由双引号括起来，里面可以使零到多个 Unicode 字符序列，使用反斜杠来进行转义。</p><h2 id="json的使用场景" tabindex="-1"><a class="header-anchor" href="#json的使用场景"><span>JSON的使用场景</span></a></h2><p>JSON 的数据结构和任何一门编程语言的语法结构比起来都要简单得多，但它能干的事情却一点儿也不少，甚至可以完整地描述出一门编程语言的代码逻辑。比如，下面的这段 JavaScript 代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if (hour &amp;lt; 18) {</span></span>
<span class="line"><span>  greeting = &amp;quot;Good day&amp;quot;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段 JavaScript 代码的逻辑是，当 hour 变量小于18时，greeting 设置为 Good day 字符串，根据 JavaScript 的语法规则，完整逻辑的语法树结构可以通过 JSON 描述出来。对应的JSON，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &amp;quot;type&amp;quot;: &amp;quot;Program&amp;quot;,</span></span>
<span class="line"><span>  &amp;quot;body&amp;quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &amp;quot;type&amp;quot;: &amp;quot;IfStatement&amp;quot;,</span></span>
<span class="line"><span>      &amp;quot;test&amp;quot;: {</span></span>
<span class="line"><span>        &amp;quot;type&amp;quot;: &amp;quot;BinaryExpression&amp;quot;,</span></span>
<span class="line"><span>        &amp;quot;left&amp;quot;: {</span></span>
<span class="line"><span>          &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,</span></span>
<span class="line"><span>          &amp;quot;name&amp;quot;: &amp;quot;hour&amp;quot;</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &amp;quot;operator&amp;quot;: &amp;quot;&amp;lt;&amp;quot;,</span></span>
<span class="line"><span>        &amp;quot;right&amp;quot;: {</span></span>
<span class="line"><span>          &amp;quot;type&amp;quot;: &amp;quot;Literal&amp;quot;,</span></span>
<span class="line"><span>          &amp;quot;value&amp;quot;: 18,</span></span>
<span class="line"><span>          &amp;quot;raw&amp;quot;: &amp;quot;18&amp;quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &amp;quot;consequent&amp;quot;: {</span></span>
<span class="line"><span>        &amp;quot;type&amp;quot;: &amp;quot;BlockStatement&amp;quot;,</span></span>
<span class="line"><span>        &amp;quot;body&amp;quot;: [</span></span>
<span class="line"><span>          {</span></span>
<span class="line"><span>            &amp;quot;type&amp;quot;: &amp;quot;ExpressionStatement&amp;quot;,</span></span>
<span class="line"><span>            &amp;quot;expression&amp;quot;: {</span></span>
<span class="line"><span>              &amp;quot;type&amp;quot;: &amp;quot;AssignmentExpression&amp;quot;,</span></span>
<span class="line"><span>              &amp;quot;operator&amp;quot;: &amp;quot;=&amp;quot;,</span></span>
<span class="line"><span>              &amp;quot;left&amp;quot;: {</span></span>
<span class="line"><span>                &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,</span></span>
<span class="line"><span>                &amp;quot;name&amp;quot;: &amp;quot;greeting&amp;quot;</span></span>
<span class="line"><span>              },</span></span>
<span class="line"><span>              &amp;quot;right&amp;quot;: {</span></span>
<span class="line"><span>                &amp;quot;type&amp;quot;: &amp;quot;Literal&amp;quot;,</span></span>
<span class="line"><span>                &amp;quot;value&amp;quot;: &amp;quot;Good day&amp;quot;,</span></span>
<span class="line"><span>                &amp;quot;raw&amp;quot;: &amp;quot;\\&amp;quot;Good day\\&amp;quot;&amp;quot;</span></span>
<span class="line"><span>              }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &amp;quot;alternate&amp;quot;: null</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &amp;quot;sourceType&amp;quot;: &amp;quot;module&amp;quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的 JSON 代码可以看出，每个语法树节点都是一个 JSON 对象，同级节点使用的是 JSON 数组。JavaScript 语法规则标准可以在<a href="https://www.ecma-international.org/publications/standards/Standard.htm" target="_blank" rel="noopener noreferrer">Ecma 网站</a>上找到。</p><p>比如下面这段 JavaScript 代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>button.onclick = function() {</span></span>
<span class="line"><span>    var name = realname(&#39;Tom&#39;);</span></span>
<span class="line"><span>    if(name.length &amp;gt;= 5) {</span></span>
<span class="line"><span>        show();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段 JavaScript 代码对应的语法树如下图所示：</p><p><img src="https://static001.geekbang.org/resource/image/ad/42/adbf1a5955d2d7014691d098bd8be942.jpeg" alt=""><br><br> JavaScript 编程语言的语法树能够使用 JSON 来描述，其他编程语言同样也可以，比如Objective-C 或 Swift，都能够生成自己的语法树结构，转成 JSON 后能够在运行期被动态地识别。因此，<strong>App 的业务逻辑动态化就不仅限于使用 JavaScript 这一门语言来编写，而是可以选择使用其他你熟悉的语言。</strong></p><p>JSON 不仅可以描述业务数据使得业务数据能够动态更新，还可以用来描述业务逻辑，以实现业务逻辑的动态化，除此之外还可以用来描述页面布局。比如，我以前就做过这么一件事儿：解析一个H5页面编辑器生成的 JSON，将 JSON 对应生成 iOS 原生界面布局代码。我当时是用 Swift 语言来编写这个项目的，完整代码在<a href="https://github.com/ming1016/HTN/tree/master/Sources/H5Editor" target="_blank" rel="noopener noreferrer">这里</a>。</p><p>在这个项目中，对JSON 的解析使用的是系统自带的 JSONDecoder 的 decode 方法，具体代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let jsonData = jsonString.data(using: .utf8)!</span></span>
<span class="line"><span>let decoder = JSONDecoder()</span></span>
<span class="line"><span>let jsonModel = try! decoder.decode(H5Editor.self, from: jsonData)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的，H5Editor 是一个结构体，能够记录 JSON 解析后的字典和数组。H5Editor 结构体完整定义，请点击<a href="https://github.com/ming1016/HTN/blob/master/Sources/H5Editor/H5EditorStruct.swift" target="_blank" rel="noopener noreferrer">这里的链接</a>。</p><p>那么， JSONDecoder 的 decode 方法到底是怎么解析 JSON 的呢？在我看来，了解这一过程的最好方式，就是直接看看它在Swift 源码里是怎么实现的。</p><h2 id="jsondecoder-如何解析-json" tabindex="-1"><a class="header-anchor" href="#jsondecoder-如何解析-json"><span>JSONDecoder 如何解析 JSON？</span></a></h2><p>JSONDecoder 的代码，你可以<a href="https://github.com/apple/swift/blob/master/stdlib/public/Darwin/Foundation/JSONEncoder.swift" target="_blank" rel="noopener noreferrer">在 Swift 的官方 GitHub 上</a>查看。</p><p>接下来，我先跟你说下解析 JSON 的入口， JSONDecoder 的 decode 方法。下面是 decode 方法的定义代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>open func decode&amp;lt;T : Decodable&amp;gt;(_ type: T.Type, from data: Data) throws -&amp;gt; T {</span></span>
<span class="line"><span>    let topLevel: Any</span></span>
<span class="line"><span>    do {</span></span>
<span class="line"><span>       topLevel = try JSONSerialization.jsonObject(with: data)</span></span>
<span class="line"><span>    } catch {</span></span>
<span class="line"><span>        throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: [], debugDescription: &amp;quot;The given data was not valid JSON.&amp;quot;, underlyingError: error))</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // JSONDecoder 的初始化</span></span>
<span class="line"><span>    let decoder = __JSONDecoder(referencing: topLevel, options: self.options)</span></span>
<span class="line"><span>    // 从顶层开始解析 JSON</span></span>
<span class="line"><span>    guard let value = try decoder.unbox(topLevel, as: type) else {</span></span>
<span class="line"><span>        throw DecodingError.valueNotFound(type, DecodingError.Context(codingPath: [], debugDescription: &amp;quot;The given data did not contain a top-level value.&amp;quot;))</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return value</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们通过上面的代码一起来看看 decode 方法是如何解析 JSON 的。</p><p>上面 decode 方法入参 T.type 的 T 是一个泛型，具体到解析H5页面编辑器生成的 JSON 的例子，就是 H5Editor 结构体；入参 data 就是 JSON 字符串转成的 Data 数据。</p><p>decode 方法在解析完后会将解析到的数据保存到传入的结构体中，然后返回。在 decode 方法里可以看到，对于传入的 Data 数据会首先通过 JSONSerialization 方法转化成 topLevel 原生对象，然后topLevel 原生对象通过 JSONDecoder 初始化成一个 JSONDecoder 对象，最后使用 JSONDecoder 的 unbox 方法将数据和传入的结构体对应上，并保存在结构体里进行返回。</p><p>可以看出，目前 JSONSerialization 已经能够很好地解析 JSON，JSONDecoder将其包装以后，通过 unbox 方法使得 JSON 解析后能很方便地匹配 JSON 数据结构和 Swift 原生结构体。</p><p>试想一下，如果要将 JSON 应用到更大的场景时，比如对编程语言的描述或者界面布局的描述，其生成的 JSON 文件可能会很大，并且对这种大 JSON 文件解析性能的要求也会更高。那么，有比JSONSerialization性能更好的解析JSON的方法吗？</p><h2 id="提高-json-解析性能" tabindex="-1"><a class="header-anchor" href="#提高-json-解析性能"><span>提高 JSON 解析性能</span></a></h2><p>2019年2月，Geoff Langdale 和 Daniel Lemire发布了 <a href="https://github.com/lemire/simdjson" target="_blank" rel="noopener noreferrer">simdjson</a>。 simdjson是一款他们研究了很久的快速 JSON 解析器， 号称每秒可解析千兆字节 JSON 文件。simdjson 和其他 JSON 解析器对比如下图所示：</p><p><img src="https://static001.geekbang.org/resource/image/40/5e/401c6aba33f2335f242dbd8f8305885e.png" alt=""><br><br> 可以看出，只有 simdjson 能够达到每秒千兆字节级别，并且远远高于其他 JSON 解析器。那么 ，simdjson 是怎么做到的呢？接下来，我通过 simdjson 解析 JSON 的两个阶段来跟你说明下这个问题。</p><p>**第一个阶段，**使用 simdjson 去发现需要 JSON 里重要的字符集，比如大括号、中括号、逗号、冒号等，还有类似 true、false、null、数字这样的原子字符集。第一个阶段是没有分支处理的，这个阶段与词法分析非常类似。</p><p>**第二个阶段，**simdjson 也没有做分支处理，而是采用的堆栈结构，嵌套关系使用 goto 的方式进行导航。simdjson 通过索引可以处理所有输入的 JSON 内容而无需使用分支，这都归功于聪明的条件移动操作，使得遍历过程变得高效了很多。</p><p>通过 simdjson 解析 JSON 的两个阶段可以看出，simdjson的主要思路是尽可能地以最高效的方式将 JSON 这种可读性高的数据格式转换为计算机能更快理解的数据格式。</p><p>为了达到快速解析的目的， simdjson在第一个阶段一次性使用了 64字节输入进行大规模的数据操作，检查字符和字符类时以及当获得掩码应用变换时以64位进行位操作。这种方式，对于大的 JSON 数据解析性能提升是非常明显的。</p><p>如果你想更详细地了解这两个阶段的解析思路，可以查看这篇论文“<a href="https://arxiv.org/abs/1902.08318" target="_blank" rel="noopener noreferrer">Parsing Gigabytes of JSON per Second</a>”。其实，simdjson 就是对这篇论文的实现，你可以在<a href="https://github.com/lemire/simdjson" target="_blank" rel="noopener noreferrer">GitHub</a>上查看具体的实现代码。在我看来，一边看论文，一边看对应的代码实现，不失为一种高效的学习方式。</p><p>而如果你想要在工程中使用 simdjson的话，直接使用它提供的一个简单接口即可。具体的使用代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;quot;simdjson/jsonparser.h&amp;quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const char * filename = ... // JSON 文件</span></span>
<span class="line"><span>std::string_view p = get_corpus(filename);</span></span>
<span class="line"><span>ParsedJson pj = build_parsed_json(p); // 解析方法</span></span>
<span class="line"><span>// you no longer need p at this point, can do aligned_free((void*)p.data())</span></span>
<span class="line"><span>if( ! pj.isValid() ) {</span></span>
<span class="line"><span>    // 出错处理</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>aligned_free((void*)p.data());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>在今天这篇文章中，我和你分享了什么是 JSON，JSON 的使用场景，以及simdjson 这个开源 JSON 解析库。simdjson 能够极大地提高 JSON 解析性能，你也可以非常方便地把它用到自己的工程中。</p><p>当需要对现有方案进行优化时，有的人会利用自己扎实的计算机基础知识找出更优秀的解决方案，而有的人只能等待更优秀的解决方案的出现。simdjson的作者明显就属于前者，而我们也要不断充实自己的基础知识，努力成为这其中的一员。</p><h2 id="课后小作业" tabindex="-1"><a class="header-anchor" href="#课后小作业"><span>课后小作业</span></a></h2><p>对于 JSON 的解析库，我今天只和你分析了系统自带的 JSONSerialization 和 simdjson。那么，我想请你说说你目前使用的 JSON 解析库是什么，以及它是如何解析 JSON 的，性能又如何呢？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p>`,66)]))}const o=s(p,[["render",l]]),c=JSON.parse('{"path":"/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AF%87/26%20_%20%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%20JSON%20%E8%A7%A3%E6%9E%90%E7%9A%84%E6%80%A7%E8%83%BD%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是戴铭。 在iOS 开发中，我们都会碰到这样的问题：不同团队开发的库需要进行数据通信，而通信数据规范通常很难确定。今天，我们就来聊聊如何高效地解决这个问题吧。 同一个编程语言之间的数据通信非常简单，因为数据的规范都是相同的，所以输入和输出不需要做任何转换。但是，在不同编程语言之间进行数据通信，就会比较麻烦了。比如，一种语言按照自身的标准规范输出...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AF%87/26%20_%20%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%20JSON%20%E8%A7%A3%E6%9E%90%E7%9A%84%E6%80%A7%E8%83%BD%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是戴铭。 在iOS 开发中，我们都会碰到这样的问题：不同团队开发的库需要进行数据通信，而通信数据规范通常很难确定。今天，我们就来聊聊如何高效地解决这个问题吧。 同一个编程语言之间的数据通信非常简单，因为数据的规范都是相同的，所以输入和输出不需要做任何转换。但是，在不同编程语言之间进行数据通信，就会比较麻烦了。比如，一种语言按照自身的标准规范输出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":11.06,"words":3319},"filePathRelative":"posts/iOS开发高手课/应用开发篇/26 _ 如何提高 JSON 解析的性能？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"26 | 如何提高 JSON 解析的性能？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a7/c4/a74dbde6c3bf91738e6acd7c821a47c4.mp3\\"></audio></p>\\n<p>你好，我是戴铭。</p>\\n<p>在iOS 开发中，我们都会碰到这样的问题：不同团队开发的库需要进行数据通信，而通信数据规范通常很难确定。今天，我们就来聊聊如何高效地解决这个问题吧。</p>","autoDesc":true}');export{o as comp,c as data};
