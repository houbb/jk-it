import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-6Bz2fGO5.js";const p={};function l(t,s){return i(),n("div",null,s[0]||(s[0]=[e(`<p><audio id="audio" title="03 | 如何使用浏览器给自己拍照呢？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/66/7c/6695e7bc114de236a23942693233777c.mp3"></audio></p><p>在之前的文章中，我向你介绍了如何在浏览器中利用 WebRTC 采集音视频数据。那么，是否可以通过相同的技术进行拍照呢？没错，这是完全可行的。</p><p>现代的浏览器功能越来越强大，你不光可以通过它进行拍照，而且还可以对拍下来的照片进行各种滤镜处理。</p><p>为了实现上述功能，你需要了解并掌握以下三个知识点：</p><ul><li>如何从采集到的视频中获取到图片？</li><li>如何将处理后的图片保存成文件？</li><li>如何对获取到的图片进行滤镜处理？</li></ul><p>这三方面的知识点就是本文要交付的重点内容。下面我们先学习与之相关的基础知识和原理，然后再对这几个知识点逐一进行讲解，各个击破。</p><h2 id="在webrtc处理过程中的位置" tabindex="-1"><a class="header-anchor" href="#在webrtc处理过程中的位置"><span>在WebRTC处理过程中的位置</span></a></h2><p>在正式进入主题之前，咱们仍然按老规矩，看看本篇文章所介绍的内容在整个 WebRTC 处理过程中的位置。如下图所示：</p><img src="https://static001.geekbang.org/resource/image/c5/a0/c536a1dd0ed50008d2ada594e052d6a0.png" alt=""><p>你可以看到，这张图与<a href="https://time.geekbang.org/column/article/107948" target="_blank" rel="noopener noreferrer">《01 | 原来通过浏览器访问摄像头这么容易》</a>文章中的图一模一样。没错，咱们本篇文章所涉及的知识点仍然属于音视频数据采集的部分。</p><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h2><p>在正式讲解如何进行<strong>拍照</strong>之前，你需要先了解非编码帧（解码帧）和编码帧这两个知识点，这会有利于你对后面拍照实现内容的理解。</p><h3 id="_1-非编码帧" tabindex="-1"><a class="header-anchor" href="#_1-非编码帧"><span>1. 非编码帧</span></a></h3><p>好多人小时候应该都学过，在几张空白的纸上画同一个物体，并让物体之间稍有一些变化，然后连续快速地翻动这几张纸，它就形成了一个小<strong>动画</strong>。</p><p><strong>音视频播放器</strong>就是利用这样的原理来播放音视频文件的。当你要播放某个视频文件时，播放器会按照一定的时间间隔连续地播放从音视频文件中<strong>解码后的视频帧</strong>，这样视频就动起来了。同理，播放从摄像头获取的视频帧也是如此，只不过从摄像头获取的本来就是<strong>非编码视频帧</strong>，所以就不需要解码了。</p><p>通过上面的描述，你应该能得到以下两点信息：</p><ul><li>播放的视频帧之间的时间间隔是非常小的。如按每秒钟20帧的帧率计算，每帧之间的间隔是50ms。</li><li>播放器播的是<strong>非编码帧（解码后的帧）</strong>，这些非编码帧就是一幅幅独立的图像。</li></ul><p>从摄像头里采集的帧或通过解码器解码后的帧都是<strong>非编码帧</strong>。非编码帧的格式一般是YUV 格式或是 RGB 格式。关于 YUV 与 RGB 的相关知识，我在<a href="https://time.geekbang.org/column/article/108491" target="_blank" rel="noopener noreferrer">上一篇文章</a>中已向你做过简要介绍，这里就不再赘述了。</p><h3 id="_2-编码帧" tabindex="-1"><a class="header-anchor" href="#_2-编码帧"><span>2. 编码帧</span></a></h3><p>相对于<strong>非编码帧</strong>，通过编码器（如 H264/H265、VP8/VP9）压缩后的帧称为<strong>编码帧</strong>。这里我们以 H264 为例，经过H264编码的帧包括以下三种类型。</p><ul><li><strong>I 帧</strong>：关键帧。压缩率低，可以单独解码成一幅完整的图像。</li><li><strong>P 帧</strong>：参考帧。压缩率较高，解码时依赖于前面已解码的数据。</li><li><strong>B 帧</strong>：前后参考帧。压缩率最高，解码时不光依赖前面已经解码的帧，而且还依赖它后面的P帧。换句话说就是，<strong>B帧后面的P帧要优先于它进行解码，然后才能将 B 帧解码</strong>。</li></ul><p>关于编码这块的内容，目前你只需了解上面这些知识即可。</p><p>通过上面的介绍，现在你应该已经清楚地知道了：<strong>从播放器里获取的视频帧一定是非编码帧。也就是说，拍照的过程其实是从连续播放的一幅幅画面中抽取正在显示的那张画面</strong>。</p><h2 id="如何获取视频流" tabindex="-1"><a class="header-anchor" href="#如何获取视频流"><span>如何获取视频流</span></a></h2><p>在获得照片之前，你首先要通过浏览器的API获取视频流，并通过 HTML5 的 <code>&amp;lt;video&amp;gt;</code> 标签将视频播放出来。实际上，这些知识我已经在<a href="https://time.geekbang.org/column/article/107948" target="_blank" rel="noopener noreferrer">《01 | 原来通过浏览器访问摄像头这么容易》</a>中介绍过了，这里我就不做过多的描述了。咱们还是直接上代码吧。</p><p>HTML 部分代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;html&amp;gt;</span></span>
<span class="line"><span>&amp;lt;head&amp;gt;</span></span>
<span class="line"><span>  &amp;lt;title&amp;gt;WebRTC take picture&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span>&amp;lt;body&amp;gt;</span></span>
<span class="line"><span>   &amp;lt;video autoplay playsinline id=&amp;quot;player&amp;quot;&amp;gt;</span></span>
<span class="line"><span>   &amp;lt;script src=&amp;quot;./js/client.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/body&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/html&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码很简单，就是定义了一个 video 标签，用于播放从摄像头获取到的视频流。另外，它还引入了一段 JavaScript 脚本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&#39;use strict&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//获取HTML页面中的video标签  </span></span>
<span class="line"><span>var videoplay = document.querySelector(&#39;video#player&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//播放视频流</span></span>
<span class="line"><span>function gotMediaStream(stream){</span></span>
<span class="line"><span>        videoplay.srcObject = stream;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function handleError(err){</span></span>
<span class="line"><span>        console.log(&#39;getUserMedia error:&#39;, err);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//对采集的数据做一些限制</span></span>
<span class="line"><span>var constraints = {</span></span>
<span class="line"><span>                        video : {</span></span>
<span class="line"><span>                                width: 1280,</span></span>
<span class="line"><span>                                height: 720,</span></span>
<span class="line"><span>                                frameRate:15,</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        audio : false</span></span>
<span class="line"><span>                   }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//采集音视频数据流</span></span>
<span class="line"><span>navigator.mediaDevices.getUserMedia(constraints)</span></span>
<span class="line"><span>                        .then(gotMediaStream)</span></span>
<span class="line"><span>                        .catch(handleError);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段脚本中，我们调用了之前所讲的<strong>getUserMedia</strong>方法，该方法会打开摄像头，并通过它采集音视频流。然后再将采集到的视频流赋值给 HTML 中定义的<strong>video</strong>标签的<strong>srcObject</strong>字段，这样<strong>video</strong>标签就可以从摄像头源源不断地获得视频帧，并将它播放出来了。</p><p>以上这些内容，你应该都非常熟悉了。下面的关键点是，获取到视频流后如何从中获取正在显示的视频帧或图片呢？现在就让我们来解决这个问题吧！</p><h2 id="如何拍照" tabindex="-1"><a class="header-anchor" href="#如何拍照"><span>如何拍照</span></a></h2><p>实际上，浏览器提供了一个非常强大的对象，称为<strong>Canvas</strong>。你可以把它想像成一块画布，既可以在这块画布上画上点、线或各种图形，也可以将一幅画直接绘制到上面。</p><p>在浏览器中，Canvas 的功能非常强大，可以处理很多图表方面的事情，对于这部分知识我们后面还会做详细的介绍。而这里你只需关注它获取图片这一个知识点。</p><p>我们还是通过代码来讲解，这样更一目了然。首先，在 HTML 中增加以下代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>&amp;lt;button id=&amp;quot;TakePhoto&amp;quot;&amp;gt;Take&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>&amp;lt;canvas id=&amp;quot;picture&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的HTML代码段，包括一个 <code>&amp;lt;canvas&amp;gt;</code> 标签和一个 <code>&amp;lt;button&amp;gt;</code> 标签。我们的设想是，当点击拍照按钮时，就可以从视频流中获取到一张当时正在显示的图片了。</p><p>显然，光有 HTML 部分肯定是不行的，还需要下面的 JavaScript 脚本进行控制。增加 JavaScript 代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var picture = document.querySelector(&#39;canvas#picture&#39;);</span></span>
<span class="line"><span>picture.width = 640;</span></span>
<span class="line"><span>picture.height = 480;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>picture.getContext(&#39;2d&#39;).drawImage(videoplay, 0, 0, picture.width, picture.height);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的JavaScript代码中，首先获得 HTML 中的 Canvas 标签，并设置了 Canvas 的宽高； 然后调用 Canvas 上下文的 drawImage 方法，这样就可以从视频流中抓取当时正在显示的图片了。</p><p>这里最关键的点就是 <strong>drawImage</strong> 方法，其方法格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void ctx.drawImage(image, dx, dy, dWidth, dHeight);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>image：可以是一幅图片，或HTMLVideoElement。</li><li>dx, dy：图片起点的 x、y 坐标。</li><li>dWidth：图片的宽度。</li><li>dHeight：图片的高度。</li></ul><p>该方法的第一个参数特别重要，它既可以是一幅图片，也可以是一个Video 元素。而 HTML 中的 <code>&amp;lt;video&amp;gt;</code> 标签就是一个 video 元素，所以它可以当作是 drawImage 方法的第一个参数。这样就可以通过 Canvas 获取到照片了。</p><p>通过上面的方法，你就拍照成功了哈，是不是很简单？</p><h2 id="如何保存照片" tabindex="-1"><a class="header-anchor" href="#如何保存照片"><span>如何保存照片</span></a></h2><p>照片拍好后，如何将它保存到本地文件系统中呢? 浏览器同样给我们提供了非常方便的方法，让我们来看一下具体代码吧。</p><p>HTML 要先增加如下代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>&amp;lt;div&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;button id=&amp;quot;save&amp;quot;&amp;gt;保存&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是当你点击保存这个 <code>&amp;lt;button&amp;gt;</code> 的时候，就可以将前面 Canvas 抓取的图片保存下来。不过，<code>&amp;lt;button&amp;gt;</code>只是触发一个事件，真正做事儿的是下面的 JavaScript 代码。具体逻辑如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function downLoad(url){</span></span>
<span class="line"><span>    var oA = document.createElement(&amp;quot;a&amp;quot;);</span></span>
<span class="line"><span>    oA.download = &#39;photo&#39;;// 设置下载的文件名，默认是&#39;下载&#39;</span></span>
<span class="line"><span>    oA.href = url;</span></span>
<span class="line"><span>    document.body.appendChild(oA);</span></span>
<span class="line"><span>    oA.click();</span></span>
<span class="line"><span>    oA.remove(); // 下载之后把创建的元素删除</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>document.querySelector(&amp;quot;button#save&amp;quot;).onclick = function (){</span></span>
<span class="line"><span>    downLoad(canvas.toDataURL(&amp;quot;image/jpeg&amp;quot;));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，当用户点击<strong>保存</strong>按钮时，会调用一个匿名函数。该函数的逻辑如下：</p><ul><li>首先，通过 Canvas 的 toDataURL 方法获得图片的 URL 地址；</li><li>然后，将该URL地址当作参数传给 downLoad 函数；</li><li>最后，downLoad 函数做的事儿比较简单，就是创建一个<code>&amp;lt;a&amp;gt;</code>标签，当用户点击时就将图片下载下来。</li></ul><p>通过上面的代码，你就可以通过浏览器为自己拍照，并同时将拍下来的照片保存到文件系统中了。</p><h2 id="如何实现滤镜" tabindex="-1"><a class="header-anchor" href="#如何实现滤镜"><span>如何实现滤镜</span></a></h2><p>从视频流中获取到照片后，你还可以通过滤镜为照片增加点特效，这样会让你的照片更加特别。</p><p>在浏览器中对于图片的滤镜处理是通过 CSS 来控制的。像前面一样，首先在 HTML 中增加 CSS 的滤镜代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>&amp;lt;head&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;style&amp;gt;</span></span>
<span class="line"><span>         .none {</span></span>
<span class="line"><span>              -webkit-filter: none;</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>         .blur {</span></span>
<span class="line"><span>              -webkit-filter: blur(3px);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>         .grayscale {</span></span>
<span class="line"><span>              -webkit-filter: grayscale(1);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>         .invert {</span></span>
<span class="line"><span>              -webkit-filter: invert(1);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>         .sepia {</span></span>
<span class="line"><span>              -webkit-filter: sepia(1);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &amp;lt;/style&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span>&amp;lt;body&amp;gt;</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  &amp;lt;select id=&amp;quot;filter&amp;quot;&amp;gt;</span></span>
<span class="line"><span>      &amp;lt;option value=&amp;quot;none&amp;quot;&amp;gt;None&amp;lt;/option&amp;gt;</span></span>
<span class="line"><span>      &amp;lt;option value=&amp;quot;blur&amp;quot;&amp;gt;blur&amp;lt;/option&amp;gt;</span></span>
<span class="line"><span>      &amp;lt;option value=&amp;quot;grayscale&amp;quot;&amp;gt;Grayscale&amp;lt;/option&amp;gt;</span></span>
<span class="line"><span>      &amp;lt;option value=&amp;quot;invert&amp;quot;&amp;gt;Invert&amp;lt;/option&amp;gt;</span></span>
<span class="line"><span>      &amp;lt;option value=&amp;quot;sepia&amp;quot;&amp;gt;sepia&amp;lt;/option&amp;gt;</span></span>
<span class="line"><span>  &amp;lt;/select&amp;gt;</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>&amp;lt;/body&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 HTML 代码中定义了以下四种CSS滤镜。</p><ul><li>blur：模糊度</li><li>grayscale：灰度（黑白）</li><li>invert：反转</li><li>sepia：深褐色</li></ul><p>并增加了一个 <code>&amp;lt;select&amp;gt;</code> 标签，以便让用户选择使用不同的滤镜。但最终的控制还是由下面的 JavaScript 脚本来做的，JavaScript 代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>picture.className = filtersSelect.value;</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，只需要这样简单的一行代码，你就可以将不同的滤镜应用于获取的照片上，是不是非常简单？学习完这些，你就可以很快实现你想要的滤镜效果了，赶快上手尝试下吧！</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>本文我向你介绍了如何在浏览器上从视频流中抓取一幅图片，即<strong>照片</strong>。通过上面的介绍，你应该也了解到通过浏览器的 Canvas 来实现这个功能会特别简单。</p><p>在文章的最后，我还讲述了如何通过 CSS 对捕获到的图片做特效处理，当然这种特效是比较简单的实现。如果想实现更多更复杂的效果，就要用 WebGL来实现了。而WebGL的知识相对比较复杂，甚至可以另起一个专栏专门来介绍这部分知识。所以，这里我就不做过多的讲解了，有需要的同学可以自行搜索资料学习。</p><h2 id="思考时间" tabindex="-1"><a class="header-anchor" href="#思考时间"><span>思考时间</span></a></h2><p>文章的最后是通过CSS对照片做了特效处理，但当你将这张照片保存下来，并单独打开后你会发现，之前在浏览器上设置的效果没有了，这是什么原因呢？你要如何来解决该问题呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p><a href="https://github.com/avdance/webrtc_web/tree/master/03_takephoto" target="_blank" rel="noopener noreferrer">所做Demo的GitHub链接（有需要可以点这里）</a></p>`,70)]))}const c=a(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E4%BB%8E0%E6%89%93%E9%80%A0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/WebRTC%201%E5%AF%B91%E9%80%9A%E8%AF%9D/03%20_%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%99%E8%87%AA%E5%B7%B1%E6%8B%8D%E7%85%A7%E5%91%A2%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"在之前的文章中，我向你介绍了如何在浏览器中利用 WebRTC 采集音视频数据。那么，是否可以通过相同的技术进行拍照呢？没错，这是完全可行的。 现代的浏览器功能越来越强大，你不光可以通过它进行拍照，而且还可以对拍下来的照片进行各种滤镜处理。 为了实现上述功能，你需要了解并掌握以下三个知识点： 如何从采集到的视频中获取到图片？ 如何将处理后的图片保存成文件...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E4%BB%8E0%E6%89%93%E9%80%A0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/WebRTC%201%E5%AF%B91%E9%80%9A%E8%AF%9D/03%20_%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%99%E8%87%AA%E5%B7%B1%E6%8B%8D%E7%85%A7%E5%91%A2%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"在之前的文章中，我向你介绍了如何在浏览器中利用 WebRTC 采集音视频数据。那么，是否可以通过相同的技术进行拍照呢？没错，这是完全可行的。 现代的浏览器功能越来越强大，你不光可以通过它进行拍照，而且还可以对拍下来的照片进行各种滤镜处理。 为了实现上述功能，你需要了解并掌握以下三个知识点： 如何从采集到的视频中获取到图片？ 如何将处理后的图片保存成文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.22,"words":3066},"filePathRelative":"posts/从0打造音视频直播系统/WebRTC 1对1通话/03 _ 如何使用浏览器给自己拍照呢？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"03 | 如何使用浏览器给自己拍照呢？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/66/7c/6695e7bc114de236a23942693233777c.mp3\\"></audio></p>\\n<p>在之前的文章中，我向你介绍了如何在浏览器中利用 WebRTC 采集音视频数据。那么，是否可以通过相同的技术进行拍照呢？没错，这是完全可行的。</p>\\n<p>现代的浏览器功能越来越强大，你不光可以通过它进行拍照，而且还可以对拍下来的照片进行各种滤镜处理。</p>","autoDesc":true}');export{c as comp,o as data};
