import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-CrA-f6So.js";const t={};function r(p,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="_09-可变的数据-不要让你的代码-失控" tabindex="-1"><a class="header-anchor" href="#_09-可变的数据-不要让你的代码-失控"><span>09 _ 可变的数据：不要让你的代码“失控”</span></a></h1><p><audio id="audio" title="09 | 可变的数据：不要让你的代码“失控”" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/90/a1/903472701ae42c7535d24a20d9d96aa1.mp3"></audio></p><p>你好，我是郑晔。</p><p>最近几讲，我们讨论的坏味道挑战了很多人的编程习惯，明明很习惯的编码方式，如今却成了坏味道。这一讲，我们再来说一类这样的坏味道：可变的数据。</p><p>对于程序，最朴素的一种认知是“程序=数据结构+算法”，所以，数据几乎是软件开发最核心的一个组成部分。在一些人的认知中，所谓做软件，就是一系列的 CRUD 操作，也就是对数据进行增删改查。再具体一点，写代码就把各种数据拿来，然后改来改去。我们学习编程时，首先学会的，也是给变量赋值，写出类似 <code>a = b + 1</code>之类的代码。</p><p>改数据，几乎已经成了很多程序员写代码的标准做法。然而，这种做法也带来了很多的问题。这一讲，我们还是从一段问题代码开始。</p><h2 id="满天飞的-setter" tabindex="-1"><a class="header-anchor" href="#满天飞的-setter"><span>满天飞的 Setter</span></a></h2><p>还记得我们在<a href="https://time.geekbang.org/column/article/325538" target="_blank" rel="noopener noreferrer">开篇词</a>里提到过的一个坏味道吗？我们复习一下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void approve(final long bookId) {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  book.setReviewStatus(ReviewStatus.APPROVED);</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一段对作品进行审核的代码，通过 bookId，找到对应的作品，接下来，将审核状态设置成了审核通过。</p><p>我当时之所以注意到这段代码，就是因为这里用了 setter。setter 往往是缺乏封装的一种做法。对于缺乏封装的坏味道，我们上节课已经用了一讲的篇幅在说，我提到，很多人在写代码时，写完字段就会利用 IDE 生成 getter，实际情况往往是，生成 getter 的同时，setter 也生成了出来。setter 同 getter 一样，反映的都是对细节的暴露。</p><p>这就意味着，你不仅可以读到一个对象的数据，还可以修改一个对象的数据。<strong>相比于读数据，修改是一个更危险的操作</strong>。</p><p>我在《<a href="https://time.geekbang.org/column/intro/100052601" target="_blank" rel="noopener noreferrer">软件设计之美</a>》专栏里讲函数式编程的不变性时，曾经专门讨论过可变的数据会带来许多问题，简言之，你不知道数据会在哪里被何人以什么方式修改，造成的结果是，别人的修改会让你的代码崩溃。与之相伴的还有各种衍生出来的问题，最常见的就是我们常说的并发问题。</p><p>可变的数据是可怕，但是，<strong>比可变的数据更可怕的是，不可控的变化</strong>，而暴露 setter 就是这种不可控的变化。把各种实现细节完全交给对这个类不了解的使用者去修改，没有人会知道他会怎么改，所以，这种修改完全是不可控的。</p><p><strong>缺乏封装再加上不可控的变化，在我个人心目中，setter 几乎是排名第一的坏味道</strong>。</p><p>在开篇词里，我们针对代码给出的调整方案是，用一个函数替代了 setter，也就是把它用行为封装了起来：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void approve(final long bookId) {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  book.approve();</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在 Book 类里引入了一个 approve 函数，我们将审核状态封装了起来。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class Book {</span></span>
<span class="line"><span>  public void approve() {</span></span>
<span class="line"><span>    this.reviewStatus = ReviewStatus.APPROVED;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为这个类的使用者，你并不需要知道这个类到底是怎么实现的。更重要的是，这里的变化变得可控了。虽然审核状态这个字段还是会修改，但你所有的修改都要通过几个函数作为入口。有任何业务上的调整，都会发生在类的内部，只要保证接口行为不变，就不会影响到其它的代码。</p><p>setter 破坏了封装，相信你对这点已经有了一定的理解。不过，有时候你会说，我这个 setter 只是用在初始化过程中，而并不需要在使用的过程去调用，就像下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Book book = new Book();</span></span>
<span class="line"><span>book.setBookId(bookId);</span></span>
<span class="line"><span>book.setTitle(title);</span></span>
<span class="line"><span>book.setIntroduction(introduction);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，对于这种只在初始化中使用的代码，压根没有必要以 setter 的形式存在，真正需要的是一个有参数的构造函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Book book = new Book(bookId, title, introduction);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>消除 setter ，有一种专门的重构手法，叫做<strong>移除设值函数（Remove Setting Method）</strong>。总而言之，setter 是完全没有必要存在的。</p><p>在今天的软件开发中，人们为了简化代码的编写做出了各种努力，用 IDE 生成的代码是一种，还有一种常见的做法就是，通过工具和框架生成相应代码的。在 Java 世界中，Lombok 就是这样的一种程序库，它可以在编译的过程中生成相应的代码，而我们需要做的，只是在代码上加上对应的 Annotation。它最大的优点是不碍眼，也就是不会产生大量可以看见的代码。因为它的代码是在编译阶段生成的，所以，那些生成的代码在源码级别上是不存在的。下面就是一个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Getter</span></span>
<span class="line"><span>@Setter</span></span>
<span class="line"><span>class Book {</span></span>
<span class="line"><span>  private BookId bookId;</span></span>
<span class="line"><span>  private String title;</span></span>
<span class="line"><span>  private String introduction;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的@Getter 表示为这个类的字段生成 getter，相应地，@Setter 表示生成 setter。也是因为这些 Annotation 的存在，让代码看上去清爽了不少。所以，像 Lombok 这样的程序库赢得了许多人的喜爱。</p><p>不过，我想说的是，不写 setter 的代码并不代表没有 setter。因为@Setter的存在，其它代码还是可以调用这个类的 setter，存在的问题并不会改变。所以，一个更好的做法是禁用@Setter。下面是 lombok.config 的配置，通过它，我们就可以禁用@Setter了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lombok.setter.flagUsage = error</span></span>
<span class="line"><span>lombok.data.flagUsage = error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你或许注意到了，这里除了@Setter，我还禁用了@Data，这是 Lombok 中另外一个 Annotation，表示的是同时生成 getter 和 setter。既然我们禁用@Setter 是为了防止生成 setter，当然也要禁用@Data了。</p><h2 id="可变的数据" tabindex="-1"><a class="header-anchor" href="#可变的数据"><span>可变的数据</span></a></h2><p>我们反对使用 setter，一个重要的原因就是它暴露了数据，我们前面说过，暴露数据造成的问题就在于数据的修改，进而导致出现难以预料的 Bug。在上面的代码中，我们把 setter 封装成一个个的函数，实际上是把不可控的修改限制在一个有限的范围内。</p><p>那么，这个思路再进一步的话，如果我们的数据压根不让修改，犯下各种低级错误的机会就进一步降低了。没错，在这种思路下，<strong>可变数据（Mutable Data）就成了一种坏味道</strong>，这是 Martin Fowler 在新版《<a href="https://book.douban.com/subject/30468597/" target="_blank" rel="noopener noreferrer">重构</a>》里增加的坏味道，它反映着整个行业对于编程的新理解。</p><p>这种想法源自函数式编程这种编程范式。在函数式编程中，数据是建立在不改变的基础上的，如果需要更新，就产生一份新的数据副本，而旧有的数据保持不变。随着函数式编程在软件开发领域中的地位不断提高，人们对于不变性的理解也越发深刻，不变性有效地解决了可变数据产生的各种问题。</p><p>所以，Martin Fowler 在《重构》第二版里新增了可变数据作为一种坏味道，这其实反映了行业的理解也是在逐渐推进的。不过，Martin Fowler 对于可变数据给出的解决方案，基本上是限制对于数据的更新，降低其风险，这与我们前面提到的对 setter 的封装如出一辙。</p><p><strong>解决可变数据，还有一个解决方案是编写不变类。</strong></p><p>我在《<a href="https://time.geekbang.org/column/intro/100052601" target="_blank" rel="noopener noreferrer">软件设计之美</a>》专栏中已经讲过函数式编程的不变性，其中的关键点就是设计不变类。Java 中的 String 类就是一个不变类，比如，如果我们把字符串中的一个字符替换成另一个字符，String 类给出的函数签名是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String replace(char oldChar, char newChar);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义是，这里的替换并不是在原有字符串上进行修改，而是产生了一个新的字符串。</p><p>那么，在实际工作中，我们怎么设计不变类呢？要做到以下三点：</p><ul><li>所有的字段只在构造函数中初始化；</li><li>所有的方法都是纯函数；</li><li>如果需要有改变，返回一个新的对象，而不是修改已有字段。</li></ul><p>回过头来看我们之前改动的“用构造函数消除 setter”的代码，其实就是朝着这个方向在迈进。如果按照这个思路改造我们前面提到的 approve 函数，同样也可以：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class Book {</span></span>
<span class="line"><span>  public void approve() {</span></span>
<span class="line"><span>    return new Book(..., ReviewStatus.APPROVED, ...);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们创建出了一个“其它参数和原有 book 对象一模一样，只是审核状态变成了 APPROVED ”的对象。</p><p>在 JDK 的演化中，我们可以看到一个很明显的趋势，新增的类越来越多地采用了不变类的设计，比如，用来表示时间的类。原来的 Date 类里面还有各种 setter，而新增的 LocalDateTime 则一旦初始化就不会再修改了。如果要操作这个对象，则会产生一个新的对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>LocalDateTime twoDaysLater = now.plusDays(2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就目前的开发状态而言，想要完全消除可变数据是很难做到的，但我们可以尽可能地编写一些不变类。</p><p>一个更实用的做法是，<strong>区分类的性质</strong>。我《<a href="https://time.geekbang.org/column/intro/100052601" target="_blank" rel="noopener noreferrer">软件设计之美</a>》中讲 DDD 的战术设计时提到过，我们最核心要识别的对象分成两种，实体和值对象。<strong>实体对象要限制数据变化，而值对象就要设计成不变类</strong>。</p><p>如果你还想进一步提升自己对于不变性的理解，我们可以回到函数式编程这个编程范式的本质，它其实是对程序中的赋值进行了约束。基于这样的理解，<strong>连赋值本身其实都会被归入到坏味道的提示，这才是真正挑战很多人编程习惯的一点</strong>。</p><p>不过，我们现在看到，越来越多的语言中开始引入值类型，也就是初始化之后便不再改变的值，比如，Java 的 <a href="https://openjdk.java.net/projects/valhalla/" target="_blank" rel="noopener noreferrer">Valhalla 项目</a>，更有甚者，像 Rust 这样的语言中，缺省都是值类型，而如果你需要一个可以赋值的变量，反而要去专门的声明。</p><p>Martin Fowler 在《重构》中还提到一个与数据相关的坏味道：<strong>全局数据（Global Data）</strong>。如果你能够理解可变数据是一种坏味道，全局数据也就很容易理解了，它们处理手法基本上是类似的，这里我就不再做过多的阐述了。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻"><span>总结时刻</span></a></h2><p>今天我们又讲了一类与很多人编程习惯不符的坏味道：可变的数据。</p><p>可变数据最直白的体现就是各种 setter。setter 一方面破坏了封装，另一方面它会带来不可控的修改，给代码增添许多问题。解决它的一种方式就是<strong>移除设值函数（Remove Setting Method）</strong>，将变化限制在一定的范围之内。</p><p>可变数据是《重构》第二版新增的坏味道，这其实反映了软件开发行业的一种进步，它背后的思想是函数式编程所体现的不变性。解决可变数据，一种方式是限制其变化，另一种方式是编写不变类。</p><p>在实践中，完全消除可变数据是很有挑战的。所以，一个实际的做法是，区分类的性质。值对象就要设计成不变类，实体类则要限制数据变化。</p><p>函数式编程的本质是对于赋值进行了约束，我们甚至可以把赋值作为一种坏味道的提示。很多编程语言都引入了值类型，而让变量成为次优选项。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>限制可变的数据</strong>。</p><img src="https://static001.geekbang.org/resource/image/48/18/48f0b0666569522fc97b74cc27ded418.jpg" alt=""><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>这一讲我们讲了可变的数据，你在实际工作遇到过因为数据变动而产生的问题吗？或者你设计过不变类吗？欢迎在留言区分享你的经验。</p><p>参考资料：</p><p><a href="https://time.geekbang.org/column/article/258214" target="_blank" rel="noopener noreferrer">19 | 函数式编程之不变性：怎样保证我的代码不会被别人破坏？</a></p><p><a href="https://time.geekbang.org/column/article/267843" target="_blank" rel="noopener noreferrer">29 | 战术设计：如何像写故事一样找出模型？</a></p>`,65)]))}const d=s(t,[["render",r]]),c=JSON.parse('{"path":"/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91/13%E7%B1%BB%E5%85%B8%E5%9E%8B%E5%9D%8F%E5%91%B3%E9%81%93/09%20_%20%E5%8F%AF%E5%8F%98%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%9A%E4%B8%8D%E8%A6%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%9C%E5%A4%B1%E6%8E%A7%E2%80%9D.html","title":"09 _ 可变的数据：不要让你的代码“失控”","lang":"zh-CN","frontmatter":{"description":"09 _ 可变的数据：不要让你的代码“失控” 你好，我是郑晔。 最近几讲，我们讨论的坏味道挑战了很多人的编程习惯，明明很习惯的编码方式，如今却成了坏味道。这一讲，我们再来说一类这样的坏味道：可变的数据。 对于程序，最朴素的一种认知是“程序=数据结构+算法”，所以，数据几乎是软件开发最核心的一个组成部分。在一些人的认知中，所谓做软件，就是一系列的 CRU...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91/13%E7%B1%BB%E5%85%B8%E5%9E%8B%E5%9D%8F%E5%91%B3%E9%81%93/09%20_%20%E5%8F%AF%E5%8F%98%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%9A%E4%B8%8D%E8%A6%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%9C%E5%A4%B1%E6%8E%A7%E2%80%9D.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"09 _ 可变的数据：不要让你的代码“失控”"}],["meta",{"property":"og:description","content":"09 _ 可变的数据：不要让你的代码“失控” 你好，我是郑晔。 最近几讲，我们讨论的坏味道挑战了很多人的编程习惯，明明很习惯的编码方式，如今却成了坏味道。这一讲，我们再来说一类这样的坏味道：可变的数据。 对于程序，最朴素的一种认知是“程序=数据结构+算法”，所以，数据几乎是软件开发最核心的一个组成部分。在一些人的认知中，所谓做软件，就是一系列的 CRU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09 _ 可变的数据：不要让你的代码“失控”\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":10.83,"words":3250},"filePathRelative":"posts/代码之丑/13类典型坏味道/09 _ 可变的数据：不要让你的代码“失控”.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"09 | 可变的数据：不要让你的代码“失控”\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/90/a1/903472701ae42c7535d24a20d9d96aa1.mp3\\"></audio></p>\\n<p>你好，我是郑晔。</p>\\n<p>最近几讲，我们讨论的坏味道挑战了很多人的编程习惯，明明很习惯的编码方式，如今却成了坏味道。这一讲，我们再来说一类这样的坏味道：可变的数据。</p>\\n<p>对于程序，最朴素的一种认知是“程序=数据结构+算法”，所以，数据几乎是软件开发最核心的一个组成部分。在一些人的认知中，所谓做软件，就是一系列的 CRUD 操作，也就是对数据进行增删改查。再具体一点，写代码就把各种数据拿来，然后改来改去。我们学习编程时，首先学会的，也是给变量赋值，写出类似 <code>a = b + 1</code>之类的代码。</p>","autoDesc":true}');export{d as comp,c as data};
