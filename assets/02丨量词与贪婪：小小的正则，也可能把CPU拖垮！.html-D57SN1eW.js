import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as i,o as n}from"./app-CrA-f6So.js";const p={};function t(r,a){return n(),s("div",null,a[0]||(a[0]=[i(`<h1 id="_02丨量词与贪婪-小小的正则-也可能把cpu拖垮" tabindex="-1"><a class="header-anchor" href="#_02丨量词与贪婪-小小的正则-也可能把cpu拖垮"><span>02丨量词与贪婪：小小的正则，也可能把CPU拖垮！</span></a></h1><p><audio id="audio" title="02丨量词与贪婪：小小的正则，也可能把CPU拖垮！" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/ab/c3/abcd1e70644114b1366756966c5e75c3.mp3"></audio></p><p>你好，我是涂伟忠。在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。</p><p>这些模式会改变正则中量词的匹配行为，比如匹配一到多次；在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误的，这样匹配就达不到期望的效果了。</p><h2 id="为什么会有贪婪与非贪婪模式" tabindex="-1"><a class="header-anchor" href="#为什么会有贪婪与非贪婪模式"><span>为什么会有贪婪与非贪婪模式？</span></a></h2><p>由于本节内容和量词相关的元字符密切相关，所以我们先来回顾一下正则中表示量词的元字符。</p><img src="https://static001.geekbang.org/resource/image/2b/c3/2b03098dcc203c648a40f89a0ba77fc3.png" alt=""><p>在这6种元字符中，我们可以用 {m,n} 来表示 （*）（+）（?） 这3种元字符：</p><img src="https://static001.geekbang.org/resource/image/38/74/38ceb28add7794fe9ed069e08fb1b374.jpg" alt=""><p>表示量词的星号（*）和 加号（+）可能没你想象的那么简单，我用一个例子给你讲解一下。我们先看一下加号（+），使用 a+ 在 aaabb 中查找，可以看到只有一个输出结果：</p><img src="https://static001.geekbang.org/resource/image/2b/08/2b3e3f549e69fdd398c15d6b0bd44e08.png" alt=""><p>对应的Python代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;gt;&amp;gt;&amp;gt; import re</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;a+&#39;, &#39;aaabb&#39;)</span></span>
<span class="line"><span>[&#39;aaa&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加号应该很容易理解，我们再使用 a* 在 aaabb 这个字符串中进行查找，这次我们看到可以找到4个匹配结果。</p><img src="https://static001.geekbang.org/resource/image/b0/4c/b0c582cbf8ec081bc798296b5471804c.png" alt=""><p>使用Python示例如下，我们可以看到输出结果，也是得到了4个匹配结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;gt;&amp;gt;&amp;gt; import re</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;a*&#39;, &#39;aaabb&#39;)</span></span>
<span class="line"><span>[&#39;aaa&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这一次的结果匹配到了三次空字符串。为什么会匹配到空字符串呢？因为星号（*）代表0到多次，匹配0次就是空字符串。到这里，你可能会有疑问，如果这样，aaa 部分应该也有空字符串，为什么没匹配上呢？</p><p>这就引入了我们今天要讲的话题，贪婪与非贪婪模式。这两种模式都必须满足匹配次数的要求才能匹配上。贪婪模式，简单说就是尽可能进行最长匹配。非贪婪模式呢，则会尽可能进行最短匹配。正是这两种模式产生了不同的匹配结果。</p><h2 id="贪婪、非贪婪与独占模式" tabindex="-1"><a class="header-anchor" href="#贪婪、非贪婪与独占模式"><span>贪婪、非贪婪与独占模式</span></a></h2><h3 id="贪婪匹配-greedy" tabindex="-1"><a class="header-anchor" href="#贪婪匹配-greedy"><span>贪婪匹配（Greedy）</span></a></h3><p>首先，我们来看一下贪婪匹配。在正则中，表示次数的量词默认是贪婪的，在贪婪模式下，会尝试尽可能最大长度去匹配。</p><p>首先，我们来看一下在字符串 aaabb 中使用正则 a* 的匹配过程。</p><img src="https://static001.geekbang.org/resource/image/a7/ca/a7d62eee986938327d31e170cdd3caca.jpg" alt=""><img src="https://static001.geekbang.org/resource/image/63/97/63e5c750b66f6eb914c73befdba43f97.jpg" alt=""><p>a* 在匹配开头的 a 时，会尝试尽量匹配更多的 a，直到第一个字母 b 不满足要求为止，匹配上三个a，后面每次匹配时都得到了空字符串。</p><p>相信看到这里你也发现了，贪婪模式的特点就是尽可能进行最大长度匹配。所以要不要使用贪婪模式是根据需求场景来定的。如果我们想尽可能最短匹配呢？那就要用到非贪婪匹配模式了。</p><h3 id="非贪婪匹配-lazy" tabindex="-1"><a class="header-anchor" href="#非贪婪匹配-lazy"><span>非贪婪匹配（Lazy）</span></a></h3><p>那么如何将贪婪模式变成非贪婪模式呢？我们可以在量词后面加上英文的问号(?)，正则就变成了 a*?。此时的匹配结果如下：<br><br><img src="https://static001.geekbang.org/resource/image/10/bc/10e40baa1194b17dcc57a089524a37bc.png" alt=""></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;gt;&amp;gt;&amp;gt; import re</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;a*&#39;, &#39;aaabb&#39;)  # 贪婪模式</span></span>
<span class="line"><span>[&#39;aaa&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;a*?&#39;, &#39;aaabb&#39;) # 非贪婪模式</span></span>
<span class="line"><span>[&#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次我们可以看到，这次匹配到的结果都是单个的a，就连每个a左边的空字符串也匹配上了。</p><p>到这里你可能就明白了，非贪婪模式会尽可能短地去匹配，我把这两者之间的区别写到了下面这张图中。</p><img src="https://static001.geekbang.org/resource/image/3f/d1/3f95a3648980c1eb3c550fb34b46fad1.png" alt=""><p>为了让你加深理解，我们再来看一个示例，这一次让我们查找一下引号中的单词。</p><p>从下面这个示例中，我们可以很容易看出两者对比上的差异。左右的文本是一样的，其中有两对双引号。不同之处在于，左边的示例中，不加问号时正则是贪婪匹配，匹配上了从第一个引号到最后一个引号之间的所有内容；而右边的图是非贪婪匹配，找到了符合要求的结果。</p><img src="https://static001.geekbang.org/resource/image/40/79/40c03d7a2cb990b35e4801589eca1379.png" alt=""><h3 id="独占模式-possessive" tabindex="-1"><a class="header-anchor" href="#独占模式-possessive"><span>独占模式（Possessive）</span></a></h3><p>不管是贪婪模式，还是非贪婪模式，都需要发生回溯才能完成相应的功能。但是在一些场景下，我们不需要回溯，匹配不上返回失败就好了，因此正则中还有另外一种模式，独占模式，它类似贪婪匹配，但匹配过程不会发生回溯，因此在一些场合下性能会更好。</p><p>你可能会问，那什么是回溯呢？我们来看一些例子，例如下面的正则：</p><blockquote></blockquote><p>regex = “xy{1,3}z”</p><blockquote></blockquote><p>text = “xyyz”</p><p>在匹配时，y{1,3}会尽可能长地去匹配，当匹配完 xyy 后，由于 y 要尽可能匹配最长，即三个，但字符串中后面是个 z 就会导致匹配不上，这时候正则就会<strong>向前回溯</strong>，吐出当前字符 z，接着用正则中的 z 去匹配。</p><img src="https://static001.geekbang.org/resource/image/7a/88/7a9636b588963e5af9619837fe5a6888.png" alt=""><p>如果我们把这个正则改成非贪婪模式，如下：</p><blockquote></blockquote><p>regex = “xy{1,3}?z”</p><blockquote></blockquote><p>text = “xyyz”</p><p>由于 y{1,3}? 代表匹配1到3个 y，尽可能少地匹配。匹配上一个 y 之后，也就是在匹配上 text 中的 xy 后，正则会使用 z 和 text 中的 xy 后面的 y 比较，发现正则 z 和 y 不匹配，这时正则就会<strong>向前回溯</strong>，重新查看 y 匹配两个的情况，匹配上正则中的 xyy，然后再用 z 去匹配 text 中的 z，匹配成功。</p><img src="https://static001.geekbang.org/resource/image/21/0c/2177c740a2d5dd805f3157d54636500c.png" alt=""><p>了解了回溯，我们再看下独占模式。</p><p>独占模式和贪婪模式很像，独占模式会尽可能多地去匹配，如果匹配失败就结束，不会进行回溯，这样的话就比较节省时间。具体的方法就是在量词后面加上加号（+）。</p><blockquote></blockquote><p>regex = “xy{1,3}+yz”</p><blockquote></blockquote><p>text = “xyyz”</p><img src="https://static001.geekbang.org/resource/image/96/cb/96635e198c2ff6cf7b8ea2a0d18f8ecb.png" alt=""><p>需要注意的是 Python 和 Go 的标准库目前都不支持独占模式，会报错，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;gt;&amp;gt;&amp;gt; import re</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;xy{1,3}+yz&#39;, &#39;xyyz&#39;)</span></span>
<span class="line"><span>error: multiple repeat at position 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错显示，加号（+）被认为是重复次数的元字符了。如果要测试这个功能，我们可以安装 PyPI 上的 regex 模块。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>注意：需要先安装 regex 模块，pip install regex</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; import regex</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; regex.findall(r&#39;xy{1,3}z&#39;, &#39;xyyz&#39;)  # 贪婪模式</span></span>
<span class="line"><span>[&#39;xyyz&#39;]</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; regex.findall(r&#39;xy{1,3}+z&#39;, &#39;xyyz&#39;) # 独占模式</span></span>
<span class="line"><span>[&#39;xyyz&#39;]</span></span>
<span class="line"><span>&amp;gt;&amp;gt;&amp;gt; regex.findall(r&#39;xy{1,2}+yz&#39;, &#39;xyyz&#39;) # 独占模式</span></span>
<span class="line"><span>[]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 Java 或 Perl 等其它语言来测试独占模式，查阅相关文档，看一下你所用的语言对独占模式的支持程度。</p><p>如果你用 a{1,3}+ab 去匹配 aaab 字符串，a{1,3}+ 会把前面三个 a 都用掉，并且不会回溯，这样字符串中内容只剩下 b 了，导致正则中加号后面的 a 匹配不到符合要求的内容，匹配失败。如果是贪婪模式 a{1,3} 或非贪婪模式 a{1,3}? 都可以匹配上。</p><img src="https://static001.geekbang.org/resource/image/1d/b7/1dbf7d9fed42390edb3bf9ef9e0da7b7.jpg" alt=""><p>这里我简单总结一下，独占模式性能比较好，可以节约匹配的时间和CPU资源，但有些情况下并不能满足需求，要想使用这个模式还要看具体需求（比如我们接下来要讲的案例），另外还得看你当前使用的语言或库的支持程度。</p><h2 id="正则回溯引发的血案" tabindex="-1"><a class="header-anchor" href="#正则回溯引发的血案"><span>正则回溯引发的血案</span></a></h2><p>学习到了这里，你是不是觉得自己对贪婪模式、非贪婪模式，以及独占模式比较了解了呢？其实在使用过程中稍不留神，就容易出问题，在网上可以看到不少因为回溯引起的线上问题。</p><p>这里我们挑选一个比较出名的，是阿里技术微信公众号上的发文。Lazada卖家中心店铺名检验规则比较复杂，名称中可以出现下面这些组合：</p><li> 英文字母大小写； </li><li> 数字； </li><li> 越南文； </li><li> 一些特殊字符，如“&amp;”，“-”，“_”等。 </li><p>负责开发的小伙伴在开发过程中使用了正则来实现店铺名称校验，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^([A-Za-z0-9._()&amp;amp;&#39;\\- ]|[aAàÀảẢãÃáÁạẠăĂằẰẳẲẵẴắẮặẶâÂầẦẩẨẫẪấẤậẬbBcCdDđĐeEèÈẻẺẽẼéÉẹẸêÊềỀểỂễỄếẾệỆfFgGhHiIìÌỉỈĩĨíÍịỊjJkKlLmMnNoOòÒỏỎõÕóÓọỌôÔồỒổỔỗỖốỐộỘơƠờỜởỞỡỠớỚợỢpPqQrRsStTuUùÙủỦũŨúÚụỤưƯừỪửỬữỮứỨựỰvVwWxXyYỳỲỷỶỹỸýÝỵỴzZ])+$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个正则比较长，但很好理解，中括号里面代表多选一，我们简化一下，就成下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^([符合要求的组成1]|[符合要求的组成2])+$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>脱字符（^）代表以这个正则开头，美元符号（$）代表以正则结尾，我们后面会专门进行讲解。这里可以先理解成整个店铺名称要能匹配上正则，即起到验证的作用。</p><p>你需要留意的是，正则中有个加号（+），表示前面的内容出现一到多次，进行贪婪匹配，这样会导致大量回溯，占用大量CPU资源，引发线上问题，我们只需要将贪婪模式改成独占模式就可以解决这个问题。</p><p>我之前说过，要根据具体情况来选择合适的模式，在这个例子中，匹配不上时证明店铺名不合法，不需要进行回溯，因此我们可以使用独占模式，但要注意并不是说所有的场合都可以用独占模式解决，我们要首先保证正则能满足功能需求。</p><p>仔细再看一下 这个正则，你会发现 “组成1” 和 “组成2” 部分中，A-Za-z 英文字母在两个集合里面重复出现了，这会导致回溯后的重复判断。这里要强调一下，并不是说有回溯就会导致问题，你应该尽量减少回溯后的计算量，这些在后面的原理讲解中我们会进一步学习。</p><p>另外，腾讯云技术社区​也有类似的技术文章，你如果感兴趣，可以点击这里<a href="https://zhuanlan.zhihu.com/p/38229530" target="_blank" rel="noopener noreferrer">进行</a>查看。</p><p>说到这里，你是不是想起了课程开篇里面提到的一句话：</p><blockquote></blockquote><p>如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。</p><blockquote></blockquote><p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p><p>所以一个小小的正则，有些时候也可能会把CPU拖垮，这也提醒我们在写正则的时候，一定要思考下回溯问题，避免使用低效的正则，引发线上问题。</p><h2 id="最后总结" tabindex="-1"><a class="header-anchor" href="#最后总结"><span>最后总结</span></a></h2><p>最后我来给你总结一下：正则中量词默认是贪婪匹配，如果想要进行非贪婪匹配需要在量词后面加上问号。贪婪和非贪婪匹配都可能会进行回溯，独占模式也是进行贪婪匹配，但不进行回溯，因此在一些场景下，可以提高匹配的效率，具体能不能用独占模式需要看使用的编程语言的类库的支持情况，以及独占模式能不能满足需求。</p><img src="https://static001.geekbang.org/resource/image/1a/75/1ad3eb0d011ba4fc972b9e5191a9f275.png" alt=""><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>最后，我们来做一个小练习吧。</p><p>有一篇英文文章，里面有很多单词，单词和单词之间是用空格隔开的，在引号里面的一到多个单词表示特殊含义，即引号里面的多个单词要看成一个单词。现在你需要提取出文章中所有的单词。我们可以假设文章中除了引号没有其它的标点符号，有什么方法可以解决这个问题呢？如果用正则来解决，你能不能写出一个正则，提取出文章中所有的单词呢（不要求结果去重）？</p><blockquote></blockquote><p>we found “the little cat” is in the hat, we like “the little cat”</p><blockquote></blockquote><p>其中 the little cat 需要看成一个单词</p><p>好了，今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我参与讨论，并把文章分享给你的朋友或者同事，一起交流一下。</p>`,100)]))}const d=e(p,[["render",t]]),o=JSON.parse('{"path":"/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E8%AF%BE/%E5%9F%BA%E7%A1%80%E7%AF%87/02%E4%B8%A8%E9%87%8F%E8%AF%8D%E4%B8%8E%E8%B4%AA%E5%A9%AA%EF%BC%9A%E5%B0%8F%E5%B0%8F%E7%9A%84%E6%AD%A3%E5%88%99%EF%BC%8C%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%8A%8ACPU%E6%8B%96%E5%9E%AE%EF%BC%81.html","title":"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！","lang":"zh-CN","frontmatter":{"description":"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！ 你好，我是涂伟忠。在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。 这些模式会改变正则中量词的匹配行为，比如匹配一到多次；在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E8%AF%BE/%E5%9F%BA%E7%A1%80%E7%AF%87/02%E4%B8%A8%E9%87%8F%E8%AF%8D%E4%B8%8E%E8%B4%AA%E5%A9%AA%EF%BC%9A%E5%B0%8F%E5%B0%8F%E7%9A%84%E6%AD%A3%E5%88%99%EF%BC%8C%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%8A%8ACPU%E6%8B%96%E5%9E%AE%EF%BC%81.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！"}],["meta",{"property":"og:description","content":"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！ 你好，我是涂伟忠。在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。 这些模式会改变正则中量词的匹配行为，比如匹配一到多次；在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":10.84,"words":3253},"filePathRelative":"posts/正则表达式入门课/基础篇/02丨量词与贪婪：小小的正则，也可能把CPU拖垮！.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"02丨量词与贪婪：小小的正则，也可能把CPU拖垮！\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/ab/c3/abcd1e70644114b1366756966c5e75c3.mp3\\"></audio></p>\\n<p>你好，我是涂伟忠。在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。</p>\\n<p>这些模式会改变正则中量词的匹配行为，比如匹配一到多次；在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误的，这样匹配就达不到期望的效果了。</p>","autoDesc":true}');export{d as comp,o as data};
