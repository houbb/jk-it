import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-6Bz2fGO5.js";const r={};function t(l,a){return i(),n("div",null,a[0]||(a[0]=[e(`<p><audio id="audio" title="06 | 基础语法与类型变量：Dart是如何表示信息的？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/8f/ed/8ff65be9ccafd9ee7e4e4f05ae7dd2ed.mp3"></audio></p><p>你好，我是陈航。</p><p>在专栏的第2篇预习文章“<a href="https://time.geekbang.org/column/article/104071" target="_blank" rel="noopener noreferrer">Dart语言概览</a>”中，我们简单地认识了Dart这门优秀的程序语言。那么，Dart与其他语言究竟有什么不同呢？在已有其他编程语言经验的基础上，我又如何快速上手呢？</p><p>今天，我们就从编程语言中最重要的组成部分，也就是基础语法与类型变量出发，一起来学习Dart吧。</p><h2 id="dart初体验" tabindex="-1"><a class="header-anchor" href="#dart初体验"><span>Dart初体验</span></a></h2><p>为了简单地体验一下Dart，我们打开浏览器，直接在<a href="https://repl.it/languages/dart" target="_blank" rel="noopener noreferrer">repl.it</a> 新建一个main.dart文件就可以了（当然，你也可以在电脑安装Dart SDK，体验最新的语法）。</p><p>下面是一个基本的hello world示例，我声明了一个带int参数的函数，并通过字符串内嵌表达式的方式把这个参数打印出来：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>printInteger(int a) {</span></span>
<span class="line"><span>  print(&#39;Hello world, this is $a.&#39;); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main() {</span></span>
<span class="line"><span>  var number = 2019; </span></span>
<span class="line"><span>  printInteger(number); </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在编辑器中点击“run”按钮，命令行就会输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello world, this is 2019.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>和绝大多数编译型语言一样，Dart要求以main函数作为执行的入口。</p><p>在知道了如何简单地运行Dart代码后，我们再来看一下Dart的基本变量类型。</p><h2 id="dart的变量与类型" tabindex="-1"><a class="header-anchor" href="#dart的变量与类型"><span>Dart的变量与类型</span></a></h2><p>在Dart中，我们可以用var或者具体的类型来声明一个变量。当使用var定义变量时，表示类型是交由编译器推断决定的，当然你也可以用静态类型去定义变量，更清楚地跟编译器表达你的意图，这样编辑器和编译器就能使用这些静态类型，向你提供代码补全或编译警告的提示了。</p><p>在默认情况下，未初始化的变量的值都是null，因此我们不用担心无法判定一个传递过来的、未定义变量到底是undefined，还是烫烫烫而写一堆冗长的判断语句了。</p><p>Dart是类型安全的语言，并且所有类型都是对象类型，都继承自顶层类型Object，因此一切变量的值都是类的实例（即对象），甚至数字、布尔值、函数和null也都是继承自Object的对象。</p><p>Dart内置了一些基本类型，如 num、bool、String、List和Map，在不引入其他库的情况下可以使用它们去声明变量。下面，我将逐一和你介绍。</p><h3 id="num、bool与string" tabindex="-1"><a class="header-anchor" href="#num、bool与string"><span>num、bool与String</span></a></h3><p>作为编程语言中最常用的类型，num、bool、String这三种基本类型被我放到了一起来介绍。</p><p><strong>Dart的数值类型num，只有两种子类</strong>：即64位int和符合IEEE 754标准的64位double。前者代表整数类型，而后者则是浮点数的抽象。在正常情况下，它们的精度与取值范围就足够满足我们的诉求了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int x = 1;</span></span>
<span class="line"><span>int hex = 0xEEADBEEF;</span></span>
<span class="line"><span>double y = 1.1;</span></span>
<span class="line"><span>double exponents = 1.13e5;</span></span>
<span class="line"><span>int roundY = y.round();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了常见的基本运算符，比如+、-、*、/，以及位运算符外，你还能使用继承自num的 abs()、round()等方法，来实现求绝对值、取整的功能。</p><p>实际上，你打开官方文档或查看源码，就会发现这些常见的运算符也是继承自num：</p><img src="https://static001.geekbang.org/resource/image/37/10/37958a8f0953edace700f29c0f820d10.png" alt=""><p>如果还有其他高级运算方法的需求num无法满足，你可以试用一下dart:math库。这个库提供了诸如三角函数、指数、对数、平方根等高级函数。</p><p><strong>为了表示布尔值，Dart使用了一种名为bool的类型</strong>。在Dart里，只有两个对象具有bool类型：true和false，它们都是编译时常量。</p><p>Dart是类型安全的，因此我们不能使用<strong>if(nonbooleanValue)</strong> 或**assert(nonbooleanValue)**之类的在JavaScript可以正常工作的代码，而应该显式地检查值。</p><p>如下所示，检查变量是否为0，在Dart中需要显示地与0做比较：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 检查是否为0.</span></span>
<span class="line"><span>var number = 0;</span></span>
<span class="line"><span>assert(number == 0);</span></span>
<span class="line"><span>// assert(number); 错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**Dart的String由UTF-16的字符串组成。**和JavaScript一样，构造字符串字面量时既能使用单引号也能使用双引号，还能在字符串中嵌入变量或表达式：你可以使用 <strong>\${express}</strong> 把一个表达式的值放进字符串。而如果是一个标识符，你可以省略{}。</p><p>下面这段代码就是内嵌表达式的例子。我们把单词’cat’转成大写放入到变量s1的声明中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var s = &#39;cat&#39;;</span></span>
<span class="line"><span>var s1 = &#39;this is a uppercased string: \${s.toUpperCase()}&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了获得内嵌对象的字符串，Dart会调用对象的**toString()**方法。而常见字符串的拼接，Dart则通过内置运算符“+”实现。比如，下面这条语句会如你所愿声明一个值为’Hello World!&#39;的字符串：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var s2 = &#39;Hello&#39; + &#39; &#39; + &#39;World!&#39; ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于多行字符串的构建，你可以通过三个单引号或三个双引号的方式声明，这与Python是一致的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var s3 = &amp;quot;&amp;quot;&amp;quot;This is a</span></span>
<span class="line"><span>multi-line string.&amp;quot;&amp;quot;&amp;quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list与map" tabindex="-1"><a class="header-anchor" href="#list与map"><span>List与Map</span></a></h3><p>其他编程语言中常见的数组和字典类型，在Dart中的对应实现是List和Map，统称为集合类型。它们的声明和使用很简单，和JavaScript中的用法类似。</p><p>接下来，我们一起看一段代码示例。</p><ul><li>在代码示例的前半部分，我们声明并初始化了两个List变量，在第二个变量中添加了一个新的元素后，调用其迭代方法依次打印出其内部元素；</li><li>在代码示例的后半部分，我们声明并初始化了两个Map变量，在第二个变量中添加了两个键值对后，同样调用其迭代方法依次打印出其内部元素。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var arr1 = [&amp;quot;Tom&amp;quot;, &amp;quot;Andy&amp;quot;, &amp;quot;Jack&amp;quot;];</span></span>
<span class="line"><span>var arr2 = List.of([1,2,3]);</span></span>
<span class="line"><span>arr2.add(499);</span></span>
<span class="line"><span>arr2.forEach((v) =&amp;gt; print(&#39;\${v}&#39;));</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>var map1 = {&amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &#39;sex&#39;: &#39;male&#39;}; </span></span>
<span class="line"><span>var map2 = new Map();</span></span>
<span class="line"><span>map2[&#39;name&#39;] = &#39;Tom&#39;;</span></span>
<span class="line"><span>map2[&#39;sex&#39;] = &#39;male&#39;;</span></span>
<span class="line"><span>map2.forEach((k,v) =&amp;gt; print(&#39;\${k}: \${v}&#39;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器里的元素也需要有类型，比如上述代码中arr2的类型是<strong>List&lt;int&gt;</strong>，map2的类型则为<strong>Map&lt;String, String&gt;</strong>。Dart会自动根据上下文进行类型推断，所以你后续往容器内添加的元素也必须遵照这一类型。</p><p>如果编译器自动推断的类型不符合预期，我们当然可以在声明时显式地把类型标记出来，不仅可以让代码提示更友好一些，更重要的是可以让静态分析器帮忙检查字面量中的错误，解除类型不匹配带来的安全隐患或是Bug。</p><p>以上述代码为例，如果往arr2集合中添加一个浮点数<strong>arr2.add(1.1)</strong>，尽管语义上合法，但编译器会提示类型不匹配，从而导致编译失败。</p><p>和Java语言类似，在初始化集合实例对象时，你可以为它的类型添加约束，也可以用于后续判断集合类型。</p><p>下面的这段代码，在增加了类型约束后，语义是不是更清晰了？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var arr1 = &amp;lt;String&amp;gt;[&#39;Tom&#39;, &#39;Andy&#39;, &#39;Jack&#39;];</span></span>
<span class="line"><span>var arr2 = new List&amp;lt;int&amp;gt;.of([1,2,3]);</span></span>
<span class="line"><span>arr2.add(499);</span></span>
<span class="line"><span>arr2.forEach((v) =&amp;gt; print(&#39;\${v}&#39;));</span></span>
<span class="line"><span>print(arr2 is List&amp;lt;int&amp;gt;); // true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var map1 = &amp;lt;String, String&amp;gt;{&#39;name&#39;: &#39;Tom&#39;,&#39;sex&#39;: &#39;male&#39;,};</span></span>
<span class="line"><span>var map2 = new Map&amp;lt;String, String&amp;gt;();</span></span>
<span class="line"><span>map2[&#39;name&#39;] = &#39;Tom&#39;;</span></span>
<span class="line"><span>map2[&#39;sex&#39;] = &#39;male&#39;;</span></span>
<span class="line"><span>map2.forEach((k,v) =&amp;gt; print(&#39;\${k}: \${v}&#39;)); </span></span>
<span class="line"><span>print(map2 is Map&amp;lt;String, String&amp;gt;); // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量定义" tabindex="-1"><a class="header-anchor" href="#常量定义"><span>常量定义</span></a></h3><p>如果你想定义不可变的变量，则需要在定义变量前加上final或const关键字：</p><ul><li>const，表示变量在编译期间即能确定的值；</li><li>final则不太一样，用它定义的变量可以在运行时确定值，而一旦确定后就不可再变。</li></ul><p>声明const常量与final常量的典型例子，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>final name = &#39;Andy&#39;;</span></span>
<span class="line"><span>const count = 3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var x = 70;  </span></span>
<span class="line"><span>var y = 30;</span></span>
<span class="line"><span>final z = x / y;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，const适用于定义编译常量（字面量固定值）的场景，而final适用于定义运行时常量的场景。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过上面的介绍，相信你已经对Dart的基本语法和类型系统有了一个初步的印象。这些初步的印象，有助于你理解Dart语言设计的基本思路，在已有编程语言经验的基础上快速上手。</p><p>而对于流程控制语法：如<strong>if-else、for</strong>、<strong>while</strong>、<strong>do-while</strong>、<strong>break/continue、switch-case、assert</strong>，由于与其他编程语言类似，在这里我就不做一一介绍了，更多的Dart语言特性需要你在后续的使用过程中慢慢学习。在我们使用Dart的过程中，<a href="https://api.dartlang.org/stable/2.2.0/index.html" target="_blank" rel="noopener noreferrer">官方文档</a>是我们最重要的学习参考资料。</p><p>恭喜你！你现在已经迈出了Dart语言学习的第一步。接下来，我们简单回顾一下今天的内容，以便加深记忆与理解：</p><ul><li>在Dart中，所有类型都是对象类型，都继承自顶层类型Object，因此一切变量都是对象，数字、布尔值、函数和null也概莫能外；</li><li>未初始化变量的值都是null；</li><li>为变量指定类型，这样编辑器和编译器都能更好地理解你的意图。</li></ul><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>对于集合类型List和Map，如何让其内部元素支持多种类型（比如，int、double）呢？又如何在遍历集合时，判断究竟是何种类型呢？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p>`,61)]))}const o=s(r,[["render",t]]),c=JSON.parse('{"path":"/posts/Flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/Dart%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/06%20_%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%EF%BC%9ADart%E6%98%AF%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是陈航。 在专栏的第2篇预习文章“Dart语言概览”中，我们简单地认识了Dart这门优秀的程序语言。那么，Dart与其他语言究竟有什么不同呢？在已有其他编程语言经验的基础上，我又如何快速上手呢？ 今天，我们就从编程语言中最重要的组成部分，也就是基础语法与类型变量出发，一起来学习Dart吧。 Dart初体验 为了简单地体验一下Dart，我们打开浏...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/Dart%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/06%20_%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%EF%BC%9ADart%E6%98%AF%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是陈航。 在专栏的第2篇预习文章“Dart语言概览”中，我们简单地认识了Dart这门优秀的程序语言。那么，Dart与其他语言究竟有什么不同呢？在已有其他编程语言经验的基础上，我又如何快速上手呢？ 今天，我们就从编程语言中最重要的组成部分，也就是基础语法与类型变量出发，一起来学习Dart吧。 Dart初体验 为了简单地体验一下Dart，我们打开浏..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":8.24,"words":2473},"filePathRelative":"posts/Flutter核心技术与实战/Dart语言基础/06 _ 基础语法与类型变量：Dart是如何表示信息的？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"06 | 基础语法与类型变量：Dart是如何表示信息的？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/8f/ed/8ff65be9ccafd9ee7e4e4f05ae7dd2ed.mp3\\"></audio></p>\\n<p>你好，我是陈航。</p>\\n<p>在专栏的第2篇预习文章“<a href=\\"https://time.geekbang.org/column/article/104071\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dart语言概览</a>”中，我们简单地认识了Dart这门优秀的程序语言。那么，Dart与其他语言究竟有什么不同呢？在已有其他编程语言经验的基础上，我又如何快速上手呢？</p>","autoDesc":true}');export{o as comp,c as data};
