import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,o as s}from"./app-6Bz2fGO5.js";const t={};function l(p,e){return s(),n("div",null,e[0]||(e[0]=[i(`<p><audio id="audio" title="浏览器DOM：你知道HTML的节点有哪几种吗？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a1/67/a16b18d28c0998406b2c8ebe703f1b67.mp3"></audio></p><p>你好，我是winter。</p><p>今天我们进入浏览器API的学习, 这一节课，我们来学习一下DOM API。</p><p>DOM API是最早被设计出来的一批API，也是用途最广的API，所以早年的技术社区，常常用DOM来泛指浏览器中所有的API。不过今天这里我们要介绍的DOM，指的就是狭义的文档对象模型。</p><h2 id="dom-api介绍" tabindex="-1"><a class="header-anchor" href="#dom-api介绍"><span>DOM API介绍</span></a></h2><p>首先我们先来讲一讲什么叫做文档对象模型。</p><p>顾名思义，文档对象模型是用来描述文档，这里的文档，是特指HTML文档（也用于XML文档，但是本课不讨论XML）。同时它又是一个“对象模型”，这意味着它使用的是对象这样的概念来描述HTML文档。</p><p>说起HTML文档，这是大家最熟悉的东西了，我们都知道，HTML文档是一个由标签嵌套而成的树形结构，因此，DOM也是使用树形的对象模型来描述一个HTML文档。</p><p>DOM API大致会包含4个部分。</p><ul><li>节点：DOM树形结构中的节点相关API。</li><li>事件：触发和监听事件相关API。</li><li>Range：操作文字范围相关API。</li><li>遍历：遍历DOM需要的API。</li></ul><p>事件相关API和事件模型，我们会用单独的课程讲解，所以我们本篇文章重点会为你介绍节点和遍历相关API。</p><p>DOM API 数量很多，我希望给你提供一个理解DOM API设计的思路，避免单靠机械的方式去死记硬背。</p><h3 id="节点" tabindex="-1"><a class="header-anchor" href="#节点"><span>节点</span></a></h3><p>DOM的树形结构所有的节点有统一的接口Node，我们按照继承关系，给你介绍一下节点的类型。</p><img src="https://static001.geekbang.org/resource/image/6e/f6/6e278e450d8cc7122da3616fd18b9cf6.png" alt=""><p>在这些节点中，除了Document和DocumentFrangment，都有与之对应的HTML写法，我们可以看一下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Element: &amp;lt;tagname&amp;gt;...&amp;lt;/tagname&amp;gt;</span></span>
<span class="line"><span>Text: text</span></span>
<span class="line"><span>Comment: &amp;lt;!-- comments --&amp;gt;</span></span>
<span class="line"><span>DocumentType: &amp;lt;!Doctype html&amp;gt;</span></span>
<span class="line"><span>ProcessingInstruction: &amp;lt;?a 1?&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在编写HTML代码并且运行后，就会在内存中得到这样一棵DOM树，HTML的写法会被转化成对应的文档模型，而我们则可以通过JavaScript等语言去访问这个文档模型。</p><p>这里我们每天都需要用到，要重点掌握的是：Document、Element、Text节点。</p><p>DocumentFragment也非常有用，它常常被用来高性能地批量添加节点。因为Comment、DocumentType和ProcessingInstruction很少需要运行时去修改和操作，所以有所了解即可。</p><h3 id="node" tabindex="-1"><a class="header-anchor" href="#node"><span>Node</span></a></h3><p>Node是DOM树继承关系的根节点，它定义了DOM节点在DOM树上的操作，首先，Node提供了一组属性，来表示它在DOM树中的关系，它们是：</p><ul><li>parentNode</li><li>childNodes</li><li>firstChild</li><li>lastChild</li><li>nextSibling</li><li>previousSibling</li></ul><p>从命名上，我们可以很清晰地看出，这一组属性提供了前、后、父、子关系，有了这几个属性，我们可以很方便地根据相对位置获取元素。当然，Node中也提供了操作DOM树的API，主要有下面几种。</p><ul><li>appendChild</li><li>insertBefore</li><li>removeChild</li><li>replaceChild</li></ul><p>这个命名跟上面一样，我们基本可以知道API的作用。这几个API的设计可以说是饱受诟病。其中最主要的批评是它不对称——只有before，没有after，而jQuery等框架都对其做了补充。</p><p>实际上，appendChild和insertBefore的这个设计，是一个“最小原则”的设计，这两个API是满足插入任意位置的必要API，而insertAfter，则可以由这两个API实现出来。</p><p>我个人其实不太喜欢这个设计，对我而言，insertAt(pos) 更符合审美一些。当然，不论喜不喜欢，这个标准已经确定，我们还是必须要掌握它。</p><p>这里从设计的角度还想要谈一点，那就是，所有这几个修改型的API，全都是在父元素上操作的，比如我们要想实现“删除一个元素的上一个元素”，必须要先用parentNode获取其父元素。</p><p>这样的设计是符合面向对象的基本原则的。还记得我们在JavaScript对象部分讲的对象基本特征吗？“拥有哪些子元素”是父元素的一种状态，所以修改状态，应该是父元素的行为。这个设计我认为是DOM API中好的部分。</p><p>到此为止，Node提供的API已经可以很方便（大概吧）地对树进行增、删、遍历等操作了。</p><p>除此之外，Node还提供了一些高级API，我们来认识一下它们。</p><ul><li>compareDocumentPosition 是一个用于比较两个节点中关系的函数。</li><li>contains 检查一个节点是否包含另一个节点的函数。</li><li>isEqualNode 检查两个节点是否完全相同。</li><li>isSameNode 检查两个节点是否是同一个节点，实际上在JavaScript中可以用“===”。</li><li>cloneNode 复制一个节点，如果传入参数true，则会连同子元素做深拷贝。</li></ul><p>DOM标准规定了节点必须从文档的create方法创建出来，不能够使用原生的JavaScript的new运算。于是document对象有这些方法。</p><ul><li>createElement</li><li>createTextNode</li><li>createCDATASection</li><li>createComment</li><li>createProcessingInstruction</li><li>createDocumentFragment</li><li>createDocumentType</li></ul><p>上面的这些方法都是用于创建对应的节点类型。你可以自己尝试一下。</p><h2 id="element-与-attribute" tabindex="-1"><a class="header-anchor" href="#element-与-attribute"><span>Element 与 Attribute</span></a></h2><p>Node提供了树形结构上节点相关的操作。而大部分时候，我们比较关注的是元素。Element表示元素，它是Node的子类。</p><p>元素对应了HTML中的标签，它既有子节点，又有属性。所以Element子类中，有一系列操作属性的方法。</p><p>我们需要注意，对DOM而言，Attribute和Property是完全不同的含义，只有特性场景下，两者才会互相关联（这里在后面我会详细讲解，今天的文章里我就不展开了）。</p><p>首先，我们可以把元素的Attribute当作字符串来看待，这样就有以下的API：</p><ul><li>getAttribute</li><li>setAttribute</li><li>removeAttribute</li><li>hasAttribute</li></ul><p>如果你追求极致的性能，还可以把Attribute当作节点：</p><ul><li>getAttributeNode</li><li>setAttributeNode</li></ul><p>此外，如果你喜欢property一样的访问attribute，还可以使用 attributes 对象，比如 document.body.attributes.class = “a” 等效于 document.body.setAttribute(“class”, “a”)。</p><h3 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素"><span>查找元素</span></a></h3><p>document节点提供了查找元素的能力。比如有下面的几种。</p><ul><li>querySelector</li><li>querySelectorAll</li><li>getElementById</li><li>getElementsByName</li><li>getElementsByTagName</li><li>getElementsByClassName</li></ul><p>我们需要注意，getElementById、getElementsByName、getElementsByTagName、getElementsByClassName，这几个API的性能高于querySelector。</p><p>而 getElementsByName、getElementsByTagName、getElementsByClassName 获取的集合并非数组，而是一个能够动态更新的集合。</p><p>我们看一个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var collection = document.getElementsByClassName(&#39;winter&#39;);</span></span>
<span class="line"><span>console.log(collection.length);</span></span>
<span class="line"><span>var winter = document.createElement(&#39;div&#39;);</span></span>
<span class="line"><span>winter.setAttribute(&#39;class&#39;, &#39;winter&#39;)</span></span>
<span class="line"><span>document.documentElement.appendChild(winter)</span></span>
<span class="line"><span>console.log(collection.length);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们先获取了页面的className为winter的元素集合，不出意外的话，应该是空。</p><p>我们通过console.log可以看到集合的大小为0。之后我们添加了一个class为winter的div，这时候我们再看集合，可以发现，集合中出现了新添加的元素。</p><p>这说明浏览器内部是有高速的索引机制，来动态更新这样的集合的。所以，尽管querySelector系列的API非常强大，我们还是应该尽量使用getElement系列的API。</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h2><p>前面已经提到过，通过Node的相关属性，我们可以用JavaScript遍历整个树。实际上，DOM API中还提供了NodeIterator 和 TreeWalker 来遍历树。</p><p>比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p><p>NodeIterator的基本用法示例如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, false);</span></span>
<span class="line"><span>var node;</span></span>
<span class="line"><span>while(node = iterator.nextNode())</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    console.log(node);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个API的设计非常老派，这么讲的原因主要有两点，一是循环并没有类似“hasNext”这样的方法，而是直接以nextNode返回null来标志结束，二是第二个参数是掩码，这两个设计都是传统C语言里比较常见的用法。</p><p>放到今天看，这个迭代器无法匹配JavaScript的迭代器语法，而且JavaScript位运算并不高效，掩码的设计就徒增复杂性了。</p><p>这里请你注意一下这个例子中的处理方法，通常掩码型参数，我们都是用按位或运算来叠加。而针对这种返回null表示结束的迭代器，我使用了在while循环条件中赋值，来保证循环次数和调用next次数严格一致（但这样写可能违反了某些编码规范）。</p><p>我们再来看一下TreeWalker的用法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, null, false)</span></span>
<span class="line"><span>var node;</span></span>
<span class="line"><span>while(node = walker.nextNode())</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    if(node.tagName === &amp;quot;p&amp;quot;)</span></span>
<span class="line"><span>        node.nextSibling();</span></span>
<span class="line"><span>    console.log(node);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比起NodeIterator，TreeWalker多了在DOM树上自由移动当前节点的能力，一般来说，这种API用于“跳过”某些节点，或者重复遍历某些节点。</p><p>总的来说，我个人不太喜欢TreeWalker和NodeIterator这两个API，建议需要遍历DOM的时候，直接使用递归和Node的属性。</p><h2 id="range" tabindex="-1"><a class="header-anchor" href="#range"><span>Range</span></a></h2><p>Range API 是一个比较专业的领域，如果不做富文本编辑类的业务，不需要太深入。这里我们就仅介绍概念和给出基本用法的示例，你只要掌握即可。</p><p>Range API 表示一个HTML上的范围，这个范围是以文字为最小单位的，所以Range不一定包含完整的节点，它可能是Text节点中的一段，也可以是头尾两个Text的一部分加上中间的元素。</p><p>我们通过 Range API 可以比节点 API 更精确地操作 DOM 树，凡是 节点 API 能做到的，Range API都可以做到，而且可以做到更高性能，但是 Range API 使用起来比较麻烦，所以在实际项目中，并不常用，只有做底层框架和富文本编辑对它有强需求。</p><p>创建Range一般是通过设置它的起止来实现，我们可以看一个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var range = new Range(),</span></span>
<span class="line"><span>    firstText = p.childNodes[1],</span></span>
<span class="line"><span>    secondText = em.firstChild</span></span>
<span class="line"><span>range.setStart(firstText, 9) // do not forget the leading space</span></span>
<span class="line"><span>range.setEnd(secondText, 4)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，通过 Range 也可以从用户选中区域创建，这样的Range用于处理用户选中区域:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var range = document.getSelection().getRangeAt(0);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更改 Range 选中区段内容的方式主要是取出和插入，分别由extractContents和insertNode来实现。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var fragment = range.extractContents()</span></span>
<span class="line"><span>range.insertNode(document.createTextNode(&amp;quot;aaaa&amp;quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们看一个完整的例子。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var range = new Range(),</span></span>
<span class="line"><span>    firstText = p.childNodes[1],</span></span>
<span class="line"><span>    secondText = em.firstChild</span></span>
<span class="line"><span>range.setStart(firstText, 9) // do not forget the leading space</span></span>
<span class="line"><span>range.setEnd(secondText, 4)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var fragment = range.extractContents()</span></span>
<span class="line"><span>range.insertNode(document.createTextNode(&amp;quot;aaaa&amp;quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子展示了如何使用range来取出元素和在特定位置添加新元素。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在今天的文章中，我们一起了解了DOM API的内容。DOM API大致会包含4个部分。</p><ul><li>节点：DOM树形结构中的节点相关API。</li><li>事件：触发和监听事件相关API。</li><li>Range：操作文字范围相关API。</li><li>遍历：遍历DOM需要的API。</li></ul><p>DOM API中还提供了NodeIterator 和 TreeWalker 来遍历树。比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p><p>除此之外，我们还谈到了Range的一些基础知识点，这里你掌握即可。</p><p>最后，我给你留了一个题目，请你用DOM API来实现遍历整个DOM树，把所有的元素的tagName打印出来。</p><h3 id="补充阅读-命名空间" tabindex="-1"><a class="header-anchor" href="#补充阅读-命名空间"><span>补充阅读：命名空间</span></a></h3><p>我们本课介绍的所有API，特意忽略了命名空间。</p><p>在HTML场景中，需要考虑命名空间的场景不多。最主要的场景是SVG。创建元素和属性相关的API都有带命名空间的版本：</p><ul><li><p>document</p></li><li><p>createElementNS</p></li><li><p>createAttributeNS</p></li><li><p>getAttributeNS</p></li><li><p>setAttributeNS</p></li><li><p>getAttributeNodeNS</p></li><li><p>setAttributeNodeNS</p></li><li><p>removeAttributeNS</p></li><li><p>hasAttributeNS</p></li><li><p>attributes.setNamedItemNS</p></li><li><p>attributes.getNamedItemNS</p></li><li><p>attributes.removeNamedItemNS</p></li></ul><p>若要创建Document或者Doctype，也必须要考虑命名空间问题。DOM要求从document.implementation来创建。</p><ul><li>document.implementation.createDocument</li><li>document.implementation.createDocumentType</li></ul><p>除此之外，还提供了一个快捷方式，你也可以动手尝试一下。</p><ul><li>document.implementation.createHTMLDocument</li></ul><h1 id="猜你喜欢" tabindex="-1"><a class="header-anchor" href="#猜你喜欢"><span>猜你喜欢</span></a></h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>`,96)]))}const o=a(t,[["render",l]]),c=JSON.parse('{"path":"/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%B8%89%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8EAPI/%E6%B5%8F%E8%A7%88%E5%99%A8DOM%EF%BC%9A%E4%BD%A0%E7%9F%A5%E9%81%93HTML%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%90%97%EF%BC%9F.html","title":"猜你喜欢","lang":"zh-CN","frontmatter":{"description":"你好，我是winter。 今天我们进入浏览器API的学习, 这一节课，我们来学习一下DOM API。 DOM API是最早被设计出来的一批API，也是用途最广的API，所以早年的技术社区，常常用DOM来泛指浏览器中所有的API。不过今天这里我们要介绍的DOM，指的就是狭义的文档对象模型。 DOM API介绍 首先我们先来讲一讲什么叫做文档对象模型。 顾...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%B8%89%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8EAPI/%E6%B5%8F%E8%A7%88%E5%99%A8DOM%EF%BC%9A%E4%BD%A0%E7%9F%A5%E9%81%93HTML%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"猜你喜欢"}],["meta",{"property":"og:description","content":"你好，我是winter。 今天我们进入浏览器API的学习, 这一节课，我们来学习一下DOM API。 DOM API是最早被设计出来的一批API，也是用途最广的API，所以早年的技术社区，常常用DOM来泛指浏览器中所有的API。不过今天这里我们要介绍的DOM，指的就是狭义的文档对象模型。 DOM API介绍 首先我们先来讲一讲什么叫做文档对象模型。 顾..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"猜你喜欢\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.11,"words":3034},"filePathRelative":"posts/重学前端/模块三：浏览器实现原理与API/浏览器DOM：你知道HTML的节点有哪几种吗？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"浏览器DOM：你知道HTML的节点有哪几种吗？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a1/67/a16b18d28c0998406b2c8ebe703f1b67.mp3\\"></audio></p>\\n<p>你好，我是winter。</p>\\n<p>今天我们进入浏览器API的学习, 这一节课，我们来学习一下DOM API。</p>\\n<p>DOM API是最早被设计出来的一批API，也是用途最广的API，所以早年的技术社区，常常用DOM来泛指浏览器中所有的API。不过今天这里我们要介绍的DOM，指的就是狭义的文档对象模型。</p>","autoDesc":true}');export{o as comp,c as data};
