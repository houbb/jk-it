import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-CrA-f6So.js";const p={};function t(l,a){return i(),e("div",null,a[0]||(a[0]=[n(`<h1 id="_05-经验总结-如何给你的代码起好名字" tabindex="-1"><a class="header-anchor" href="#_05-经验总结-如何给你的代码起好名字"><span>05 _ 经验总结：如何给你的代码起好名字？</span></a></h1><p><audio id="audio" title="05 | 经验总结：如何给你的代码起好名字？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/02/38/023c6cf24a09291b116399de57677f38.mp3"></audio></p><p>上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。”</p><p>之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。</p><p>给小孩取过名字的人都知道，取个好名字有多难，又要合八字，又要算五行，还要避尊者讳。 写程序给代码取名字更难，每天都要想很多名字。给孩子取名字，父母喜欢就行，给代码取名字，还要别人也喜欢。</p><h2 id="为什么需要一个好名字" tabindex="-1"><a class="header-anchor" href="#为什么需要一个好名字"><span>为什么需要一个好名字？</span></a></h2><p>名字要准确地代表它背后的东西，并且还能让代码干净漂亮。不然，我们的思路就会受到干扰，影响我们的思考和心情。</p><p>比如说，对于答案只有是与非两个选择的时候，我们通常使用布尔类型（boolean）。所以，取名字的时候，我们通常需要一个表达疑问的前缀，比如是不是“is”。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public boolean isEmpty();     // String.isEmpty()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但如果我们把这样的疑问前缀，使用到一个非布尔类型上，会有什么效果？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public byte[] isEmpty();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你是不是觉得如鲠在喉，对于代码要干什么百思不得其解？ 反正，我写这个例子的时候，感觉像是吃了五百只苍蝇！</p><p>名字就是沟通的方式，错误的命名很难让我们清楚地理解代码真实的意图。所以，混淆的命名很难让我们阅读和理解代码。</p><p>虽然编译器不关心命名的好坏，但是我们却可以从一个好名字中获得巨大的好处。</p><h2 id="为什么需要命名规范" tabindex="-1"><a class="header-anchor" href="#为什么需要命名规范"><span>为什么需要命名规范？</span></a></h2><p>虽然起一个好名字的重要性不言而喻，但命名规范的选择，以及执行程度，却是一个有争议的话题。有人喜欢这种规范，有人喜欢那种规范，有人干脆认为规范都太教条，真是众口难调。此外，即使已知且明确定义了命名规范，某些组织也无法始终如一地遵守它们，从而导致不一致和混淆。如果命名规范内部不一致，任意且难以记忆，这些挑战还会加剧。</p><p>所以使用一个好的命名规范是非常重要的，我们都能获得哪些好处呢？</p><li> 为标识符提供附加的信息，赋予标识符现实意义。帮助我们理顺编码的逻辑，减少阅读和理解代码的工作量； </li><li> 使代码审核变得更有效率，专注于更重要的问题，而不是争论语法和命名规范这类小细节，提高开发效率； </li><li> 提高代码的清晰度、可读性以及美观程度； </li><li> 避免不同产品之间的命名冲突。 </li><h2 id="有哪些常见的命名方法" tabindex="-1"><a class="header-anchor" href="#有哪些常见的命名方法"><span>有哪些常见的命名方法？</span></a></h2><p>尽管不同的编程环境、不同编程语言也需要沟通，但遗憾的是，到目前为止，还没有一种通用的命名方法。 在不同的场景下，程序员们有着不同的偏好。我们需要阅读很多代码，多了解一些命名方法，这样我们才能更好地理解不同风格的代码。</p><p>我来一一介绍下几种常见的命名方法。</p><p><strong>1.驼峰命名法（CamelCase）</strong></p><p>驼峰命名法指的是使用大小写混合的格式，单词之间不使用空格隔开或者连接字符连接的命名方式。它有两种格式：大驼峰命名法（UpperCamelCase）和小驼峰命名法（lowerCamelCase）。</p><p>大驼峰命名法的第一个单词以大写字母开始，其余的和小驼峰命名法相同。 比如：LastName, InputStream。</p><p>小驼峰命名法的第一个单词以小写字母开始，其他单词以大写字母开始，其余字母使用小写字母。 比如：firstName, toString。</p><p>有时候，一个名字可能有不只一种合理形式，比如缩略语（IPv6）或者异常的结构（iOS)。 为了减少这种不确定性，Google定义了以下的转换规则：</p><li> 从正常的表达形式开始，把短语转换成ASCII码，并且移除单引号。 例如，“Müller’s algorithm”转换为“Muellers algorithm”； </li><li> 如果上述结果含有其他标点符号，比如连字符，在该符号处，把这个结果切分成单词形式。 如果某个单词已经是驼峰形式，也相应地切分开来。 例如，“AdWords”切分成“ad words”，“non-current assets”切分成“non current assets”； </li><li> 将所有字母转换为小写字母，然后将每个单词的首字母大写，这样就得到了大驼峰式命名的形式； 如果第一个单词的首字母小写，就得到了小驼峰式命名的形式； </li><li> 将所有的单词连在一起，就是最后的标识符命名。 </li><p>下面的表格列出了不同例子的正确转换形式，和容易出错的转换形式 （出自“Google Java Style Guide”）。</p><p><img src="https://static001.geekbang.org/resource/image/f2/1d/f28217dc672df8bc968eccb57ce19c1d.png" alt=""><br><br><strong>2.蛇形命名法（snake_case）</strong></p><p>在蛇形命名法中，单词之间通过下划线“_”连接，比如“out_of_range”。</p><p><strong>3.串式命名法（kebab-case）</strong></p><p>在蛇形命名法中，单词之间通过连字符“-”连接，比如“background-color”。</p><p><strong>4.匈牙利命名法</strong></p><p>在匈牙利命名法中，标识符由一个或者多个小写字母开始，这些字母用来标识标识符的类型或者用途。标识符的剩余部分，可以采取其他形式的命名法，比如大驼峰命名法。</p><p>如果起始的小字母用来表示标识符的数据类型，这种命名法也被称为系统匈牙利命名法。 比如：</p><li> lAccountNum标识一个_长整数_（首字母“l”，long）。 </li><li> szName标识一个_零字符结束的字符串_（首字母“sz”，zero-terminated string）。 </li><p>如果起始的小字母用来表示标识符的实际用途，这种命名法也被称为应用匈牙利命名法。 比如：</p><li> rwPosition标识一个_行_（首字母“rw”，row）。 </li><li> usName标识一个_非安全字符串_（首字母“us”, unsafe string）。 </li><p>由于在微软产品中的广泛使用，匈牙利命名法曾经是一种流行的命名形式。然而，由于这种命名会带来不必要的记忆负担和阅读障碍，导致命名规则的执行和名称的维护都很困难，微软已经抛弃了这种命名形式。</p><p>由于历史的原因，还有很多代码使用这种命名形式。阅读这些代码时，你可以选择性地忽略这些表示类型或者用途的字母前缀。</p><h2 id="java命名规范" tabindex="-1"><a class="header-anchor" href="#java命名规范"><span>Java命名规范</span></a></h2><p>一段代码，是不是只能使用一种命名方法？ 一般来说，一个编码规范会组合使用这些命名方法，每一种命名方法都被规定了适用的范围。 这样就形成了命名规范。</p><p>比如，Java的命名规范可以使用下表来表示。</p><img src="https://static001.geekbang.org/resource/image/19/b1/19cd98970ceceaed8247a586ba3895b1.png" alt=""><p>需要注意的是，常量必须是真的不能改变的量，不打算改变或者能够改变的量都不能算作常量。</p><p>比如，下面的例子声明的是常量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static final short MAX_VALUE = 32767;</span></span>
<span class="line"><span>static final Set&amp;lt;String&amp;gt; EMPTY_NAMES =</span></span>
<span class="line"><span>        Collections.unmodifiableSet(Collections.emptySet());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的例子声明的就不是常量，它们的值都可以改变：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static short nonFinalShort = 32767;</span></span>
<span class="line"><span>static final Set&amp;lt;String&amp;gt; mutableNames = Collections.emptySet();</span></span>
<span class="line"><span>static final String[] names = { &amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Tom&amp;quot; };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，方法标识符使用动词或者动词短语，这是传统的方法命名。如果能够分隔开配置（set）和使用（get），使用名词的方法标识符。比如Builder模式的接口设计。这个接口设计和命名惯例，我们以后再讨论。</p><h2 id="怎么取好名字" tabindex="-1"><a class="header-anchor" href="#怎么取好名字"><span>怎么取好名字？</span></a></h2><p>了解了命名方法后，你是不是想知道怎么取好名字呢？一般来说，给代码取名字，需要遵守如下三条原则。</p><p><strong>1.要有准确的意义</strong></p><p>名字要能够准确、完整地表达出它代表的意义，可以见字知意，名副其实。</p><p>比如，表达式“a = b - c”的语法是没有什么问题，可是该表达式代表的实际含义并不清楚。相比而言，“grossIncome = grossRevene - costOfGoodsSold”就有很准确、清晰的现实意义。这样的命名更容易阅读和理解。</p><img src="https://static001.geekbang.org/resource/image/07/43/077720a9965c6daf354a3bc2518e4843.png" alt=""><p><strong>2.严格遵守命名规范</strong></p><p>不同的编程环境，偏爱不同的命名规范，比如Java倾向于使用驼峰命名法，C语言倾向于使用蛇形命名法，CSS使用串式命名法。 尽管如此，如果定义了个性化的命名规范，请严格遵守自定义的命名规范，如果没有定义个性化的命名规范，我们就需要严格遵守业界普遍公认的命名规范。</p><p><img src="https://static001.geekbang.org/resource/image/75/e3/7510f9e45dffa6664c410d0e72b534e3.png" alt=""><br><br><strong>3.可读性优先</strong></p><p>名字的可读性一定要优先考虑，一般需要注意以下几点。</p><li> 可读性强的名字优先于简短的名字，尽量使用完整的词汇。 </li><li> 不要使用缩写、简写、缩略词，除非这些词语被广泛使用。 </li><li> 不要使用太短的名字，比如一个字母，除非是广泛接受的特例（i/j/k/m/n表示临时使用的整数，c/d/e表示临时使用的字符）。 </li><li> 避免含糊、混淆或者误导。 </li><p>另外，不要混合使用英文和汉语拼音。由于很多类库使用的是英文，如果使用汉语拼音命名，会造成事实上的拼音名字与英文名字的混用，所以也要尽量避免使用拼音命名。</p><img src="https://static001.geekbang.org/resource/image/99/16/99fbf25bc5c0aedb88cefe76c67d7816.png" alt=""><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>简言之，取名字要做到“信、达、雅”（准确、直观、优美）。“信”和“达”是基本要求，有才气的你可以有“雅”的追求。</p><p>取好名字是编写优秀代码最基础也是最重要的一项修炼。 你不妨试试上述的原则和规范，将它们用于新代码，或者整理老代码。 仅仅因为名字的优化，你就会立刻感受到代码质量的大幅度提升！</p><h2 id="一起来动手" tabindex="-1"><a class="header-anchor" href="#一起来动手"><span>一起来动手</span></a></h2><p>所以为了让你更好地实践，我找了一段Java代码。你来试试，这段代码中有哪些名字可以优化？ 欢迎你把优化的代码发在评论里，我们亲自感受下如何优化代码名字。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.HashMap;</span></span>
<span class="line"><span>import java.util.Map;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Solution {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Given an array of integers, return indices of the two numbers</span></span>
<span class="line"><span>     * such that they add up to a specific target.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public int[] twoSum(int[] nums, int target) {</span></span>
<span class="line"><span>        Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();</span></span>
<span class="line"><span>        for (int i = 0; i &amp;lt; nums.length; i++) {</span></span>
<span class="line"><span>            int complement = target - nums[i];</span></span>
<span class="line"><span>            if (map.containsKey(complement)) {</span></span>
<span class="line"><span>                return new int[] { map.get(complement), i };</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            map.put(nums[i], i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        throw new IllegalArgumentException(&amp;quot;No two sum solution&amp;quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：代码选自<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/two-sum/</a></p><p>你也可以把这篇文章分享给你的朋友或者同事，一起来讨论一下这道小小的练习题。</p>`,82)]))}const c=s(p,[["render",t]]),d=JSON.parse('{"path":"/posts/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/%E7%AC%AC%E4%B8%80%E6%A8%A1%E5%9D%97%EF%BC%9A%E4%BB%A3%E7%A0%81%E2%80%9C%E8%A7%84%E8%8C%83%E2%80%9D%E7%AF%87/05%20_%20%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B5%B7%E5%A5%BD%E5%90%8D%E5%AD%97%EF%BC%9F.html","title":"05 _ 经验总结：如何给你的代码起好名字？","lang":"zh-CN","frontmatter":{"description":"05 _ 经验总结：如何给你的代码起好名字？ 上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。” 之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/%E7%AC%AC%E4%B8%80%E6%A8%A1%E5%9D%97%EF%BC%9A%E4%BB%A3%E7%A0%81%E2%80%9C%E8%A7%84%E8%8C%83%E2%80%9D%E7%AF%87/05%20_%20%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B5%B7%E5%A5%BD%E5%90%8D%E5%AD%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"05 _ 经验总结：如何给你的代码起好名字？"}],["meta",{"property":"og:description","content":"05 _ 经验总结：如何给你的代码起好名字？ 上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。” 之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05 _ 经验总结：如何给你的代码起好名字？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":9.86,"words":2959},"filePathRelative":"posts/代码精进之路/第一模块：代码“规范”篇/05 _ 经验总结：如何给你的代码起好名字？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"05 | 经验总结：如何给你的代码起好名字？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/02/38/023c6cf24a09291b116399de57677f38.mp3\\"></audio></p>\\n<p>上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。”</p>\\n<p>之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。</p>","autoDesc":true}');export{c as comp,d as data};
