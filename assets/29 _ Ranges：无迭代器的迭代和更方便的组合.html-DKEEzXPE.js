import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-CrA-f6So.js";const p={};function l(d,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_29-ranges-无迭代器的迭代和更方便的组合" tabindex="-1"><a class="header-anchor" href="#_29-ranges-无迭代器的迭代和更方便的组合"><span>29 _ Ranges：无迭代器的迭代和更方便的组合</span></a></h1><p><audio id="audio" title="29 | Ranges：无迭代器的迭代和更方便的组合" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/79/15/797ba11446ee824f9da51c53914f8715.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>今天，我们继续上一讲开始的话题，讨论 ranges（范围）。</p><h2 id="ranges-简介" tabindex="-1"><a class="header-anchor" href="#ranges-简介"><span>Ranges 简介</span></a></h2><p>像下面这样的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iterator&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  using namespace std;</span></span>
<span class="line"><span>  int a[] = {1, 7, 3, 6,</span></span>
<span class="line"><span>             5, 2, 4, 8};</span></span>
<span class="line"><span>  copy(begin(a), end(a),</span></span>
<span class="line"><span>       ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>         std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>  sort(begin(a), end(a));</span></span>
<span class="line"><span>  copy(begin(a), end(a),</span></span>
<span class="line"><span>       ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>         std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该已经见到过好多次了。有没有觉得这个代码有点重复、有点无聊呢？尤其是里面的 <code>begin</code> 和 <code>end</code>？</p><p>很多人都留意到了迭代器虽然灵活，但不是一个足够高级的抽象——尤其是我们已经对 C 数组都可以进行基于“范围”的循环之后。如果我们把数组看作一个抽象的“范围”，我们就可以得到下面的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;experimental/ranges/algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;experimental/ranges/iterator&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  using namespace std::</span></span>
<span class="line"><span>    experimental::ranges;</span></span>
<span class="line"><span>  int a[] = {1, 7, 3, 6,</span></span>
<span class="line"><span>             5, 2, 4, 8};</span></span>
<span class="line"><span>  copy(a, ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>            std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>  sort(a);</span></span>
<span class="line"><span>  copy(a, ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>            std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是真正可以编译的代码，用我们上一讲讲过的环境——最新版的 MSVC（编译命令行上需要额外加 <code>/permissive-</code> 选项）或 GCC 7+——都可以。不过，这一次即使最新版的 MSVC 也不能靠编译器本身支持 ranges 库的所有特性了：在两种环境下我们都必须使用 CMCSTL2 [1]，也只能（在 C++20 之前临时）使用 <code>std::experimental::ranges</code> 而不是 <code>std::ranges</code>。注意我只引入了 <code>ranges</code> 名空间，而没有引入 <code>std</code> 名空间，这是因为 <code>copy</code>、<code>sort</code> 等名称同时出现在了这两个名空间里，同时引入两个名空间会在使用 <code>sort</code> 等名字时导致冲突。</p><p>这个程序的输出，当然是毫不意外的：</p><blockquote></blockquote><p>\`1 7 3 6 5 2 4 8\`<br> \`1 2 3 4 5 6 7 8\`</p><p>下面我们看“视图”。比如下面的代码展示了一个反转的视图：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;experimental/ranges/algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;experimental/ranges/iterator&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;experimental/ranges/ranges&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  using namespace std::</span></span>
<span class="line"><span>    experimental::ranges;</span></span>
<span class="line"><span>  int a[] = {1, 7, 3, 6,</span></span>
<span class="line"><span>             5, 2, 4, 8};</span></span>
<span class="line"><span>  copy(a, ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>            std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>  auto r = reverse_view(a);</span></span>
<span class="line"><span>  copy(r, ostream_iterator&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>            std::cout, &quot; &quot;));</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序的输出是：</p><blockquote></blockquote><p>\`1 7 3 6 5 2 4 8\`<br> \`8 4 2 5 6 3 7 1\`</p><p>为什么 <code>r</code> 是视图，而不是反向复制出的内容？我们可以在输出 <code>r</code> 之前（15行之后，16行之前）插入下面这行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  a[0] = 9;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以看到最后那行输出变成了：</p><blockquote></blockquote><p><code>8 4 2 5 6 3 7 9</code></p><p>这就证明了，<code>r</code> 没有复制 <code>a</code> 的内容。</p><p>视图的大小也不一定跟原先的“范围”一样。下面是我们在<a href="https://time.geekbang.org/column/article/185189" target="_blank" rel="noopener noreferrer">[第 17 讲]</a> 讨论过的过滤视图在 ranges 里的实现的用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  auto r =</span></span>
<span class="line"><span>    filter_view(a, [](int i) {</span></span>
<span class="line"><span>      return i % 2 == 0;</span></span>
<span class="line"><span>    });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿这个来替换上面用到 <code>reverse_view</code> 的那行，我们就能得到：</p><blockquote></blockquote><p><code>6 2 4 8</code></p><p>这些视图还能进行组合：我们可以写 <code>reverse_view(filter_view(…))</code>。不过，在组合的情况下，下面这样的写法（使用 <code>|</code> 和视图适配器）可能更清晰些：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  auto r = a |</span></span>
<span class="line"><span>           views::filter([](int i) {</span></span>
<span class="line"><span>             return i % 2 == 0;</span></span>
<span class="line"><span>           }) |</span></span>
<span class="line"><span>           views::reverse;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序的执行结果是：</p><blockquote></blockquote><p><code>8 4 2 6</code></p><p>如果你用过 Unix 的管道符，你一定会觉得这种写法非常自然、容易组合吧……</p><h2 id="范围相关的概念" tabindex="-1"><a class="header-anchor" href="#范围相关的概念"><span>范围相关的概念</span></a></h2><p>整个 ranges 库是基于概念来定义的。下面这张图展示了 range 相关的概念：</p><img src="https://static001.geekbang.org/resource/image/e5/f9/e5a943a0f87d8c796fe3c78dabf524f9.png" alt=""><p>从图的右下角，我们可以看到上一讲讨论过的几个概念，包括 copyable 和 semiregular。再往上，我们看到了 view——视图——也看到了视图是一个 range。现在我们就先来看一下 range 和 view 的定义。</p><p>在 CMCSTL2 里，range 是这样定义的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept _RangeImpl =</span></span>
<span class="line"><span>  requires(T&amp;amp;&amp;amp; t) {</span></span>
<span class="line"><span>    begin(static_cast&amp;lt;T&amp;amp;&amp;amp;&amp;gt;(t));</span></span>
<span class="line"><span>    end(static_cast&amp;lt;T&amp;amp;&amp;amp;&amp;gt;(t));</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template&amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept range = _RangeImpl&amp;lt;T&amp;amp;&amp;gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换句话说，一个 range 允许执行 <code>begin</code> 和 <code>end</code> 操作（注意这是在 <code>ranges</code> 名空间下的 <code>begin</code> 和 <code>end</code>，和 <code>std</code> 下的有些小区别）。所以，一个数组，一个容器，通常也能当作一个 range。</p><p>我们已经提到了视图，我们接下来就看一下 view 的定义：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept view =</span></span>
<span class="line"><span>  range&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  semiregular&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  enable_view&amp;lt;__uncvref&amp;lt;T&amp;gt;&amp;gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，view 首先是一个 range，其次它是 semiregular，也就是，可以被移动和复制（对 range 没有这个要求）。然后 <code>enable_view</code> 是个实现提供的概念，它的实际要求就是，视图应该不是一个容器，可以在 O(1) 复杂度完成拷贝或移动操作。我们常用的 <code>string</code> 满足 range，不满足 view；而 <code>string_view</code> 则同时满足 range 和 view。</p><p>下面，我们看 common_range，它的意思是这是个普通的 range，对其应用 <code>begin()</code> 和 <code>end()</code>，结果是同一类型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept common_range =</span></span>
<span class="line"><span>  range&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  same_as&amp;lt;iterator_t&amp;lt;T&amp;gt;,</span></span>
<span class="line"><span>          sentinel_t&amp;lt;T&amp;gt;&amp;gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，sized_range 的意思就是这个 range 是有大小的，可以取出其大小（注意我们刚才的 <code>filter_view</code> 就是没有大小的）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept sized_range =</span></span>
<span class="line"><span>  range&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  requires(T&amp;amp; r) { size(r); };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然，output_range 的意思是这个 range 的迭代器满足输出迭代器的条件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class R, class T&amp;gt;</span></span>
<span class="line"><span>concept output_range =</span></span>
<span class="line"><span>  range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  output_iterator&amp;lt;iterator_t&amp;lt;R&amp;gt;, T&amp;gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，input_range 的意思是这个 range 的迭代器满足输入迭代器的条件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T&amp;gt;</span></span>
<span class="line"><span>concept input_range =</span></span>
<span class="line"><span>  range&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</span></span>
<span class="line"><span>  input_iterator&amp;lt;iterator_t&amp;lt;T&amp;gt;&amp;gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再往上的这些概念，我想我就不用再啰嗦了……</p><h3 id="sentinel" tabindex="-1"><a class="header-anchor" href="#sentinel"><span>Sentinel</span></a></h3><p>我估计其他概念你理解起来应该问题不大，但 common_range 也许会让有些人迷糊：什么样的 range 会<strong>不</strong>是 common_range 呢？</p><p>答案是，有些 range 的结束点，不是固定的位置，而是某个条件：如遇到 0，或者某个谓词满足了 10 次之后……从 C++17 开始，基于范围的 for 循环也接受 <code>begin</code> 和 <code>end</code> 的结果不是同一类型了——我们把前者返回的结果类型叫 iterator（迭代器），而把后者返回的结果类型叫 sentinel（标记）。</p><p>下面展示了一个实际的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;experimental/ranges/algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;experimental/ranges/iterator&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std::experimental::</span></span>
<span class="line"><span>  ranges;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct null_sentinel {};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;input_iterator I&amp;gt;</span></span>
<span class="line"><span>bool operator==(I i, null_sentinel)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return *i == 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;input_iterator I&amp;gt;</span></span>
<span class="line"><span>bool operator==(null_sentinel, I i)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return *i == 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;input_iterator I&amp;gt;</span></span>
<span class="line"><span>bool operator!=(I i, null_sentinel)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return *i != 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;input_iterator I&amp;gt;</span></span>
<span class="line"><span>bool operator!=(null_sentinel, I i)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return *i != 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main(int argc, char* argv[])</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  if (argc != 2) {</span></span>
<span class="line"><span>    std::cout &amp;lt;&amp;lt; &quot;Please provide &quot;</span></span>
<span class="line"><span>                 &quot;an argument!&quot;</span></span>
<span class="line"><span>              &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>    return 1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for_each(argv[1], null_sentinel(),</span></span>
<span class="line"><span>           [](char ch) {</span></span>
<span class="line"><span>             std::cout &amp;lt;&amp;lt; ch;</span></span>
<span class="line"><span>           });</span></span>
<span class="line"><span>  std::cout &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个程序里，<code>null_sentinel</code> 就是一个“空值标记”。这个类型存在的唯一意义，就是允许 <code>==</code> 和 <code>!=</code> 根据重载规则做一些特殊的事情：在这里，就是判断当前迭代器指向的位置是否为 0。上面程序的执行结果是把命令行上传入的第一个参数输出到终端上。</p><h2 id="概念测试" tabindex="-1"><a class="header-anchor" href="#概念测试"><span>概念测试</span></a></h2><p>我们现在对概念来做一下检查，看看常用的一些容器和视图满足哪些 ranges 里的概念。</p><img src="https://static001.geekbang.org/resource/image/36/5b/3628cbde0fa893b5d9df888db085c65b.png" alt=""><p>这张表里没有什么意外的东西。除了 view，<code>vector&amp;lt;int&amp;gt;</code> 满足所有的 range 概念。另外，<code>const vector&amp;lt;int&amp;gt;</code> 不能满足 output_range，不能往里写内容，也一切正常。</p><img src="https://static001.geekbang.org/resource/image/93/a5/930d8b0e7d11be467eed5e12b98f0aa5.png" alt=""><p>这张表，同样表达了我们已知的事实：<code>list</code> 不满足 random_access_range 和 contiguous_range。</p><img src="https://static001.geekbang.org/resource/image/1a/f4/1a575d6630dcbf2efdb5d41d229577f4.png" alt=""><p>这张表，说明了从 range 的角度，C 数组和 <code>vector</code> 是没啥区别的。</p><img src="https://static001.geekbang.org/resource/image/64/e7/64c011b79225c8c4b37353ec374321e7.png" alt=""><p>这张就有点意思了，展示了反转视图的特点。我们可以看到它几乎和原始容器可满足的概念一样，就多了 view，少了 contiguous_range。应该没有让你感到意外的内容吧。</p><img src="https://static001.geekbang.org/resource/image/84/71/8447ab67eefb08e389a8fabfcbeca371.png" alt=""><p>但过滤视图就不一样了：我们不能预知元素的数量，所以它不能满足 sized_range。</p><img src="https://static001.geekbang.org/resource/image/0f/94/0f7b3cededc2309d97e146e5cd566294.png" alt=""><p>我们前面说过，istream_line_reader 的迭代器是输入迭代器，所以它也只能是个 input_range。我们在设计上对 <code>begin()</code> 和 <code>end</code> 的返回值采用了相同的类型，因此它仍是个 common_range。用 take_view 可以取一个范围的前若干项，它就不是一个 commom_range 了。因为输入可能在到达预定项数之前结束，所以它也不是 sized_range。</p><img src="https://static001.geekbang.org/resource/image/9e/08/9e77c25703ecfb51783ebbf604930708.png" alt=""><p>我们再来介绍一个新的视图，<code>iota_view</code>。它代表一个从某个数开始的递增序列。单参数的 <code>iota_view</code> 是无穷序列，双参数的是有限序列，从它们能满足的概念上就能看出来。这儿比较有趣的事实是，虽然 <code>iota_view(0, 5)</code> 和 <code>iota_view(0) | take(5)</code> 的结果相同，都是序列 {0, 1, 2, 3, 4}，但编译器看起来，前者比后者要多满足两个概念。这应该也不难理解。</p><h2 id="抽象和性能" tabindex="-1"><a class="header-anchor" href="#抽象和性能"><span>抽象和性能</span></a></h2><p>说了这么多，你可能还是有点好奇，那 ranges 的用途是什么呢？为了少写 <code>begin()</code> 和 <code>end()</code>？为了方便函数式编程？</p><p>当然，上面的说法都对，但最基本的目的，还是为了抽象和表达能力。我们可以看一眼下面的 Python 代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reduce(lambda x, y: x + y,</span></span>
<span class="line"><span>       map(lambda x: x * x, range(1, 101)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该不难看出，这个表达式做的是 $1<sup>2+2</sup>2+3<sup>2+\\dots+100</sup>2$。C++ 里我们该怎么做呢？</p><p>当然，手工循环是可以的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>auto square = [](int x) {</span></span>
<span class="line"><span>  return x * x;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int sum = 0;</span></span>
<span class="line"><span>for (int i = 1; i &amp;lt; 101; ++i) {</span></span>
<span class="line"><span>  sum += square(i);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比起 Python 的代码来，似乎上面这个写法有点啰嗦？我们试试使用 ranges：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int sum = nvwa::reduce(</span></span>
<span class="line"><span>  std::plus&amp;lt;int&amp;gt;(),</span></span>
<span class="line"><span>  views::iota(1, 101) |</span></span>
<span class="line"><span>    views::transform(</span></span>
<span class="line"><span>      [](int x) { return x * x; }));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我不知道你喜不喜欢上面这个表达方式，但它至少能在单个表达式里完成同样的功能。唯一遗憾的是，标准算法 <code>accumulate</code> 或 <code>reduce</code> 在上面不可用（没有针对 ranges 的改造），我只好拿我的非标 <code>reduce</code> [2] 来凑凑数了。</p><p>同样重要的是，上面的代码性能很高……多高呢？看下面这行汇编输出的代码就知道了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>movl	$338350, -4(%rbp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="ranges-名空间" tabindex="-1"><a class="header-anchor" href="#ranges-名空间"><span>ranges 名空间</span></a></h2><p>我们现在再来看一下 ranges 名空间（我们目前代码里的 <code>std::experimental::ranges</code>，C++20 的 <code>std::ranges</code>）。这个名空间有 ranges 特有的内容：</p><ul><li>视图（如 <code>reverse_view</code>）和视图适配器（如 <code>views::reverse</code>）</li><li>ranges 相关的概念（如 <code>range</code>、<code>view</code> 等）</li></ul><p>但也有些名称是从 <code>std</code> 名空间“复制”过来的，包括：</p><ul><li>标准算法（如 <code>copy</code>、<code>transform</code>、<code>sort</code>、<code>all_of</code>、<code>for_each</code> 等；但是，如前面所说，没有 <code>accumulate</code> 或 <code>reduce</code>）</li><li><code>begin</code> 和 <code>end</code></li></ul><p><code>std::copy</code> 接受的是迭代器，而 <code>ranges::copy</code> 接受的是范围，似乎还有点道理。那 <code>begin</code> 和 <code>end</code> 呢？本来接受的参数就是一个范围啊……</p><p>Eric Niebler（Ranges TS 的作者）引入 <code>ranges::begin</code> 的目的是解决下面的代码可能产生的问题（他的例子 [3]）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>extern std::vector&amp;lt;int&amp;gt; get_data();</span></span>
<span class="line"><span>auto it = std::begin(get_data());</span></span>
<span class="line"><span>int i = *it; // BOOM</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在读取 <code>*it</code> 的时候，<code>get_data()</code> 返回的 <code>vector</code> 已经被销毁了——所以这个读取操作是未定义行为（undefined behavior）。</p><p>Eric Niebler 和 Casey Carter（CMCSTL2 的主要作者）使用了一个特殊的技巧，把 <code>begin</code> 和 <code>end</code> 实现成了有特殊约束的函数对象，使得下面这样的代码无法通过编译：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>extern std::vector&amp;lt;int&amp;gt; get_data();</span></span>
<span class="line"><span>auto it = ranges::begin(get_data());</span></span>
<span class="line"><span>int i = *it; // BOOM</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你对此有兴趣的话，可以看一下 CMCSTL2 里的 include/stl2/detail/range/access.hpp。</p><p>对一般的用户而言，记住 <code>ranges::begin</code> 和 <code>ranges::end</code> 是将来 <code>std::begin</code> 和 <code>std::end</code> 的更好的替代品就行了。</p><h2 id="一点历史" tabindex="-1"><a class="header-anchor" href="#一点历史"><span>一点历史</span></a></h2><p>对于标准算法里的迭代器的问题早就有人看到了，并且有不少人提出了改进的方案。最早在 2003 年，Boost.Range 就已经出现（但影响似乎不大）。Andrei Alexandresu 在 2009 年发了一篇很有影响力的文章，“Iterators must go” [4]，讨论迭代器的问题，及他在 D 语言里实现 ranges 的经验，但在 C++ 界没有开花结果。Eric Niebler 在 2013 年开始了 range-v3 [5] 的工作，这才是目前的 ranges 的基础。他把 ranges 写成了一个标准提案 [6]，并在 2017 年被 ISO 出版成为正式的 Ranges TS。2018 年末，好消息传来，C++ 委员会通过了决议，Ranges 正式被并入了 C++20 的草案！</p><img src="https://static001.geekbang.org/resource/image/04/b4/04dfc0486f87f25871c5fc873d631eb4.png" alt="" title="图片背景来自网络"><p>谁说程序员都是无趣的？这篇内容申请把 Ranges 并入 C++ 标准草案的纯技术文档 The One Ranges Proposal [7]，开头绝对是激情四射啊。</p><h2 id="批评和未来" tabindex="-1"><a class="header-anchor" href="#批评和未来"><span>批评和未来</span></a></h2><p>如果我只说好的方面、问题一点不说，对于学习道路上的你，也不是件好事。最有名的对 C++ Ranges 的批评，就是 Unity 开发者 Aras Pranckevičius 发表的一篇文章 [8]。我不完全认同文中的观点，但我觉得读一下反面的意见也很重要。</p><p>此外，C++20 里的 ranges 不是一个概念的终点。即便在 range-v3 库里，也有很多东西仍然没有进入 C++ 标准。比如，看一眼下面的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;string&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;range/v3/all.hpp&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  std::vector&amp;lt;int&amp;gt; vd{1, 7, 3, 6,</span></span>
<span class="line"><span>                      5, 2, 4, 8};</span></span>
<span class="line"><span>  std::vector&amp;lt;std::string&amp;gt; vs{</span></span>
<span class="line"><span>    &quot;one&quot;,  &quot;seven&quot;, &quot;three&quot;,</span></span>
<span class="line"><span>    &quot;six&quot;,  &quot;five&quot;,  &quot;two&quot;,</span></span>
<span class="line"><span>    &quot;four&quot;, &quot;eight&quot;};</span></span>
<span class="line"><span>  auto v =</span></span>
<span class="line"><span>    ranges::views::zip(vd, vs);</span></span>
<span class="line"><span>  ranges::sort(v);</span></span>
<span class="line"><span>  for (auto i : vs) {</span></span>
<span class="line"><span>    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码展示了标准 ranges 中还没有的 zip 视图，并且，zip 视图的结果还可以被排序，结果将使得原始的两个 <code>vector</code> 都重新排序。上述程序的运行结果是：</p><blockquote></blockquote><p>\`one\`<br> \`two\`<br> \`three\`<br> \`four\`<br> \`five\`<br> \`six\`<br> \`seven\`<br> \`eight\`</p><p>这个非标的 range-v3 库的另外一个好处是，它不依赖于概念的支持，因而可以用在更多的环境中，包括目前还不支持概念的 Clang。</p><p>如果你希望自己尝试一下这个代码的话，需要在命令行上使用 <code>-I</code> 选项来包含 range-v3 的 include 目录，此外 MSVC 还需要几个特殊选项：</p><blockquote></blockquote><p><code>cl /EHsc /std:c++latest /permissive- /experimental:preprocessor …</code></p><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>本讲讨论了 C++20 的又一重要特性 ranges。虽然这一特性比起 concepts 来争议要多，但无疑它展示了 C++ 语言的一些新的可能性，并可以产生非常紧凑的高性能代码。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>你怎么看待 ranges 和对它的批评？你会想用 ranges 吗？欢迎留言与我交流。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] Casey Carter et al., cmcstl2. <a href="https://github.com/CaseyCarter/cmcstl2" target="_blank" rel="noopener noreferrer">https://github.com/CaseyCarter/cmcstl2</a></p><p>[2] 吴咏炜, nvwa/functional.h. <a href="https://github.com/adah1972/nvwa/blob/master/nvwa/functional.h" target="_blank" rel="noopener noreferrer">https://github.com/adah1972/nvwa/blob/master/nvwa/functional.h</a></p><p>[3] Eric Niebler, “Standard ranges”. <a href="http://ericniebler.com/2018/12/05/standard-ranges/" target="_blank" rel="noopener noreferrer">http://ericniebler.com/2018/12/05/standard-ranges/</a></p><p>[4] Andrei Alexandrescu, “Iterators must go”, <a href="http://accu.org/content/conf2009/AndreiAlexandrescu_iterators-must-go.pdf" target="_blank" rel="noopener noreferrer">http://accu.org/content/conf2009/AndreiAlexandrescu_iterators-must-go.pdf</a></p><p>[5] Eric Niebler, range-v3. <a href="https://github.com/ericniebler/range-v3" target="_blank" rel="noopener noreferrer">https://github.com/ericniebler/range-v3</a></p><p>[6] Eric Niebler and Casey Carter, “Working draft, C++ extensions for ranges”. <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf" target="_blank" rel="noopener noreferrer">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf</a></p><p>[7] Eric Niebler, Casey Carter, and Christopher Di Bella, “The one ranges proposal”. <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf" target="_blank" rel="noopener noreferrer">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf</a></p><p>[8] Aras Pranckevičius, “ ‘Modern’ C++ lamentations”. <a href="https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/" target="_blank" rel="noopener noreferrer">https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</a> ；CSDN 的翻译见 <a href="https://blog.csdn.net/csdnnews/article/details/86386281" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/csdnnews/article/details/86386281</a></p>`,130)]))}const c=n(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%9C%AA%E6%9D%A5%E7%AF%87/29%20_%20Ranges%EF%BC%9A%E6%97%A0%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%92%8C%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E7%BB%84%E5%90%88.html","title":"29 _ Ranges：无迭代器的迭代和更方便的组合","lang":"zh-CN","frontmatter":{"description":"29 _ Ranges：无迭代器的迭代和更方便的组合 你好，我是吴咏炜。 今天，我们继续上一讲开始的话题，讨论 ranges（范围）。 Ranges 简介 像下面这样的代码： 你应该已经见到过好多次了。有没有觉得这个代码有点重复、有点无聊呢？尤其是里面的 begin 和 end？ 很多人都留意到了迭代器虽然灵活，但不是一个足够高级的抽象——尤其是我们已...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%9C%AA%E6%9D%A5%E7%AF%87/29%20_%20Ranges%EF%BC%9A%E6%97%A0%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%92%8C%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E7%BB%84%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"29 _ Ranges：无迭代器的迭代和更方便的组合"}],["meta",{"property":"og:description","content":"29 _ Ranges：无迭代器的迭代和更方便的组合 你好，我是吴咏炜。 今天，我们继续上一讲开始的话题，讨论 ranges（范围）。 Ranges 简介 像下面这样的代码： 你应该已经见到过好多次了。有没有觉得这个代码有点重复、有点无聊呢？尤其是里面的 begin 和 end？ 很多人都留意到了迭代器虽然灵活，但不是一个足够高级的抽象——尤其是我们已..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"29 _ Ranges：无迭代器的迭代和更方便的组合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":13.01,"words":3902},"filePathRelative":"posts/现代C++实战30讲/未来篇/29 _ Ranges：无迭代器的迭代和更方便的组合.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"29 | Ranges：无迭代器的迭代和更方便的组合\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/79/15/797ba11446ee824f9da51c53914f8715.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>今天，我们继续上一讲开始的话题，讨论 ranges（范围）。</p>\\n<h2>Ranges 简介</h2>\\n<p>像下面这样的代码：</p>\\n","autoDesc":true}');export{c as comp,o as data};
