import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as i}from"./app-6Bz2fGO5.js";const l={};function p(r,e){return i(),s("div",null,e[0]||(e[0]=[a(`<p><audio id="audio" title="20 | 内存模型和atomic：理解并发的复杂性" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/eb/1f/eb957e48a3d71d39cd22203c2f91ca1f.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>上一讲我们讨论了一些并发编程的基本概念，今天我们来讨论一个略有点绕的问题，C++ 里的内存模型和原子量。</p><h2 id="c-98-的执行顺序问题" tabindex="-1"><a class="header-anchor" href="#c-98-的执行顺序问题"><span>C++98 的执行顺序问题</span></a></h2><p>C++98 的年代里，开发者们已经了解了线程的概念，但 C++ 的标准里则完全没有提到线程。从实践上，估计大家觉得不提线程，C++ 也一样能实现多线程的应用程序吧。不过，很多聪明人都忽略了，下面的事实可能会产生不符合直觉预期的结果：</p><ul><li>为了优化的必要，编译器是可以调整代码的执行顺序的。唯一的要求是，程序的“可观测”外部行为是一致的。</li><li>处理器也会对代码的执行顺序进行调整（所谓的 CPU 乱序执行）。在单处理器的情况下，这种乱序无法被程序观察到；但在多处理器的情况下，在另外一个处理器上运行的另一个线程就可能会察觉到这种不同顺序的后果了。</li></ul><p>对于上面的后一点，大部分开发者并没有意识到。原因有好几个方面：</p><ul><li>多处理器的系统在那时还不常见</li><li>主流的 x86 体系架构仍保持着较严格的内存访问顺序</li><li>只有在数据竞争（data race）激烈的情况下才能看到“意外”的后果</li></ul><p>举一个例子，假设我们有两个全局变量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int x = 0;</span></span>
<span class="line"><span>int y = 0;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在一个线程里执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x = 1;</span></span>
<span class="line"><span>y = 2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在另一个线程里执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if (y == 2) {</span></span>
<span class="line"><span>  x = 3;</span></span>
<span class="line"><span>  y = 4;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想一下，你认为上面的代码运行完之后，<code>x</code>、<code>y</code> 的数值有几种可能？</p><p>你如果认为有两种可能，1、2 和 3、4 的话，那说明你是按典型程序员的思维模式看问题的——没有像编译器和处理器一样处理问题。事实上，1、4 也是一种结果的可能。有两个基本的原因可以造成这一后果：</p><ul><li>编译器没有义务一定按代码里给出的顺序产生代码。事实上，跟据上下文调整代码的执行顺序，使其最有利于处理器的架构，是优化中很重要的一步。就单个线程而言，先执行 <code>x = 1</code> 还是先执行 <code>y = 2</code> 完全是件无关紧要的事：它们没有外部“可观察”的区别。</li><li>在多处理器架构中，各个处理器可能存在缓存不一致性问题。取决于具体的处理器类型、缓存策略和变量地址，对变量 <code>y</code> 的写入有可能先反映到主内存中去。之所以这个问题似乎并不常见，是因为常见的 x86 和 x86-64 处理器是在顺序执行方面做得最保守的——大部分其他处理器，如 ARM、DEC Alpha、PA-RISC、IBM Power、IBM z架构和 Intel Itanium 在内存序问题上都比较“松散”。x86 使用的内存模型基本提供了顺序一致性（sequential consistency）；相对的，ARM 使用的内存模型就只是松散一致性（relaxed consistency）。较为严格的描述，请查看参考资料 [1] 和里面提供的进一步资料。</li></ul><p>虽说 Intel 架构处理器的顺序一致性比较好，但在多处理器（包括多核）的情况下仍然能够出现写读序列变成读写序列的情况，产生意料之外的后果。参考资料 [2] 中提供了完整的例子，包括示例代码。对于缓存不一致性问题的一般中文介绍，可以查看参考资料 [3]。</p><h3 id="双重检查锁定" tabindex="-1"><a class="header-anchor" href="#双重检查锁定"><span>双重检查锁定</span></a></h3><p>在多线程可能对同一个单件进行初始化的情况下，有一个双重检查锁定的技巧，可基本示意如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 头文件</span></span>
<span class="line"><span>class singleton {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  static singleton* instance();</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>private:</span></span>
<span class="line"><span>  static singleton* inst_ptr_;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现文件</span></span>
<span class="line"><span>singleton* singleton::inst_ptr_ =</span></span>
<span class="line"><span>  nullptr;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>singleton* singleton::instance()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  if (inst_ptr_ == nullptr) {</span></span>
<span class="line"><span>    lock_guard lock;  // 加锁</span></span>
<span class="line"><span>    if (inst_ptr_ == nullptr) {</span></span>
<span class="line"><span>      inst_ptr_ = new singleton();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return inst_ptr_;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码的目的是消除大部分执行路径上的加锁开销。原本的意图是：如果 <code>inst_ptr_</code> 没有被初始化，执行才会进入加锁的路径，防止单件被构造多次；如果 <code>inst_ptr_</code> 已经被初始化，那它就会被直接返回，不会产生额外的开销。虽然看上去很美，但它一样有着上面提到的问题。Scott Meyers 和 Andrei Alexandrecu 详尽地分析了这个用法 [4]，然后得出结论：即使花上再大的力气，这个用法仍然有着非常多的难以填补的漏洞。本质上还是上面说的，优化编译器会努力击败你试图想防止优化的努力，而多处理器会以令人意外的方式让代码走到错误的执行路径上去。他们分析得非常详细，建议你可以花时间学习一下。</p><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h3><p>在某些编译器里，使用 <code>volatile</code> 关键字可以达到内存同步的效果。但我们必须记住，这不是 <code>volatile</code> 的设计意图，也不能通用地达到内存同步的效果。<code>volatile</code> 的语义只是防止编译器“优化”掉对内存的读写而已。它的合适用法，目前主要是用来读写映射到内存地址上的 I/O 操作。</p><p>由于 <code>volatile</code> 不能在多处理器的环境下确保多个线程能看到同样顺序的数据变化，在今天的通用应用程序中，不应该再看到 <code>volatile</code> 的出现。</p><h2 id="c-11-的内存模型" tabindex="-1"><a class="header-anchor" href="#c-11-的内存模型"><span>C++11 的内存模型</span></a></h2><p>为了从根本上消除这些漏洞，C++11 里引入了适合多线程的内存模型。我们可以在参考资料 [5] 里了解更多的细节。跟我们开发密切相关的是：现在我们有了原子对象（atomic）和使用原子对象的获得（acquire）、释放（release）语义，可以真正精确地控制内存访问的顺序性，保证我们需要的内存序。</p><h3 id="内存屏障和获得、释放语义" tabindex="-1"><a class="header-anchor" href="#内存屏障和获得、释放语义"><span>内存屏障和获得、释放语义</span></a></h3><p>拿刚才的那个例子来说，如果我们希望结果只能是 1、2 或 3、4，即满足程序员心中的完全存储序（total store ordering），我们需要在 <code>x = 1</code> 和 <code>y = 2</code> 两句语句之间加入内存屏障，禁止这两句语句交换顺序。我们在此种情况下最常用的两个概念是“获得”和“释放”：</p><ul><li><strong>获得</strong>是一个对内存的<strong>读</strong>操作，当前线程的任何后面的读写操作都不允许重排到这个操作的<strong>前面</strong>去。</li><li><strong>释放</strong>是一个对内存的<strong>写</strong>操作，当前线程的任何前面的读写操作都不允许重排到这个操作的<strong>后面</strong>去。</li></ul><p>具体到我们上面的第一个例子，我们需要把 <code>y</code> 声明成 <code>atomic&amp;lt;int&amp;gt;</code>。然后，我们在线程 1 需要使用释放语义：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x = 1;</span></span>
<span class="line"><span>y.store(2, memory_order_release);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在线程 2 我们对 <code>y</code> 的读取应当使用获得语义，但存储只需要松散内存序即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if (y.load(memory_order_acquire) ==</span></span>
<span class="line"><span>    2) {</span></span>
<span class="line"><span>  x = 3;</span></span>
<span class="line"><span>  y.store(4, memory_order_relaxed);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以用下图示意一下，每一边的代码都不允许重排越过黄色区域，且如果 <code>y</code> 上的释放早于 <code>y</code> 上的获取的话，释放前对内存的修改都在另一个线程的获取操作后可见：</p><img src="https://static001.geekbang.org/resource/image/33/14/33484c6762bb98d91ce8d30a752e2614.png" alt=""><p>事实上，在我们把 <code>y</code> 改成 <code>atomic&amp;lt;int&amp;gt;</code> 之后，两个线程的代码一行不改，执行结果都会是符合我们的期望的。因为 <code>atomic</code> 变量的写操作缺省就是释放语义，读操作缺省就是获得语义（不严格的说法，精确表述见下面的内存序部分）。即</p><ul><li><code>y = 2</code> 相当于 <code>y.store(2, memory_order_release)</code></li><li><code>y == 2</code> 相当于 <code>y.load(memory_order_acquire) == 2</code></li></ul><p>但是，缺省行为可能是对性能不利的：我们并不需要在任何情况下都保证操作的顺序性。</p><p>另外，我们应当注意一下，acquire 和 release 通常都是配对出现的，目的是保证如果对同一个原子对象的 release 发生在 acquire 之前的话，release 之前发生的内存修改能够被 acquire 之后的内存读取全部看到。</p><h3 id="atomic" tabindex="-1"><a class="header-anchor" href="#atomic"><span>atomic</span></a></h3><p>刚才是对 atomic 用法的一个非正式介绍。下面我们对 atomic 做一个稍完整些的说明（更完整的见 [6]）。</p><p>C++11 在 &lt;atomic&gt; 头文件中引入了 <code>atomic</code> 模板，对原子对象进行了封装。我们可以将其应用到任何类型上去。当然对于不同的类型效果还是有所不同的：对于整型量和指针等简单类型，通常结果是无锁的原子对象；而对于另外一些类型，比如 64 位机器上大小不是 1、2、4、8（有些平台/编译器也支持对更大的数据进行无锁原子操作）的类型，编译器会自动为这些原子对象的操作加上锁。编译器提供了一个原子对象的成员函数 <code>is_lock_free</code>，可以检查这个原子对象上的操作是否是无锁的。</p><p>原子操作有三类：</p><ul><li>读：在读取的过程中，读取位置的内容不会发生任何变动。</li><li>写：在写入的过程中，其他执行线程不会看到部分写入的结果。</li><li>读‐修改‐写：读取内存、修改数值、然后写回内存，整个操作的过程中间不会有其他写入操作插入，其他执行线程不会看到部分写入的结果。</li></ul><p>&lt;atomic&gt; 头文件中还定义了内存序，分别是：</p><ul><li><code>memory_order_relaxed</code>：松散内存序，只用来保证对原子对象的操作是原子的</li><li><code>memory_order_consume</code>：目前不鼓励使用，我就不说明了</li><li><code>memory_order_acquire</code>：获得操作，在读取某原子对象时，当前线程的任何后面的读写操作都不允许重排到这个操作的前面去，并且其他线程在对同一个原子对象释放之前的所有内存写入都在当前线程可见</li><li><code>memory_order_release</code>：释放操作，在写入某原子对象时，当前线程的任何前面的读写操作都不允许重排到这个操作的后面去，并且当前线程的所有内存写入都在对同一个原子对象进行获取的其他线程可见</li><li><code>memory_order_acq_rel</code>：获得释放操作，一个读‐修改‐写操作同时具有获得语义和释放语义，即它前后的任何读写操作都不允许重排，并且其他线程在对同一个原子对象释放之前的所有内存写入都在当前线程可见，当前线程的所有内存写入都在对同一个原子对象进行获取的其他线程可见</li><li><code>memory_order_seq_cst</code>：顺序一致性语义，对于读操作相当于获取，对于写操作相当于释放，对于读‐修改‐写操作相当于获得释放，<strong>是所有原子操作的默认内存序</strong>（除此之外，顺序一致性还保证了多个原子量的修改在所有线程里观察到的修改顺序都相同；我们目前的讨论暂不涉及多个原子量的修改）</li></ul><p><code>atomic</code> 有下面这些常用的成员函数：</p><ul><li>默认构造函数（只支持零初始化）</li><li>拷贝构造函数被删除</li><li>使用内置对象类型的构造函数（不是原子操作）</li><li>可以从内置对象类型赋值到原子对象（相当于 <code>store</code>）</li><li>可以从原子对象隐式转换成内置对象（相当于 <code>load</code>）</li><li><code>store</code>，写入对象到原子对象里，第二个可选参数是内存序类型</li><li><code>load</code>，从原子对象读取内置对象，有个可选参数是内存序类型</li><li><code>is_lock_free</code>，判断对原子对象的操作是否无锁（是否可以用处理器的指令直接完成原子操作）</li><li><code>exchange</code>，交换操作，第二个可选参数是内存序类型（这是读‐修改‐写操作）</li><li><code>compare_exchange_weak</code> 和 <code>compare_exchange_strong</code>，两个比较加交换（CAS）的版本，你可以分别指定成功和失败时的内存序，也可以只指定一个，或使用默认的最安全内存序（这是读‐修改‐写操作）</li><li><code>fetch_add</code> 和 <code>fetch_sub</code>，仅对整数和指针内置对象有效，对目标原子对象执行加或减操作，返回其原始值，第二个可选参数是内存序类型（这是读‐修改‐写操作）</li><li><code>++</code> 和 <code>--</code>（前置和后置），仅对整数和指针内置对象有效，对目标原子对象执行增一或减一，操作使用顺序一致性语义，并注意返回的不是原子对象的引用（这是读‐修改‐写操作）</li><li><code>+=</code> 和 <code>-=</code>，仅对整数和指针内置对象有效，对目标原子对象执行加或减操作，返回操作之后的数值，操作使用顺序一致性语义，并注意返回的不是原子对象的引用（这是读‐修改‐写操作）</li></ul><p>有了原子对象之后，我们可以轻而易举地把<a href="https://time.geekbang.org/column/article/169263" target="_blank" rel="noopener noreferrer">[第 2 讲]</a> 中的 <code>shared_count</code> 变成线程安全。我们只需要包含 &lt;atomic&gt; 头文件，并把下面这行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  long count_;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改成</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  std::atomic_long count_;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即可（<code>atomic_long</code> 是 <code>atomic&amp;lt;long&amp;gt;</code> 的类型别名）。不过，由于我们并不需要 <code>++</code> 之后计数值影响其他行为，在 <code>add_count</code> 中执行简单的 <code>++</code>、使用顺序一致性语义略有浪费。更好的做法是将其实现成：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  void add_count() noexcept</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    count_.fetch_add(</span></span>
<span class="line"><span>      1, std::memory_order_relaxed);</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="is-lock-free-的可能问题" tabindex="-1"><a class="header-anchor" href="#is-lock-free-的可能问题"><span>is_lock_free 的可能问题</span></a></h4><p>注意，macOS 上在使用 Clang 时似乎不支持对需要加锁的对象使用 <code>is_lock_free</code> 成员函数，此时链接会出错。而 GCC 在这种情况下，需要确保系统上装了 libatomic。以 CentOS 7 下的 GCC 7 为例，我们可以使用下面的语句来安装：</p><blockquote></blockquote><p><code>sudo yum install devtoolset-7-libatomic-devel</code></p><p>然后，用下面的语句编译可以通过：</p><blockquote></blockquote><p><code>g++ -pthread test.cpp -latomic</code></p><p>Windows 下使用 MSVC 则没有问题。</p><h3 id="mutex" tabindex="-1"><a class="header-anchor" href="#mutex"><span>mutex</span></a></h3><p>上一讲我们已经讨论了互斥量。今天，我们只需要补充两点：</p><ul><li>互斥量的加锁操作（<code>lock</code>）具有获得语义</li><li>互斥量的解锁操作（<code>unlock</code>）具有释放语义</li></ul><p>有了目前讲过的这些知识，我们终于可以实现一个真正安全的双重检查锁定了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 头文件</span></span>
<span class="line"><span>class singleton {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  static singleton* instance();</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>private:</span></span>
<span class="line"><span>  static mutex lock_;</span></span>
<span class="line"><span>  static atomic&amp;lt;singleton*&amp;gt;</span></span>
<span class="line"><span>    inst_ptr_;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现文件</span></span>
<span class="line"><span>mutex singleton::lock_;</span></span>
<span class="line"><span>atomic&amp;lt;singleton*&amp;gt;</span></span>
<span class="line"><span>  singleton::inst_ptr_;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>singleton* singleton::instance()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  singleton* ptr = inst_ptr_.load(</span></span>
<span class="line"><span>    memory_order_acquire);</span></span>
<span class="line"><span>  if (ptr == nullptr) {</span></span>
<span class="line"><span>    lock_guard&amp;lt;mutex&amp;gt; guard{lock_};</span></span>
<span class="line"><span>    ptr = inst_ptr_.load(</span></span>
<span class="line"><span>      memory_order_relaxed);</span></span>
<span class="line"><span>    if (ptr == nullptr) {</span></span>
<span class="line"><span>      ptr = new singleton();</span></span>
<span class="line"><span>      inst_ptr_.store(</span></span>
<span class="line"><span>        ptr, memory_order_release);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return inst_ptr_;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个小地方注意一下：为了和 <code>inst_ptr_.load</code> 语句对称，我在 <code>inst_ptr_.store</code> 时使用了释放语义；不过，由于互斥量解锁本身具有释放语义，这么做并不是必需的。</p><h2 id="并发队列的接口" tabindex="-1"><a class="header-anchor" href="#并发队列的接口"><span>并发队列的接口</span></a></h2><p>在结束这一讲之前，我们来检查一下并发对编程接口的冲击。回想我们之前讲到标准库里 <code>queue</code> 有下面这样的接口：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename T&amp;gt;</span></span>
<span class="line"><span>class queue {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>  T&amp;amp; front();</span></span>
<span class="line"><span>  const T&amp;amp; front() const;</span></span>
<span class="line"><span>  void pop();</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前还问过为什么 <code>pop</code> 不直接返回第一个元素。可到了并发的年代，我们不禁要问，这样的接口设计到底明智吗？</p><p><strong>会不会在我们正在访问 <code>front()</code> 的时候，这个元素就被 <code>pop</code> 掉了？</strong></p><p>事实上，上面这样的接口是不可能做到并发安全的。并发安全的接口大概长下面这个样子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename T&amp;gt;</span></span>
<span class="line"><span>class queue {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>  void wait_and_pop(T&amp;amp; dest)</span></span>
<span class="line"><span>  bool try_pop(T&amp;amp; dest);</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换句话说，要准备好位置去接收；然后如果接收成功了，才安安静静地在自己的线程里处理已经被弹出队列的对象。接收方式还得分两种，阻塞式的和非阻塞式的……</p><p>那我为什么要在内存模型和原子量这一讲里讨论这个问题呢？因为并发队列的实现，经常是用原子量来达到无锁和高性能的。单生产者、单消费者的并发队列，用原子量和获得、释放语义就能简单实现。对于多生产者或多消费者的情况，那实现就比较复杂了，一般会使用 <code>compare_exchange_strong</code> 或 <code>compare_exchange_weak</code>。讨论这个话题的复杂性，就大大超出了本专栏的范围了。你如果感兴趣的话，可以查看下面几项内容：</p><ul><li>nvwa::fc_queue [7] 给出了一个单生产者、单消费者的无锁并发定长环形队列，代码长度是几百行的量级。</li><li>moodycamel::ConcurrentQueue [8] 给出了一个多生产者、多消费者的无锁通用并发队列，代码长度是几千行的量级。</li><li>陈皓给出了一篇很棒的对无锁队列的中文描述 [9]，推荐阅读。</li></ul><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>在这一讲里，我们讨论了 C++ 对并发的底层支持，特别是内存模型和原子量。这些底层概念，是在 C++ 里写出高性能并发代码的基础。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>在传统 PC 上开发的程序员，应当比较少接触具有松散或弱内存一致性的系统，但原子量和普通变量的区别还是很容易在代码中表现出来的。请你尝试一下多个线程对一个原子量和一个普通全局变量做多次增一操作，观察最后的结果。</p><p>在 Intel 处理器架构上，唯一可见的重排是多处理器下的写读操作。大力推荐你尝试一下参考资料 [2] 中的例子（Windows 和 Linux 下可直接运行；macOS 下需要使用我的<a href="https://gist.github.com/adah1972/8ee7484647ea9a1795089219a3704574" target="_blank" rel="noopener noreferrer">修改版本</a>或备用<a href="http://wyw.dcweb.cn/download.asp?path=&amp;file=ordering.cpp" target="_blank" rel="noopener noreferrer">下载链接</a>来覆盖下载代码中的 gcc/ordering.cpp），并修改预定义宏。另外一种改法就是把代码中的 <code>X</code>、<code>Y</code> 的类型改成 <code>atomic_int</code>，重排也就消失了。</p><p>如果遇到任何特别问题，欢迎留言与我交流。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] Wikipedia, “Memory ordering”. <a href="https://en.wikipedia.org/wiki/Memory_ordering" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Memory_ordering</a></p><p>[1a] 维基百科, “内存排序”. <a href="https://zh.wikipedia.org/zh-cn/%E5%86%85%E5%AD%98%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/内存排序</a></p><p>[2] Jeff Preshing, “Memory reordering caught in the act”. <a href="https://preshing.com/20120515/memory-reordering-caught-in-the-act/" target="_blank" rel="noopener noreferrer">https://preshing.com/20120515/memory-reordering-caught-in-the-act/</a></p><p>[3] 王欢明, 《多处理器编程：从缓存一致性到内存模型》. <a href="https://zhuanlan.zhihu.com/p/35386457" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/35386457</a></p><p>[4] Scott Meyers and Andrei Alexandrescu, “C++ and the perils of double-checked locking”. <a href="https://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf" target="_blank" rel="noopener noreferrer">https://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf</a></p><p>[5] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Memory model”. <a href="https://en.cppreference.com/w/cpp/language/memory_model" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/language/memory_model</a></p><p>[5a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “内存模型”. <a href="https://zh.cppreference.com/w/cpp/language/memory_model" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/language/memory_model</a></p><p>[6] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::atomic”. <a href="https://en.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/atomic/atomic</a></p><p>[6a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::atomic”. <a href="https://zh.cppreference.com/w/cpp/atomic/atomic" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/atomic/atomic</a></p><p>[7] 吴咏炜, nvwa. <a href="https://github.com/adah1972/nvwa" target="_blank" rel="noopener noreferrer">https://github.com/adah1972/nvwa</a></p><p>[8] Cameron Desrochers, moodycamel::ConcurrentQueue. <a href="https://github.com/cameron314/concurrentqueue" target="_blank" rel="noopener noreferrer">https://github.com/cameron314/concurrentqueue</a></p><p>[9] 陈皓, 《无锁队列的实现》. <a href="https://coolshell.cn/articles/8239.html" target="_blank" rel="noopener noreferrer">https://coolshell.cn/articles/8239.html</a></p>`,98)]))}const o=n(l,[["render",p]]),t=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%8F%90%E9%AB%98%E7%AF%87/20%20_%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Catomic%EF%BC%9A%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是吴咏炜。 上一讲我们讨论了一些并发编程的基本概念，今天我们来讨论一个略有点绕的问题，C++ 里的内存模型和原子量。 C++98 的执行顺序问题 C++98 的年代里，开发者们已经了解了线程的概念，但 C++ 的标准里则完全没有提到线程。从实践上，估计大家觉得不提线程，C++ 也一样能实现多线程的应用程序吧。不过，很多聪明人都忽略了，下面的事实...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%8F%90%E9%AB%98%E7%AF%87/20%20_%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Catomic%EF%BC%9A%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是吴咏炜。 上一讲我们讨论了一些并发编程的基本概念，今天我们来讨论一个略有点绕的问题，C++ 里的内存模型和原子量。 C++98 的执行顺序问题 C++98 的年代里，开发者们已经了解了线程的概念，但 C++ 的标准里则完全没有提到线程。从实践上，估计大家觉得不提线程，C++ 也一样能实现多线程的应用程序吧。不过，很多聪明人都忽略了，下面的事实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":16.12,"words":4835},"filePathRelative":"posts/现代C++实战30讲/提高篇/20 _ 内存模型和atomic：理解并发的复杂性.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"20 | 内存模型和atomic：理解并发的复杂性\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/eb/1f/eb957e48a3d71d39cd22203c2f91ca1f.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>上一讲我们讨论了一些并发编程的基本概念，今天我们来讨论一个略有点绕的问题，C++ 里的内存模型和原子量。</p>\\n<h2>C++98 的执行顺序问题</h2>","autoDesc":true}');export{o as comp,t as data};
