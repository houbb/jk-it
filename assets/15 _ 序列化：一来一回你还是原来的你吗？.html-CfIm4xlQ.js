import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-6Bz2fGO5.js";const l={};function p(t,s){return i(),n("div",null,s[0]||(s[0]=[a(`<p><audio id="audio" title="15 | 序列化：一来一回你还是原来的你吗？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/f2/f6/f22ac73a565ee8dfcb28a99f300629f6.mp3"></audio></p><p>你好，我是朱晔。今天，我来和你聊聊序列化相关的坑和最佳实践。</p><p>序列化是把对象转换为字节流的过程，以方便传输或存储。反序列化，则是反过来把字节流转换为对象的过程。在介绍<a href="https://time.geekbang.org/column/article/223051" target="_blank" rel="noopener noreferrer">文件IO</a>的时候，我提到字符编码是把字符转换为二进制的过程，至于怎么转换需要由字符集制定规则。同样地，对象的序列化和反序列化，也需要由序列化算法制定规则。</p><p>关于序列化算法，几年前常用的有JDK（Java）序列化、XML序列化等，但前者不能跨语言，后者性能较差（时间空间开销大）；现在RESTful应用最常用的是JSON序列化，追求性能的RPC框架（比如gRPC）使用protobuf序列化，这2种方法都是跨语言的，而且性能不错，应用广泛。</p><p>在架构设计阶段，我们可能会重点关注算法选型，在性能、易用性和跨平台性等中权衡，不过这里的坑比较少。通常情况下，序列化问题常见的坑会集中在业务场景中，比如Redis、参数和响应序列化反序列化。</p><p>今天，我们就一起聊聊开发中序列化常见的一些坑吧。</p><h2 id="序列化和反序列化需要确保算法一致" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化需要确保算法一致"><span>序列化和反序列化需要确保算法一致</span></a></h2><p>业务代码中涉及序列化时，很重要的一点是要确保序列化和反序列化的算法一致性。有一次我要排查缓存命中率问题，需要运维同学帮忙拉取Redis中的Key，结果他反馈Redis中存的都是乱码，怀疑Redis被攻击了。其实呢，这个问题就是序列化算法导致的，我们来看下吧。</p><p>在这个案例中，开发同学使用RedisTemplate来操作Redis进行数据缓存。因为相比于Jedis，使用Spring提供的RedisTemplate操作Redis，除了无需考虑连接池、更方便外，还可以与Spring Cache等其他组件无缝整合。如果使用Spring Boot的话，无需任何配置就可以直接使用。</p><p>数据（包含Key和Value）要保存到Redis，需要经过序列化算法来序列化成字符串。虽然Redis支持多种数据结构，比如Hash，但其每一个field的Value还是字符串。如果Value本身也是字符串的话，能否有便捷的方式来使用RedisTemplate，而无需考虑序列化呢？</p><p>其实是有的，那就是StringRedisTemplate。</p><p>那StringRedisTemplate和RedisTemplate的区别是什么呢？开头提到的乱码又是怎么回事呢？带着这些问题让我们来研究一下吧。</p><p>写一段测试代码，在应用初始化完成后向Redis设置两组数据，第一次使用RedisTemplate设置Key为redisTemplate、Value为User对象，第二次使用StringRedisTemplate设置Key为stringRedisTemplate、Value为JSON序列化后的User对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>private RedisTemplate redisTemplate;</span></span>
<span class="line"><span>@Autowired</span></span>
<span class="line"><span>private StringRedisTemplate stringRedisTemplate;</span></span>
<span class="line"><span>@Autowired</span></span>
<span class="line"><span>private ObjectMapper objectMapper;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@PostConstruct</span></span>
<span class="line"><span>public void init() throws JsonProcessingException {</span></span>
<span class="line"><span>    redisTemplate.opsForValue().set(&amp;quot;redisTemplate&amp;quot;, new User(&amp;quot;zhuye&amp;quot;, 36));</span></span>
<span class="line"><span>    stringRedisTemplate.opsForValue().set(&amp;quot;stringRedisTemplate&amp;quot;, objectMapper.writeValueAsString(new User(&amp;quot;zhuye&amp;quot;, 36)));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你认为，StringRedisTemplate和RedisTemplate的区别，无非是读取的Value是String和Object，那就大错特错了，因为使用这两种方式存取的数据完全无法通用。</p><p>我们做个小实验，通过RedisTemplate读取Key为stringRedisTemplate的Value，使用StringRedisTemplate读取Key为redisTemplate的Value：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>log.info(&amp;quot;redisTemplate get {}&amp;quot;, redisTemplate.opsForValue().get(&amp;quot;stringRedisTemplate&amp;quot;));</span></span>
<span class="line"><span>log.info(&amp;quot;stringRedisTemplate get {}&amp;quot;, stringRedisTemplate.opsForValue().get(&amp;quot;redisTemplate&amp;quot;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果是，两次都无法读取到Value：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[11:49:38.478] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:38  ] - redisTemplate get null</span></span>
<span class="line"><span>[11:49:38.481] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:39  ] - stringRedisTemplate get null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过redis-cli客户端工具连接到Redis，你会发现根本就没有叫作redisTemplate的Key，所以StringRedisTemplate无法查到数据：</p><img src="https://static001.geekbang.org/resource/image/0a/35/0a86608821f52833e3ffaecb69945635.png" alt=""><p>查看RedisTemplate的源码发现，默认情况下RedisTemplate针对Key和Value使用了JDK序列化：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void afterPropertiesSet() {</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>	if (defaultSerializer == null) {</span></span>
<span class="line"><span>		defaultSerializer = new JdkSerializationRedisSerializer(</span></span>
<span class="line"><span>				classLoader != null ? classLoader : this.getClass().getClassLoader());</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	if (enableDefaultSerializer) {</span></span>
<span class="line"><span>		if (keySerializer == null) {</span></span>
<span class="line"><span>			keySerializer = defaultSerializer;</span></span>
<span class="line"><span>			defaultUsed = true;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (valueSerializer == null) {</span></span>
<span class="line"><span>			valueSerializer = defaultSerializer;</span></span>
<span class="line"><span>			defaultUsed = true;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (hashKeySerializer == null) {</span></span>
<span class="line"><span>			hashKeySerializer = defaultSerializer;</span></span>
<span class="line"><span>			defaultUsed = true;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (hashValueSerializer == null) {</span></span>
<span class="line"><span>			hashValueSerializer = defaultSerializer;</span></span>
<span class="line"><span>			defaultUsed = true;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>redis-cli看到的类似一串乱码的&quot;\\xac\\xed\\x00\\x05t\\x00\\rredisTemplate&quot;字符串，其实就是字符串redisTemplate经过JDK序列化后的结果</strong>。这就回答了之前提到的乱码问题。而RedisTemplate尝试读取Key为stringRedisTemplate数据时，也会对这个字符串进行JDK序列化处理，所以同样无法读取到数据。</p><p>而StringRedisTemplate对于Key和Value，使用的是String序列化方式，Key和Value只能是String：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public class StringRedisTemplate extends RedisTemplate&amp;lt;String, String&amp;gt; {</span></span>
<span class="line"><span>	public StringRedisTemplate() {</span></span>
<span class="line"><span>		setKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>		setValueSerializer(RedisSerializer.string());</span></span>
<span class="line"><span>		setHashKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>		setHashValueSerializer(RedisSerializer.string());</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class StringRedisSerializer implements RedisSerializer&amp;lt;String&amp;gt; {</span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public String deserialize(@Nullable byte[] bytes) {</span></span>
<span class="line"><span>		return (bytes == null ? null : new String(bytes, charset));</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public byte[] serialize(@Nullable String string) {</span></span>
<span class="line"><span>		return (string == null ? null : string.getBytes(charset));</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，我们应该知道RedisTemplate和StringRedisTemplate保存的数据无法通用。修复方式就是，让它们读取自己存的数据：</p><ul><li>使用RedisTemplate读出的数据，由于是Object类型的，使用时可以先强制转换为User类型；</li><li>使用StringRedisTemplate读取出的字符串，需要手动将JSON反序列化为User类型。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//使用RedisTemplate获取Value，无需反序列化就可以拿到实际对象，虽然方便，但是Redis中保存的Key和Value不易读</span></span>
<span class="line"><span>User userFromRedisTemplate = (User) redisTemplate.opsForValue().get(&amp;quot;redisTemplate&amp;quot;);</span></span>
<span class="line"><span>log.info(&amp;quot;redisTemplate get {}&amp;quot;, userFromRedisTemplate);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//使用StringRedisTemplate，虽然Key正常，但是Value存取需要手动序列化成字符串</span></span>
<span class="line"><span>User userFromStringRedisTemplate = objectMapper.readValue(stringRedisTemplate.opsForValue().get(&amp;quot;stringRedisTemplate&amp;quot;), User.class);</span></span>
<span class="line"><span>log.info(&amp;quot;stringRedisTemplate get {}&amp;quot;, userFromStringRedisTemplate);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以得到正确输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[13:32:09.087] [http-nio-45678-exec-6] [INFO ] [.t.c.s.demo1.RedisTemplateController:45  ] - redisTemplate get User(name=zhuye, age=36)</span></span>
<span class="line"><span>[13:32:09.092] [http-nio-45678-exec-6] [INFO ] [.t.c.s.demo1.RedisTemplateController:47  ] - stringRedisTemplate get User(name=zhuye, age=36)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里你可能会说，使用RedisTemplate获取Value虽然方便，但是Key和Value不易读；而使用StringRedisTemplate虽然Key是普通字符串，但是Value存取需要手动序列化成字符串，有没有两全其美的方式呢？</p><p>当然有，自己定义RedisTemplate的Key和Value的序列化方式即可：Key的序列化使用RedisSerializer.string()（也就是StringRedisSerializer方式）实现字符串序列化，而Value的序列化使用Jackson2JsonRedisSerializer：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public &amp;lt;T&amp;gt; RedisTemplate&amp;lt;String, T&amp;gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {</span></span>
<span class="line"><span>    RedisTemplate&amp;lt;String, T&amp;gt; redisTemplate = new RedisTemplate&amp;lt;&amp;gt;();</span></span>
<span class="line"><span>    redisTemplate.setConnectionFactory(redisConnectionFactory);</span></span>
<span class="line"><span>    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span></span>
<span class="line"><span>    redisTemplate.setKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span>    redisTemplate.setHashKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span>    redisTemplate.afterPropertiesSet();</span></span>
<span class="line"><span>    return redisTemplate;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写代码测试一下存取，直接注入类型为RedisTemplate&lt;String, User&gt;的userRedisTemplate字段，然后在right2方法中，使用注入的userRedisTemplate存入一个User对象，再分别使用userRedisTemplate和StringRedisTemplate取出这个对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>private RedisTemplate&amp;lt;String, User&amp;gt; userRedisTemplate;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&amp;quot;right2&amp;quot;)</span></span>
<span class="line"><span>public void right2() {</span></span>
<span class="line"><span>    User user = new User(&amp;quot;zhuye&amp;quot;, 36);</span></span>
<span class="line"><span>    userRedisTemplate.opsForValue().set(user.getName(), user);</span></span>
<span class="line"><span>    Object userFromRedis = userRedisTemplate.opsForValue().get(user.getName());</span></span>
<span class="line"><span>    log.info(&amp;quot;userRedisTemplate get {} {}&amp;quot;, userFromRedis, userFromRedis.getClass());</span></span>
<span class="line"><span>    log.info(&amp;quot;stringRedisTemplate get {}&amp;quot;, stringRedisTemplate.opsForValue().get(user.getName()));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乍一看没啥问题，StringRedisTemplate成功查出了我们存入的数据：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[14:07:41.315] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:55  ] - userRedisTemplate get {name=zhuye, age=36} class java.util.LinkedHashMap</span></span>
<span class="line"><span>[14:07:41.318] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:56  ] - stringRedisTemplate get {&amp;quot;name&amp;quot;:&amp;quot;zhuye&amp;quot;,&amp;quot;age&amp;quot;:36}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis里也可以查到Key是纯字符串，Value是JSON序列化后的User对象：</p><img src="https://static001.geekbang.org/resource/image/ac/cc/ac20bd2117053fafee390bbb6ce1eccc.png" alt=""><p>但值得注意的是，这里有一个坑。<strong>第一行的日志输出显示，userRedisTemplate获取到的Value，是LinkedHashMap类型的</strong>，完全不是泛型的RedisTemplate设置的User类型。</p><p>如果我们把代码里从Redis中获取到的Value变量类型由Object改为User，编译不会出现问题，但会出现ClassCastException：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to org.geekbang.time.commonmistakes.serialization.demo1.User</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修复方式是，修改自定义RestTemplate的代码，把new出来的Jackson2JsonRedisSerializer设置一个自定义的ObjectMapper，启用activateDefaultTyping方法把类型信息作为属性写入序列化后的数据中（当然了，你也可以调整JsonTypeInfo.As枚举以其他形式保存类型信息）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span></span>
<span class="line"><span>ObjectMapper objectMapper = new ObjectMapper();</span></span>
<span class="line"><span>//把类型信息作为属性写入Value</span></span>
<span class="line"><span>objectMapper.activateDefaultTyping(objectMapper.getPolymorphicTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span></span>
<span class="line"><span>jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，直接使用RedisSerializer.json()快捷方法，它内部使用的GenericJackson2JsonRedisSerializer直接设置了把类型作为属性保存到Value中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redisTemplate.setKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>redisTemplate.setValueSerializer(RedisSerializer.json());</span></span>
<span class="line"><span>redisTemplate.setHashKeySerializer(RedisSerializer.string());</span></span>
<span class="line"><span>redisTemplate.setHashValueSerializer(RedisSerializer.json());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启程序调用right2方法进行测试，可以看到，从自定义的RedisTemplate中获取到的Value是User类型的（第一行日志），而且Redis中实际保存的Value包含了类型完全限定名（第二行日志）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[15:10:50.396] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:55  ] - userRedisTemplate get User(name=zhuye, age=36) class org.geekbang.time.commonmistakes.serialization.demo1.User</span></span>
<span class="line"><span>[15:10:50.399] [http-nio-45678-exec-1] [INFO ] [.t.c.s.demo1.RedisTemplateController:56  ] - stringRedisTemplate get [&amp;quot;org.geekbang.time.commonmistakes.serialization.demo1.User&amp;quot;,{&amp;quot;name&amp;quot;:&amp;quot;zhuye&amp;quot;,&amp;quot;age&amp;quot;:36}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，反序列化时可以直接得到User类型的Value。</p><p>通过对RedisTemplate组件的分析，可以看到，当数据需要序列化后保存时，读写数据使用一致的序列化算法的必要性，否则就像对牛弹琴。</p><p>这里，我再总结下Spring提供的4种RedisSerializer（Redis序列化器）：</p><ul><li>默认情况下，RedisTemplate使用JdkSerializationRedisSerializer，也就是JDK序列化，容易产生Redis中保存了乱码的错觉。</li><li>通常考虑到易读性，可以设置Key的序列化器为StringRedisSerializer。但直接使用RedisSerializer.string()，相当于使用了UTF_8编码的StringRedisSerializer，需要注意字符集问题。</li><li>如果希望Value也是使用JSON序列化的话，可以把Value序列化器设置为Jackson2JsonRedisSerializer。默认情况下，不会把类型信息保存在Value中，即使我们定义RedisTemplate的Value泛型为实际类型，查询出的Value也只能是LinkedHashMap类型。如果希望直接获取真实的数据类型，你可以启用Jackson ObjectMapper的activateDefaultTyping方法，把类型信息一起序列化保存在Value中。</li><li>如果希望Value以JSON保存并带上类型信息，更简单的方式是，直接使用RedisSerializer.json()快捷方法来获取序列化器。</li></ul><h2 id="注意jackson-json反序列化对额外字段的处理" tabindex="-1"><a class="header-anchor" href="#注意jackson-json反序列化对额外字段的处理"><span>注意Jackson JSON反序列化对额外字段的处理</span></a></h2><p>前面我提到，通过设置JSON序列化工具Jackson的activateDefaultTyping方法，可以在序列化数据时写入对象类型。其实，Jackson还有很多参数可以控制序列化和反序列化，是一个功能强大而完善的序列化工具。因此，很多框架都将Jackson作为JDK序列化工具，比如Spring Web。但也正是这个原因，我们使用时要小心各个参数的配置。</p><p>比如，在开发Spring Web应用程序时，如果自定义了ObjectMapper，并把它注册成了Bean，那很可能会导致Spring Web使用的ObjectMapper也被替换，导致Bug。</p><p>我们来看一个案例。程序一开始是正常的，某一天开发同学希望修改一下ObjectMapper的行为，让枚举序列化为索引值而不是字符串值，比如默认情况下序列化一个Color枚举中的Color.BLUE会得到字符串BLUE：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>private ObjectMapper objectMapper;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&amp;quot;test&amp;quot;)</span></span>
<span class="line"><span>public void test() throws JsonProcessingException {</span></span>
<span class="line"><span>	log.info(&amp;quot;color:{}&amp;quot;, objectMapper.writeValueAsString(Color.BLUE));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>enum Color {</span></span>
<span class="line"><span>    RED, BLUE</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是，这位同学就重新定义了一个ObjectMapper Bean，开启了WRITE_ENUMS_USING_INDEX功能特性：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public ObjectMapper objectMapper(){</span></span>
<span class="line"><span>    ObjectMapper objectMapper=new ObjectMapper();</span></span>
<span class="line"><span>    objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_INDEX,true);</span></span>
<span class="line"><span>    return objectMapper;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启这个特性后，Color.BLUE枚举序列化成索引值1：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[16:11:37.382] [http-nio-45678-exec-1] [INFO ] [c.s.d.JsonIgnorePropertiesController:19  ] - color:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改后处理枚举序列化的逻辑是满足了要求，但线上爆出了大量400错误，日志中也出现了很多UnrecognizedPropertyException：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JSON parse error: Unrecognized field \\&amp;quot;ver\\&amp;quot; (class org.geekbang.time.commonmistakes.serialization.demo4.UserWrong), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \\&amp;quot;version\\&amp;quot; (class org.geekbang.time.commonmistakes.serialization.demo4.UserWrong), not marked as ignorable (one known property: \\&amp;quot;name\\&amp;quot;])\\n at [Source: (PushbackInputStream); line: 1, column: 22] (through reference chain: org.geekbang.time.commonmistakes.serialization.demo4.UserWrong[\\&amp;quot;ver\\&amp;quot;])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从异常信息中可以看到，这是因为反序列化的时候，原始数据多了一个version属性。进一步分析发现，我们使用了UserWrong类型作为Web控制器wrong方法的入参，其中只有一个name属性：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public class UserWrong {</span></span>
<span class="line"><span>    private String name;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@PostMapping(&amp;quot;wrong&amp;quot;)</span></span>
<span class="line"><span>public UserWrong wrong(@RequestBody UserWrong user) {</span></span>
<span class="line"><span>    return user;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而客户端实际传过来的数据多了一个version属性。那，为什么之前没这个问题呢？</p><p>问题就出在，<strong>自定义ObjectMapper启用WRITE_ENUMS_USING_INDEX序列化功能特性时，覆盖了Spring Boot自动创建的ObjectMapper</strong>；而这个自动创建的ObjectMapper设置过FAIL_ON_UNKNOWN_PROPERTIES反序列化特性为false，以确保出现未知字段时不要抛出异常。源码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public MappingJackson2HttpMessageConverter() {</span></span>
<span class="line"><span>	this(Jackson2ObjectMapperBuilder.json().build());</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Jackson2ObjectMapperBuilder {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	private void customizeDefaultFeatures(ObjectMapper objectMapper) {</span></span>
<span class="line"><span>		if (!this.features.containsKey(MapperFeature.DEFAULT_VIEW_INCLUSION)) {</span></span>
<span class="line"><span>			configureFeature(objectMapper, MapperFeature.DEFAULT_VIEW_INCLUSION, false);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (!this.features.containsKey(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {</span></span>
<span class="line"><span>			configureFeature(objectMapper, DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要修复这个问题，有三种方式：</p><ul><li>第一种，同样禁用自定义的ObjectMapper的FAIL_ON_UNKNOWN_PROPERTIES：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public ObjectMapper objectMapper(){</span></span>
<span class="line"><span>    ObjectMapper objectMapper=new ObjectMapper();</span></span>
<span class="line"><span>    objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_INDEX,true);</span></span>
<span class="line"><span>    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);</span></span>
<span class="line"><span>    return objectMapper;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二种，设置自定义类型，加上@JsonIgnoreProperties注解，开启ignoreUnknown属性，以实现反序列化时忽略额外的数据：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>@JsonIgnoreProperties(ignoreUnknown = true)</span></span>
<span class="line"><span>public class UserRight {</span></span>
<span class="line"><span>    private String name;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三种，不要自定义ObjectMapper，而是直接在配置文件设置相关参数，来修改Spring默认的ObjectMapper的功能。比如，直接在配置文件启用把枚举序列化为索引号：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring.jackson.serialization.write_enums_using_index=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者可以直接定义Jackson2ObjectMapperBuilderCustomizer Bean来启用新特性：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public Jackson2ObjectMapperBuilderCustomizer customizer(){</span></span>
<span class="line"><span>    return builder -&amp;gt; builder.featuresToEnable(SerializationFeature.WRITE_ENUMS_USING_INDEX);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个案例告诉我们两点：</p><ul><li>Jackson针对序列化和反序列化有大量的细节功能特性，我们可以参考Jackson官方文档来了解这些特性，详见<a href="https://fasterxml.github.io/jackson-databind/javadoc/2.10/com/fasterxml/jackson/databind/SerializationFeature.html" target="_blank" rel="noopener noreferrer">SerializationFeature</a>、<a href="https://fasterxml.github.io/jackson-databind/javadoc/2.10/com/fasterxml/jackson/databind/DeserializationFeature.html" target="_blank" rel="noopener noreferrer">DeserializationFeature</a>和<a href="https://fasterxml.github.io/jackson-databind/javadoc/2.10/com/fasterxml/jackson/databind/MapperFeature.html" target="_blank" rel="noopener noreferrer">MapperFeature</a>。</li><li>忽略多余字段，是我们写业务代码时最容易遇到的一个配置项。Spring Boot在自动配置时贴心地做了全局设置。如果需要设置更多的特性，可以直接修改配置文件spring.jackson.**或设置Jackson2ObjectMapperBuilderCustomizer回调接口，来启用更多设置，无需重新定义ObjectMapper Bean。</li></ul><h2 id="反序列化时要小心类的构造方法" tabindex="-1"><a class="header-anchor" href="#反序列化时要小心类的构造方法"><span>反序列化时要小心类的构造方法</span></a></h2><p>使用Jackson反序列化时，除了要注意忽略额外字段的问题外，还要小心类的构造方法。我们看一个实际的踩坑案例吧。</p><p>有一个APIResult类包装了REST接口的返回体（作为Web控制器的出参），其中boolean类型的success字段代表是否处理成功、int类型的code字段代表处理状态码。</p><p>开始时，在返回APIResult的时候每次都根据code来设置success。如果code是2000，那么success是true，否则是false。后来为了减少重复代码，把这个逻辑放到了APIResult类的构造方法中处理：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public class APIResultWrong {</span></span>
<span class="line"><span>    private boolean success;</span></span>
<span class="line"><span>    private int code;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public APIResultWrong() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public APIResultWrong(int code) {</span></span>
<span class="line"><span>        this.code = code;</span></span>
<span class="line"><span>        if (code == 2000) success = true;</span></span>
<span class="line"><span>        else success = false;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过改动后发现，即使code为2000，返回APIResult的success也是false。比如，我们反序列化两次APIResult，一次使用code<mark>1234，一次使用code</mark>2000：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>ObjectMapper objectMapper;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&amp;quot;wrong&amp;quot;)</span></span>
<span class="line"><span>public void wrong() throws JsonProcessingException {</span></span>
<span class="line"><span>    log.info(&amp;quot;result :{}&amp;quot;, objectMapper.readValue(&amp;quot;{\\&amp;quot;code\\&amp;quot;:1234}&amp;quot;, APIResultWrong.class));</span></span>
<span class="line"><span>    log.info(&amp;quot;result :{}&amp;quot;, objectMapper.readValue(&amp;quot;{\\&amp;quot;code\\&amp;quot;:2000}&amp;quot;, APIResultWrong.class));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志输出如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[17:36:14.591] [http-nio-45678-exec-1] [INFO ] [DeserializationConstructorController:20  ] - result :APIResultWrong(success=false, code=1234)</span></span>
<span class="line"><span>[17:36:14.591] [http-nio-45678-exec-1] [INFO ] [DeserializationConstructorController:21  ] - result :APIResultWrong(success=false, code=2000)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，两次的APIResult的success字段都是false。</p><p>出现这个问题的原因是，<strong>默认情况下，在反序列化的时候，Jackson框架只会调用无参构造方法创建对象</strong>。如果走自定义的构造方法创建对象，需要通过@JsonCreator来指定构造方法，并通过@JsonProperty设置构造方法中参数对应的JSON属性名：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public class APIResultRight {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @JsonCreator</span></span>
<span class="line"><span>    public APIResultRight(@JsonProperty(&amp;quot;code&amp;quot;) int code) {</span></span>
<span class="line"><span>        this.code = code;</span></span>
<span class="line"><span>        if (code == 2000) success = true;</span></span>
<span class="line"><span>        else success = false;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行程序，可以得到正确输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[17:41:23.188] [http-nio-45678-exec-1] [INFO ] [DeserializationConstructorController:26  ] - result :APIResultRight(success=false, code=1234)</span></span>
<span class="line"><span>[17:41:23.188] [http-nio-45678-exec-1] [INFO ] [DeserializationConstructorController:27  ] - result :APIResultRight(success=true, code=2000)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这次传入code==2000时，success可以设置为true。</p><h2 id="枚举作为api接口参数或返回值的两个大坑" tabindex="-1"><a class="header-anchor" href="#枚举作为api接口参数或返回值的两个大坑"><span>枚举作为API接口参数或返回值的两个大坑</span></a></h2><p>在前面的例子中，我演示了如何把枚举序列化为索引值。但对于枚举，我建议尽量在程序内部使用，而不是作为API接口的参数或返回值，原因是枚举涉及序列化和反序列化时会有两个大坑。</p><p>**第一个坑是，客户端和服务端的枚举定义不一致时，会出异常。**比如，客户端版本的枚举定义了4个枚举值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Getter</span></span>
<span class="line"><span>enum StatusEnumClient {</span></span>
<span class="line"><span>    CREATED(1, &amp;quot;已创建&amp;quot;),</span></span>
<span class="line"><span>    PAID(2, &amp;quot;已支付&amp;quot;),</span></span>
<span class="line"><span>    DELIVERED(3, &amp;quot;已送到&amp;quot;),</span></span>
<span class="line"><span>    FINISHED(4, &amp;quot;已完成&amp;quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private final int status;</span></span>
<span class="line"><span>    private final String desc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    StatusEnumClient(Integer status, String desc) {</span></span>
<span class="line"><span>        this.status = status;</span></span>
<span class="line"><span>        this.desc = desc;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端定义了5个枚举值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Getter</span></span>
<span class="line"><span>enum StatusEnumServer {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    CANCELED(5, &amp;quot;已取消&amp;quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private final int status;</span></span>
<span class="line"><span>    private final String desc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    StatusEnumServer(Integer status, String desc) {</span></span>
<span class="line"><span>        this.status = status;</span></span>
<span class="line"><span>        this.desc = desc;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写代码测试一下，使用RestTemplate来发起请求，让服务端返回客户端不存在的枚举值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@GetMapping(&amp;quot;getOrderStatusClient&amp;quot;)</span></span>
<span class="line"><span>public void getOrderStatusClient() {</span></span>
<span class="line"><span>    StatusEnumClient result = restTemplate.getForObject(&amp;quot;http://localhost:45678/enumusedinapi/getOrderStatus&amp;quot;, StatusEnumClient.class);</span></span>
<span class="line"><span>    log.info(&amp;quot;result {}&amp;quot;, result);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&amp;quot;getOrderStatus&amp;quot;)</span></span>
<span class="line"><span>public StatusEnumServer getOrderStatus() {</span></span>
<span class="line"><span>    return StatusEnumServer.CANCELED;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问接口会出现如下异常信息，提示在枚举StatusEnumClient中找不到CANCELED：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JSON parse error: Cannot deserialize value of type \`org.geekbang.time.commonmistakes.enums.enumusedinapi.StatusEnumClient\` from String &amp;quot;CANCELED&amp;quot;: not one of the values accepted for Enum class: [CREATED, FINISHED, DELIVERED, PAID];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要解决这个问题，可以开启Jackson的read_unknown_enum_values_using_default_value反序列化特性，也就是在枚举值未知的时候使用默认值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring.jackson.deserialization.read_unknown_enum_values_using_default_value=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>并为枚举添加一个默认值，使用@JsonEnumDefaultValue注解注释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@JsonEnumDefaultValue</span></span>
<span class="line"><span>UNKNOWN(-1, &amp;quot;未知&amp;quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这个枚举值一定是添加在客户端StatusEnumClient中的，因为反序列化使用的是客户端枚举。</p><p>这里还有一个小坑是，仅仅这样配置还不能让RestTemplate生效这个反序列化特性，还需要配置RestTemplate，来使用Spring Boot的MappingJackson2HttpMessageConverter才行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public RestTemplate restTemplate(MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter) {</span></span>
<span class="line"><span>    return new RestTemplateBuilder()</span></span>
<span class="line"><span>            .additionalMessageConverters(mappingJackson2HttpMessageConverter)</span></span>
<span class="line"><span>            .build();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，请求接口可以返回默认值了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[21:49:03.887] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.e.e.EnumUsedInAPIController:25  ] - result UNKNOWN</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>第二个坑，也是更大的坑，枚举序列化反序列化实现自定义的字段非常麻烦，会涉及Jackson的Bug</strong>。比如，下面这个接口，传入枚举List，为List增加一个CENCELED枚举值然后返回：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@PostMapping(&amp;quot;queryOrdersByStatusList&amp;quot;)</span></span>
<span class="line"><span>public List&amp;lt;StatusEnumServer&amp;gt; queryOrdersByStatus(@RequestBody List&amp;lt;StatusEnumServer&amp;gt; enumServers) {</span></span>
<span class="line"><span>    enumServers.add(StatusEnumServer.CANCELED);</span></span>
<span class="line"><span>    return enumServers;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们希望根据枚举的Desc字段来序列化，传入“已送到”作为入参：</p><img src="https://static001.geekbang.org/resource/image/50/26/50a81c64fef9f9f3a8f57bccaaad5226.png" alt=""><p>会得到异常，提示“已送到”不是正确的枚举值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JSON parse error: Cannot deserialize value of type \`org.geekbang.time.commonmistakes.enums.enumusedinapi.StatusEnumServer\` from String &amp;quot;已送到&amp;quot;: not one of the values accepted for Enum class: [CREATED, CANCELED, FINISHED, DELIVERED, PAID]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显然，这里反序列化使用的是枚举的name，序列化也是一样：</p><img src="https://static001.geekbang.org/resource/image/04/43/0455db08f97feb2382be6e3c8329da43.png" alt=""><p>你可能也知道，要让枚举的序列化和反序列化走desc字段，可以在字段上加@JsonValue注解，修改StatusEnumServer和StatusEnumClient：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@JsonValue</span></span>
<span class="line"><span>private final String desc;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再尝试下，果然可以用desc作为入参了，而且出参也使用了枚举的desc：</p><img src="https://static001.geekbang.org/resource/image/08/2b/08acd86f0cabd174d45f6319bffa802b.png" alt=""><p>但是，如果你认为这样就完美解决问题了，那就大错特错了。你可以再尝试把@JsonValue注解加在int类型的status字段上，也就是希望序列化反序列化走status字段：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@JsonValue</span></span>
<span class="line"><span>private final int status;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个客户端测试一下，传入CREATED和PAID两个枚举值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@GetMapping(&amp;quot;queryOrdersByStatusListClient&amp;quot;)</span></span>
<span class="line"><span>public void queryOrdersByStatusListClient() {</span></span>
<span class="line"><span>    List&amp;lt;StatusEnumClient&amp;gt; request = Arrays.asList(StatusEnumClient.CREATED, StatusEnumClient.PAID);</span></span>
<span class="line"><span>    HttpEntity&amp;lt;List&amp;lt;StatusEnumClient&amp;gt;&amp;gt; entity = new HttpEntity&amp;lt;&amp;gt;(request, new HttpHeaders());</span></span>
<span class="line"><span>    List&amp;lt;StatusEnumClient&amp;gt; response = restTemplate.exchange(&amp;quot;http://localhost:45678/enumusedinapi/queryOrdersByStatusList&amp;quot;,</span></span>
<span class="line"><span>            HttpMethod.POST, entity, new ParameterizedTypeReference&amp;lt;List&amp;lt;StatusEnumClient&amp;gt;&amp;gt;() {}).getBody();</span></span>
<span class="line"><span>    log.info(&amp;quot;result {}&amp;quot;, response);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求接口可以看到，传入的是CREATED和PAID，返回的居然是DELIVERED和FINISHED。果然如标题所说，一来一回你已不是原来的你：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[22:03:03.579] [http-nio-45678-exec-4] [INFO ] [o.g.t.c.e.e.EnumUsedInAPIController:34  ] - result [DELIVERED, FINISHED, UNKNOWN]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>出现这个问题的原因是，<strong>序列化走了status的值，而反序列化并没有根据status来，还是使用了枚举的ordinal()索引值</strong>。这是Jackson<a href="https://github.com/FasterXML/jackson-databind/issues/1850" target="_blank" rel="noopener noreferrer">至今（2.10）没有解决的Bug</a>，应该会在2.11解决。</p><p>如下图所示，我们调用服务端接口，传入一个不存在的status值0，也能反序列化成功，最后服务端的返回是1：</p><img src="https://static001.geekbang.org/resource/image/ac/bd/ac6cd2c0957d1654fced53e99eb556bd.png" alt=""><p>有一个解决办法是，设置@JsonCreator来强制反序列化时使用自定义的工厂方法，可以实现使用枚举的status字段来取值。我们把这段代码加在StatusEnumServer枚举类中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@JsonCreator</span></span>
<span class="line"><span>public static StatusEnumServer parse(Object o) {</span></span>
<span class="line"><span>    return Arrays.stream(StatusEnumServer.values()).filter(value-&amp;gt;o.equals(value.status)).findFirst().orElse(null);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要特别注意的是，我们同样要为StatusEnumClient也添加相应的方法。因为除了服务端接口接收StatusEnumServer参数涉及一次反序列化外，从服务端返回值转换为List还会有一次反序列化：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@JsonCreator</span></span>
<span class="line"><span>public static StatusEnumClient parse(Object o) {</span></span>
<span class="line"><span>    return Arrays.stream(StatusEnumClient.values()).filter(value-&amp;gt;o.equals(value.status)).findFirst().orElse(null);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新调用接口发现，虽然结果正确了，但是服务端不存在的枚举值CANCELED被设置为了null，而不是@JsonEnumDefaultValue设置的UNKNOWN。</p><p>这个问题，我们之前已经通过设置@JsonEnumDefaultValue注解解决了，但现在又出现了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[22:20:13.727] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.e.e.EnumUsedInAPIController:34  ] - result [CREATED, PAID, null]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>原因也很简单，我们自定义的parse方法实现的是找不到枚举值时返回null。</p><p>为彻底解决这个问题，并避免通过@JsonCreator在枚举中自定义一个非常复杂的工厂方法，我们可以实现一个自定义的反序列化器。这段代码比较复杂，我特意加了详细的注释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class EnumDeserializer extends JsonDeserializer&amp;lt;Enum&amp;gt; implements</span></span>
<span class="line"><span>        ContextualDeserializer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private Class&amp;lt;Enum&amp;gt; targetClass;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public EnumDeserializer() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public EnumDeserializer(Class&amp;lt;Enum&amp;gt; targetClass) {</span></span>
<span class="line"><span>        this.targetClass = targetClass;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Enum deserialize(JsonParser p, DeserializationContext ctxt) {</span></span>
<span class="line"><span>        //找枚举中带有@JsonValue注解的字段，这是我们反序列化的基准字段</span></span>
<span class="line"><span>        Optional&amp;lt;Field&amp;gt; valueFieldOpt = Arrays.asList(targetClass.getDeclaredFields()).stream()</span></span>
<span class="line"><span>                .filter(m -&amp;gt; m.isAnnotationPresent(JsonValue.class))</span></span>
<span class="line"><span>                .findFirst();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (valueFieldOpt.isPresent()) {</span></span>
<span class="line"><span>            Field valueField = valueFieldOpt.get();</span></span>
<span class="line"><span>            if (!valueField.isAccessible()) {</span></span>
<span class="line"><span>                valueField.setAccessible(true);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            //遍历枚举项，查找字段的值等于反序列化的字符串的那个枚举项</span></span>
<span class="line"><span>            return Arrays.stream(targetClass.getEnumConstants()).filter(e -&amp;gt; {</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    return valueField.get(e).toString().equals(p.getValueAsString());</span></span>
<span class="line"><span>                } catch (Exception ex) {</span></span>
<span class="line"><span>                    ex.printStackTrace();</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                return false;</span></span>
<span class="line"><span>            }).findFirst().orElseGet(() -&amp;gt; Arrays.stream(targetClass.getEnumConstants()).filter(e -&amp;gt; {</span></span>
<span class="line"><span>                //如果找不到，就需要寻找默认枚举值来替代，同样遍历所有枚举项，查找@JsonEnumDefaultValue注解标识的枚举项</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    return targetClass.getField(e.name()).isAnnotationPresent(JsonEnumDefaultValue.class);</span></span>
<span class="line"><span>                } catch (Exception ex) {</span></span>
<span class="line"><span>                    ex.printStackTrace();</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                return false;</span></span>
<span class="line"><span>            }).findFirst().orElse(null));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public JsonDeserializer&amp;lt;?&amp;gt; createContextual(DeserializationContext ctxt,</span></span>
<span class="line"><span>                                                BeanProperty property) throws JsonMappingException {</span></span>
<span class="line"><span>        targetClass = (Class&amp;lt;Enum&amp;gt;) ctxt.getContextualType().getRawClass();</span></span>
<span class="line"><span>        return new EnumDeserializer(targetClass);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，把这个自定义反序列化器注册到Jackson中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public Module enumModule() {</span></span>
<span class="line"><span>    SimpleModule module = new SimpleModule();</span></span>
<span class="line"><span>    module.addDeserializer(Enum.class, new EnumDeserializer());</span></span>
<span class="line"><span>    return module;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个大坑终于被完美地解决了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[22:32:28.327] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.e.e.EnumUsedInAPIController:34  ] - result [CREATED, PAID, UNKNOWN]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样做，虽然解决了序列化反序列化使用枚举中自定义字段的问题，也解决了找不到枚举值时使用默认值的问题，但解决方案很复杂。因此，我还是建议在DTO中直接使用int或String等简单的数据类型，而不是使用枚举再配合各种复杂的序列化配置，来实现枚举到枚举中字段的映射，会更加清晰明了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾"><span>重点回顾</span></a></h2><p>今天，我基于Redis和Web API的入参和出参两个场景，和你介绍了序列化和反序列化时需要避开的几个坑。</p><p>第一，要确保序列化和反序列化算法的一致性。因为，不同序列化算法输出必定不同，要正确处理序列化后的数据就要使用相同的反序列化算法。</p><p>第二，Jackson有大量的序列化和反序列化特性，可以用来微调序列化和反序列化的细节。需要注意的是，如果自定义ObjectMapper的Bean，小心不要和Spring Boot自动配置的Bean冲突。</p><p>第三，在调试序列化反序列化问题时，我们一定要捋清楚三点：是哪个组件在做序列化反序列化、整个过程有几次序列化反序列化，以及目前到底是序列化还是反序列化。</p><p>第四，对于反序列化默认情况下，框架调用的是无参构造方法，如果要调用自定义的有参构造方法，那么需要告知框架如何调用。更合理的方式是，对于需要序列化的POJO考虑尽量不要自定义构造方法。</p><p>第五，枚举不建议定义在DTO中跨服务传输，因为会有版本问题，并且涉及序列化反序列化时会很复杂，容易出错。因此，我只建议在程序内部使用枚举。</p><p>最后还有一点需要注意，如果需要跨平台使用序列化的数据，那么除了两端使用的算法要一致外，还可能会遇到不同语言对数据类型的兼容问题。这，也是经常踩坑的一个地方。如果你有相关需求，可以多做实验、多测试。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href="https://github.com/JosephZhu1983/java-common-mistakes" target="_blank" rel="noopener noreferrer">这个链接</a>查看。</p><h2 id="思考与讨论" tabindex="-1"><a class="header-anchor" href="#思考与讨论"><span>思考与讨论</span></a></h2><ol><li>在讨论Redis序列化方式的时候，我们自定义了RedisTemplate，让Key使用String序列化、让Value使用JSON序列化，从而使Redis获得的Value可以直接转换为需要的对象类型。那么，使用RedisTemplate&lt;String, Long&gt;能否存取Value是Long的数据呢？这其中有什么坑吗？</li><li>你可以看一下Jackson2ObjectMapperBuilder类源码的实现（注意configure方法），分析一下其除了关闭FAIL_ON_UNKNOWN_PROPERTIES外，还做了什么吗？</li></ol><p>关于序列化和反序列化，你还遇到过什么坑吗？我是朱晔，欢迎在评论区与我留言分享，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>`,162)]))}const c=e(l,[["render",p]]),u=JSON.parse('{"path":"/posts/Java%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF100%E4%BE%8B/%E4%BB%A3%E7%A0%81%E7%AF%87/15%20_%20%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A%E4%B8%80%E6%9D%A5%E4%B8%80%E5%9B%9E%E4%BD%A0%E8%BF%98%E6%98%AF%E5%8E%9F%E6%9D%A5%E7%9A%84%E4%BD%A0%E5%90%97%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是朱晔。今天，我来和你聊聊序列化相关的坑和最佳实践。 序列化是把对象转换为字节流的过程，以方便传输或存储。反序列化，则是反过来把字节流转换为对象的过程。在介绍文件IO的时候，我提到字符编码是把字符转换为二进制的过程，至于怎么转换需要由字符集制定规则。同样地，对象的序列化和反序列化，也需要由序列化算法制定规则。 关于序列化算法，几年前常用的有JD...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Java%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF100%E4%BE%8B/%E4%BB%A3%E7%A0%81%E7%AF%87/15%20_%20%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A%E4%B8%80%E6%9D%A5%E4%B8%80%E5%9B%9E%E4%BD%A0%E8%BF%98%E6%98%AF%E5%8E%9F%E6%9D%A5%E7%9A%84%E4%BD%A0%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是朱晔。今天，我来和你聊聊序列化相关的坑和最佳实践。 序列化是把对象转换为字节流的过程，以方便传输或存储。反序列化，则是反过来把字节流转换为对象的过程。在介绍文件IO的时候，我提到字符编码是把字符转换为二进制的过程，至于怎么转换需要由字符集制定规则。同样地，对象的序列化和反序列化，也需要由序列化算法制定规则。 关于序列化算法，几年前常用的有JD..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":21.72,"words":6516},"filePathRelative":"posts/Java业务开发常见错误100例/代码篇/15 _ 序列化：一来一回你还是原来的你吗？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"15 | 序列化：一来一回你还是原来的你吗？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/f2/f6/f22ac73a565ee8dfcb28a99f300629f6.mp3\\"></audio></p>\\n<p>你好，我是朱晔。今天，我来和你聊聊序列化相关的坑和最佳实践。</p>\\n<p>序列化是把对象转换为字节流的过程，以方便传输或存储。反序列化，则是反过来把字节流转换为对象的过程。在介绍<a href=\\"https://time.geekbang.org/column/article/223051\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文件IO</a>的时候，我提到字符编码是把字符转换为二进制的过程，至于怎么转换需要由字符集制定规则。同样地，对象的序列化和反序列化，也需要由序列化算法制定规则。</p>","autoDesc":true}');export{c as comp,u as data};
