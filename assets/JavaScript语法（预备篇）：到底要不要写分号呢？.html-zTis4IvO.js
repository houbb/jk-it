import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CrA-f6So.js";const l={};function p(r,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="javascript语法-预备篇-到底要不要写分号呢" tabindex="-1"><a class="header-anchor" href="#javascript语法-预备篇-到底要不要写分号呢"><span>JavaScript语法（预备篇）：到底要不要写分号呢？</span></a></h1><p><audio id="audio" title="JavaScript语法（预备篇）：到底要不要写分号呢？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/ac/d1/accffbf5ccf1d32f20fdcba676b784d1.mp3"></audio></p><p>你好，我是winter。</p><p>在我们介绍JavaScript语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。</p><p>这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。</p><p>实际上，行尾使用分号的风格来自于Java，也来自于C语言和C++，这一设计最初是为了降低编译器的工作负担。</p><p>但是，从今天的角度来看，行尾使用分号其实是一种语法噪音，恰好JavaScript语言又提供了相对可用的分号自动补全规则，所以，很多JavaScript的程序员都是倾向于不写分号。</p><p>这里要特意说一点，在今天的文章中，我并不希望去售卖自己的观点（其实我是属于“加分号”党），而是希望比较中立地给你讲清楚相关的知识，让你具备足够的判断力。</p><p>我们首先来了解一下自动插入分号的规则。</p><h2 id="自动插入分号规则" tabindex="-1"><a class="header-anchor" href="#自动插入分号规则"><span>自动插入分号规则</span></a></h2><p>自动插入分号规则其实独立于所有的语法产生式定义，它的规则说起来非常简单，只有三条。</p><ul><li>要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。</li><li>有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。</li><li>源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。</li></ul><p>这样描述是比较难以理解的，我们一起看一些实际的例子进行分析：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let a = 1</span></span>
<span class="line"><span>void function(a){</span></span>
<span class="line"><span>    console.log(a);</span></span>
<span class="line"><span>}(a);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，第一行的结尾处有换行符，接下来void关键字接在1之后是不合法的，这命中了我们的第一条规则，因此会在void前插入分号。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var a = 1, b = 1, c = 1;</span></span>
<span class="line"><span>a</span></span>
<span class="line"><span>++</span></span>
<span class="line"><span>b</span></span>
<span class="line"><span>++</span></span>
<span class="line"><span>c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是个著名的例子，我们看第二行的a之后，有换行符，后面遇到了++运算符，a后面跟++是合法的语法，但是我们看看JavaScript标准定义中，有[no LineTerminator here]这个字样，这是一个语法定义中的规则，你可以感受一下这个规则的内容（下一小节，我会给你详细介绍no LineTerminator here ）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>UpdateExpression[Yield, Await]:</span></span>
<span class="line"><span>    LeftHandSideExpression[?Yield, ?Await]</span></span>
<span class="line"><span>    LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]++</span></span>
<span class="line"><span>    LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]--</span></span>
<span class="line"><span>    ++UnaryExpression[?Yield, ?Await]</span></span>
<span class="line"><span>    --UnaryExpression[?Yield, ?Await]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是，这里a的后面就要插入一个分号了。所以这段代码最终的结果，b和c都变成了2，而a还是1。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(function(a){</span></span>
<span class="line"><span>    console.log(a);</span></span>
<span class="line"><span>})()</span></span>
<span class="line"><span>(function(a){</span></span>
<span class="line"><span>    console.log(a);</span></span>
<span class="line"><span>})()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子是比较有实际价值的例子，这里两个function调用的写法被称作IIFE（立即执行的函数表达式），是个常见技巧。</p><p>这段代码意图上显然是形成两个IIFE。</p><p>我们来看第三行结束的位置，JavaScript引擎会认为函数返回的可能是个函数，那么，在后面再跟括号形成函数调用就是合理的，因此这里不会自动插入分号。</p><p>这是一些鼓励不写分号的编码风格会要求大家写IIFE时必须在行首加分号的原因。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function f(){</span></span>
<span class="line"><span>    return/*</span></span>
<span class="line"><span>        This is a return value.</span></span>
<span class="line"><span>    */1;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>f();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，return和1被用注释分隔开了。</p><p>根据JavaScript自动插入分号规则，<strong>带换行符的注释也被认为是有换行符</strong>，而恰好的是，return也有[no LineTerminator here]规则的要求。所以这里会自动插入分号，f执行的返回值是undefined。</p><h2 id="no-lineterminator-here-规则" tabindex="-1"><a class="header-anchor" href="#no-lineterminator-here-规则"><span>no LineTerminator here 规则</span></a></h2><p>好了，到这里我们已经讲清楚了分号自动插入的规则，但是我们要想彻底掌握分号的奥秘，就必须要对JavaScript的语法定义做一些数据挖掘工作。</p><p>no LineTerminator here规则表示它所在的结构中的这一位置不能插入换行符。</p><p>自动插入分号规则的第二条：有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。跟no LineTerminator here规则强相关，那么我们就找出JavaScript语法定义中的这些规则。</p><img src="https://static001.geekbang.org/resource/image/c3/ad/c3ffbc89e049ad1901d4108c8ad88aad.jpg" alt=""><p>为了方便你理解，我把产生式换成了实际的代码。</p><p>下面一段代码展示了，带标签的continue语句，不能在continue后插入换行。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>outer:for(var j = 0; j &amp;lt; 10; j++)</span></span>
<span class="line"><span>    for(var i = 0; i &amp;lt; j; i++)</span></span>
<span class="line"><span>        continue /*no LineTerminator here*/ outter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>break跟continue是一样的，break后也不能插入换行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>outer:for(var j = 0; j &amp;lt; 10; j++)</span></span>
<span class="line"><span>    for(var i = 0; i &amp;lt; j; i++)</span></span>
<span class="line"><span>        break /*no LineTerminator here*/ outter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们前面已经提到过return和后自增、后自减运算符。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function f(){</span></span>
<span class="line"><span>    return /*no LineTerminator here*/1;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>i/*no LineTerminator here*/++</span></span>
<span class="line"><span>i/*no LineTerminator here*/--</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以及，throw和Exception之间也不能插入换行符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>throw/*no LineTerminator here*/new Exception(&quot;error&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>凡是async关键字，后面都不能插入换行符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>async/*no LineTerminator here*/function f(){</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>const f = async/*no LineTerminator here*/x =&amp;gt; x*x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数的箭头前，也不能插入换行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const f = x/*no LineTerminator here*/=&amp;gt; x*x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>yield之后，不能插入换行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function *g(){</span></span>
<span class="line"><span>    var i = 0;</span></span>
<span class="line"><span>    while(true)</span></span>
<span class="line"><span>        yield/*no LineTerminator here*/i++;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我已经整理了所有标准中的no LineTerminator here规则，实际上，no LineTerminator here规则的存在，多数情况是为了保证自动插入分号行为是符合预期的，但是令人遗憾的是，JavaScript在设计的最初，遗漏了一些重要的情况，所以有一些不符合预期的情况出现，需要我们格外注意。</p><h2 id="不写分号需要注意的情况" tabindex="-1"><a class="header-anchor" href="#不写分号需要注意的情况"><span>不写分号需要注意的情况</span></a></h2><p>下面我们来看几种不写分号容易造成错误的情况，你可以稍微注意一下，避免发生同样的问题。</p><h3 id="以括号开头的语句" tabindex="-1"><a class="header-anchor" href="#以括号开头的语句"><span>以括号开头的语句</span></a></h3><p>我们在前面的案例中，已经展示了一种情况，那就是以括号开头的语句：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(function(a){</span></span>
<span class="line"><span>    console.log(a);</span></span>
<span class="line"><span>})()/*这里没有被自动插入分号*/</span></span>
<span class="line"><span>(function(a){</span></span>
<span class="line"><span>    console.log(a);</span></span>
<span class="line"><span>})()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。</p><h3 id="以数组开头的语句" tabindex="-1"><a class="header-anchor" href="#以数组开头的语句"><span>以数组开头的语句</span></a></h3><p>除了括号，以数组开头的语句也十分危险：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var a = [[]]/*这里没有被自动插入分号*/</span></span>
<span class="line"><span>[3, 2, 1, 0].forEach(e =&amp;gt; console.log(e))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码本意是一个变量a赋值，然后对一个数组执行forEach，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，我这个例子展示的情况，甚至不会抛出错误，这对于代码排查问题是个噩梦。</p><h3 id="以正则表达式开头的语句" tabindex="-1"><a class="header-anchor" href="#以正则表达式开头的语句"><span>以正则表达式开头的语句</span></a></h3><p>正则表达式开头的语句也值得你去多注意一下。我们来看这个例子。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var x = 1, g = {test:()=&amp;gt;0}, b = 1/*这里没有被自动插入分号*/</span></span>
<span class="line"><span>/(a)/g.test(&quot;abc&quot;)</span></span>
<span class="line"><span>console.log(RegExp.$1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母a，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除号，后面的意思就都变了。</p><p>注意，我构造的这个例子跟上面的例子一样，同样不会抛错，凡是这一类情况，都非常致命。</p><h3 id="以template开头的语句" tabindex="-1"><a class="header-anchor" href="#以template开头的语句"><span>以Template开头的语句</span></a></h3><p>以Template开头的语句比较少见，但是跟正则配合时，仍然不是不可能出现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>var f = function(){</span></span>
<span class="line"><span>  return &quot;&quot;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>var g = f/*这里没有被自动插入分号*/</span></span>
<span class="line"><span>\`Template\`.match(/(a)/);</span></span>
<span class="line"><span>console.log(RegExp.$1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码本意是声明函数f，然后赋值给g，再测试Template中是否含有字母a。但是因为没有自动插入分号，函数f被认为跟Template一体的，进而被莫名其妙地执行了一次。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一节课，我们讨论了要不要加分号的问题。</p><p>首先我们介绍了自动插入分号机制，又对JavaScript语法中的no line terminator规则做了个整理，最后，我挑选了几种情况，为你介绍了不写分号需要注意的一些常见的错误。</p><p>最后留给你一个问题，请找一些开源项目，看看它们的编码规范是否要求加分号，欢迎留言讨论。</p>`,72)]))}const c=i(l,[["render",p]]),o=JSON.parse('{"path":"/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%B8%80%EF%BC%9AJavaScript/JavaScript%E8%AF%AD%E6%B3%95%EF%BC%88%E9%A2%84%E5%A4%87%E7%AF%87%EF%BC%89%EF%BC%9A%E5%88%B0%E5%BA%95%E8%A6%81%E4%B8%8D%E8%A6%81%E5%86%99%E5%88%86%E5%8F%B7%E5%91%A2%EF%BC%9F.html","title":"JavaScript语法（预备篇）：到底要不要写分号呢？","lang":"zh-CN","frontmatter":{"description":"JavaScript语法（预备篇）：到底要不要写分号呢？ 你好，我是winter。 在我们介绍JavaScript语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。 这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。 实际上，行尾使用分号的风格来自于Java，也来自于C语言和C++，这一设计最初是为了...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/%E6%A8%A1%E5%9D%97%E4%B8%80%EF%BC%9AJavaScript/JavaScript%E8%AF%AD%E6%B3%95%EF%BC%88%E9%A2%84%E5%A4%87%E7%AF%87%EF%BC%89%EF%BC%9A%E5%88%B0%E5%BA%95%E8%A6%81%E4%B8%8D%E8%A6%81%E5%86%99%E5%88%86%E5%8F%B7%E5%91%A2%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"JavaScript语法（预备篇）：到底要不要写分号呢？"}],["meta",{"property":"og:description","content":"JavaScript语法（预备篇）：到底要不要写分号呢？ 你好，我是winter。 在我们介绍JavaScript语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。 这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。 实际上，行尾使用分号的风格来自于Java，也来自于C语言和C++，这一设计最初是为了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript语法（预备篇）：到底要不要写分号呢？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":7.24,"words":2173},"filePathRelative":"posts/重学前端/模块一：JavaScript/JavaScript语法（预备篇）：到底要不要写分号呢？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"JavaScript语法（预备篇）：到底要不要写分号呢？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/ac/d1/accffbf5ccf1d32f20fdcba676b784d1.mp3\\"></audio></p>\\n<p>你好，我是winter。</p>\\n<p>在我们介绍JavaScript语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。</p>\\n<p>这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。</p>","autoDesc":true}');export{c as comp,o as data};
