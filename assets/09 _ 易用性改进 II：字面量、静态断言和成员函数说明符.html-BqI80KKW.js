import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-6Bz2fGO5.js";const l={};function p(r,s){return i(),n("div",null,s[0]||(s[0]=[a(`<p><audio id="audio" title="09 | 易用性改进 II：字面量、静态断言和成员函数说明符" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/63/cb/63290510c554cb7ef0c7b3c9333b9fcb.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>本讲我们继续易用性的话题，看看现代 C++ 带来的其他易用性改进。</p><h2 id="自定义字面量" tabindex="-1"><a class="header-anchor" href="#自定义字面量"><span>自定义字面量</span></a></h2><p>字面量（literal）是指在源代码中写出的固定常量，它们在 C++98 里只能是原生类型，如：</p><ul><li><code>&quot;hello&quot;</code>，字符串字面量，类型是 <code>const char[6]</code></li><li><code>1</code>，整数字面量，类型是 <code>int</code></li><li><code>0.0</code>，浮点数字面量，类型是 <code>double</code></li><li><code>3.14f</code>，浮点数字面量，类型是 <code>float</code></li><li><code>123456789ul</code>，无符号长整数字面量，类型是 <code>unsigned long</code></li></ul><p>C++11 引入了自定义字面量，可以使用 <code>operator&quot;&quot; 后缀</code> 来将用户提供的字面量转换成实际的类型。C++14 则在标准库中加入了不少标准字面量。下面这个程序展示了它们的用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;chrono&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;complex&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;string&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;thread&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;i * i = &quot; &amp;lt;&amp;lt; 1i * 1i</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;Waiting for 500ms&quot;</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  this_thread::sleep_for(500ms);</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;Hello world&quot;s.substr(0, 5)</span></span>
<span class="line"><span>       &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是：</p><blockquote></blockquote><p>\`i * i = (-1,0)\`<br> \`Waiting for 500ms\`<br> \`Hello\`</p><p>上面这个例子展示了 C++ 标准里提供的帮助生成虚数、时间和 <code>basic_string</code> 字面量的后缀。一个需要注意的地方是，我在上面使用了 <code>using namespace std</code>，这会同时引入 <code>std</code> 名空间和里面的内联名空间（inline namespace），包括了上面的字面量运算符所在的三个名空间：</p><ul><li><code>std::literals::complex_literals</code></li><li><code>std::literals::chrono_literals</code></li><li><code>std::literals::string_literals</code></li></ul><p>在产品项目中，一般不会（也不应该）全局使用 <code>using namespace std</code>（不过，为节约篇幅起见，专栏里的很多例子，特别是不完整的例子，还是默认使用了 <code>using namespace std</code>）。这种情况下，应当在使用到这些字面量的作用域里导入需要的名空间，以免发生冲突。在类似上面的例子里，就是在函数体的开头写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>using namespace std::literals::</span></span>
<span class="line"><span>  chrono_literals;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>等等。</p><p>要在自己的类里支持字面量也相当容易，唯一的限制是非标准的字面量后缀必须以下划线 <code>_</code> 打头。比如，假如我们有下面的长度类：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct length {</span></span>
<span class="line"><span>  double value;</span></span>
<span class="line"><span>  enum unit {</span></span>
<span class="line"><span>    metre,</span></span>
<span class="line"><span>    kilometre,</span></span>
<span class="line"><span>    millimetre,</span></span>
<span class="line"><span>    centimetre,</span></span>
<span class="line"><span>    inch,</span></span>
<span class="line"><span>    foot,</span></span>
<span class="line"><span>    yard,</span></span>
<span class="line"><span>    mile,</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>  static constexpr double factors[] =</span></span>
<span class="line"><span>    {1.0,    1000.0,  1e-3,</span></span>
<span class="line"><span>     1e-2,   0.0254,  0.3048,</span></span>
<span class="line"><span>     0.9144, 1609.344};</span></span>
<span class="line"><span>  explicit length(double v,</span></span>
<span class="line"><span>                  unit u = metre)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    value = v * factors[u];</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>length operator+(length lhs,</span></span>
<span class="line"><span>                 length rhs)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return length(lhs.value +</span></span>
<span class="line"><span>                rhs.value);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 可能有其他运算符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以手写 <code>length(1.0, length::metre)</code> 这样的表达式，但估计大部分开发人员都不愿意这么做吧。反过来，如果我们让开发人员这么写，大家应该还是基本乐意的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.0_m + 10.0_cm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要允许上面这个表达式，我们只需要提供下面的运算符即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>length operator&quot;&quot; _m(long double v)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return length(v, length::metre);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>length operator&quot;&quot; _cm(long double v)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return length(v, length::centimetre);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果美国国家航空航天局采用了类似的系统的话，火星气候探测者号的事故也许就不会发生了 [1]。当然，历史无法重来，而且 C++ 引入这样的语法已经是在事故发生之后十多年了……</p><p>关于自定义字面量的进一步技术细节，请参阅参考资料 [2]。</p><h2 id="二进制字面量" tabindex="-1"><a class="header-anchor" href="#二进制字面量"><span>二进制字面量</span></a></h2><p>你一定知道 C++ 里有 <code>0x</code> 前缀，可以让开发人员直接写出像 <code>0xFF</code> 这样的十六进制字面量。另外一个目前使用得稍少的前缀就是 <code>0</code> 后面直接跟 0–7 的数字，表示八进制的字面量，在跟文件系统打交道的时候还会经常用到：有经验的 Unix 程序员可能会觉得 <code>chmod(path, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)</code> 并不比 <code>chmod(path, 0644)</code> 更为直观。从 C++14 开始，我们对于二进制也有了直接的字面量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>unsigned mask = 0b111000000;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这在需要比特级操作等场合还是非常有用的。</p><p>不过，遗憾的是， I/O streams 里只有 <code>dec</code>、<code>hex</code>、<code>oct</code> 三个操纵器（manipulator），而没有 <code>bin</code>，因而输出一个二进制数不能像十进制、十六进制、八进制那么直接。一个间接方式是使用 <code>bitset</code>，但调用者需要手工指定二进制位数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;bitset&amp;gt;</span></span>
<span class="line"><span>cout &amp;lt;&amp;lt; bitset&amp;lt;9&amp;gt;(mask) &amp;lt;&amp;lt; endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><p><code>111000000</code></p><h2 id="数字分隔符" tabindex="-1"><a class="header-anchor" href="#数字分隔符"><span>数字分隔符</span></a></h2><p>数字长了之后，看清位数就变得麻烦了。有了二进制字面量，这个问题变得分外明显。C++14 开始，允许在数字型字面量中任意添加 <code>&#39;</code> 来使其更可读。具体怎么添加，完全由程序员根据实际情况进行约定。某些常见的情况可能会是：</p><ul><li>十进制数字使用三位的分隔，对应英文习惯的 thousand、million 等单位。</li><li>十进制数字使用四位的分隔，对应中文习惯的万、亿等单位。</li><li>十六进制数字使用两位或四位的分隔，对应字节或双字节。</li><li>二进制数字使用三位的分隔，对应文件系统的权限分组。</li><li>等等。</li></ul><p>一些实际例子如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>unsigned mask = 0b111&#39;000&#39;000;</span></span>
<span class="line"><span>long r_earth_equatorial = 6&#39;378&#39;137;</span></span>
<span class="line"><span>double pi = 3.14159&#39;26535&#39;89793;</span></span>
<span class="line"><span>const unsigned magic = 0x44&#39;42&#39;47&#39;4E;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态断言" tabindex="-1"><a class="header-anchor" href="#静态断言"><span>静态断言</span></a></h2><p>C++98 的 <code>assert</code> 允许在运行时检查一个函数的前置条件是否成立。没有一种方法允许开发人员在编译的时候检查假设是否成立。比如，如果模板有个参数 <code>alignment</code>，表示对齐，那我们最好在编译时就检查 <code>alignment</code> 是不是二的整数次幂。之前人们用了一些模板技巧来达到这个目的，但输出的信息并不那么友善。比如，我之前使用的方法，会产生类似下面这样的输出：</p><img src="https://static001.geekbang.org/resource/image/59/a5/59fa97e766d6c363ae23546e211774a5.png" alt=""><p>能起作用，但不够直观。C++11 直接从语言层面提供了静态断言机制，不仅能输出更好的信息，而且适用性也更好，可以直接放在类的定义中，而不像之前用的特殊技巧只能放在函数体里。对于类似上面的情况，现在的输出是：</p><img src="https://static001.geekbang.org/resource/image/37/48/37c7f1703b6c2d09137ccf3a5065be48.png" alt=""><p>静态断言语法上非常简单，就是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static_assert(编译期条件表达式,</span></span>
<span class="line"><span>              可选输出信息);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>产生上面的示例错误信息的代码是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static_assert((alignment &amp;amp; (alignment - 1)) == 0,</span></span>
<span class="line"><span>  &quot;Alignment must be power of two&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="default-和-delete-成员函数" tabindex="-1"><a class="header-anchor" href="#default-和-delete-成员函数"><span>default 和 delete 成员函数</span></a></h2><p>在类的定义时，C++ 有一些规则决定是否生成默认的特殊成员函数。这些特殊成员函数可能包括：</p><ul><li>默认构造函数</li><li>析构函数</li><li>拷贝构造函数</li><li>拷贝赋值函数</li><li>移动构造函数</li><li>移动赋值函数</li></ul><p>生成这些特殊成员函数（或不生成）的规则比较复杂，感兴趣的话你可以查看参考资料 [3]。每个特殊成员函数有几种不同的状态：</p><ul><li>隐式声明还是用户声明</li><li>默认提供还是用户提供</li><li>正常状态还是删除状态</li></ul><p>这三个状态是可组合的，虽然不是所有的组合都有效。隐式声明的必然是默认提供的；默认提供的才可能被删除；用户提供的也必然是用户声明的。</p><p>如果成员和父类没有特殊原因导致对象不可拷贝或移动，在用户不声明这些成员函数的情况下，编译器会自动产生这些成员函数，即隐式声明、默认提供、正常状态。有特殊成员、用户声明的话，情况就非常复杂了：</p><ul><li>没有初始化的非静态 const 数据成员和引用类型数据成员会导致默认提供的默认构造函数被删除。</li><li>非静态的 const 数据成员和引用类型数据成员会导致默认提供的拷贝构造函数、拷贝赋值函数、移动构造函数和移动赋值函数被删除。</li><li>用户如果没有自己提供一个拷贝构造函数（必须形如 <code>Obj(Obj&amp;amp;)</code> 或 <code>Obj(const Obj&amp;amp;)</code>；不是模板），编译器会隐式声明一个。</li><li>用户如果没有自己提供一个拷贝赋值函数（必须形如 <code>Obj&amp;amp; operator=(Obj&amp;amp;)</code> 或 <code>Obj&amp;amp; operator=(const Obj&amp;amp;)</code>；不是模板），编译器会隐式声明一个。</li><li>用户如果自己声明了一个移动构造函数或移动赋值函数，则默认提供的拷贝构造函数和拷贝赋值函数被删除。</li><li>用户如果没有自己声明拷贝构造函数、拷贝赋值函数、移动赋值函数和析构函数，编译器会隐式声明一个移动构造函数。</li><li>用户如果没有自己声明拷贝构造函数、拷贝赋值函数、移动构造函数和析构函数，编译器会隐式声明一个移动赋值函数。</li><li>……</li></ul><p>我不鼓励你去死记硬背这些规则，而是希望你在项目和测试中体会其缘由。我认为这些规则还相当合理，虽然有略偏保守之嫌。尤其是关于移动构造和赋值：只要用户声明了另外的特殊成员函数中的任何一个，编译器就不默认提供了。不过嘛，缺省慢点总比缺省不安全要好……</p><p>我们这儿主要要说的是，我们可以改变缺省行为，在编译器能默认提供特殊成员函数时将其删除，或在编译器不默认提供特殊成员函数时明确声明其需要默认提供（不过，要注意，即使用户要求默认提供，编译器也可能根据其他规则将特殊成员函数标为删除）。</p><p>还是举例子来说明一下。对于下面这样的类，编译器看到有用户提供的构造函数，就会不默认提供默认构造函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename T&amp;gt;</span></span>
<span class="line"><span>class my_array {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  my_array(size_t size);</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>private:</span></span>
<span class="line"><span>  T*     data_{nullptr};</span></span>
<span class="line"><span>  size_t size_{0};</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有默认初始化时，我们如果需要默认构造函数，就需要手工写一个，如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  my_array()</span></span>
<span class="line"><span>    : data_(nullptr)</span></span>
<span class="line"><span>    , size_(0) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可有了默认初始化之后，这个构造函数显然就不必要了，所以我们现在可以写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  my_array() = default;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再来一个反向的例子。我们<a href="https://time.geekbang.org/column/article/169225" target="_blank" rel="noopener noreferrer">[第 1 讲]</a> 里的 <code>shape_wrapper</code>，它的复制行为是不安全的。我们可以像<a href="https://time.geekbang.org/column/article/169263" target="_blank" rel="noopener noreferrer">[第 2 讲]</a> 里一样去改进它，但如果正常情况不需要复制行为、只是想防止其他开发人员误操作时，我们可以简单地在类的定义中加入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class shape_wrapper {</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>  shape_wrapper(</span></span>
<span class="line"><span>    const shape_wrapper&amp;amp;) = delete;</span></span>
<span class="line"><span>  shape_wrapper&amp;amp; operator=(</span></span>
<span class="line"><span>    const shape_wrapper&amp;amp;) = delete;</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 C++11 之前，我们可能会用在 <code>private</code> 段里声明这些成员函数的方法，来达到相似的目的。但目前这个语法效果更好，可以产生更明确的错误信息。另外，你可以注意一下，用户声明成删除也是一种声明，因此编译器不会提供默认版本的移动构造和移动赋值函数。</p><h2 id="override-和-final-说明符" tabindex="-1"><a class="header-anchor" href="#override-和-final-说明符"><span>override 和 final 说明符</span></a></h2><p><code>override</code> 和 <code>final</code> 是两个 C++11 引入的新说明符。它们不是关键词，仅在出现在函数声明尾部时起作用，不影响我们使用这两个词作变量名等其他用途。这两个说明符可以单个或组合使用，都是加在类成员函数声明的尾部。</p><p><code>override</code> 显式声明了成员函数是一个虚函数且覆盖了基类中的该函数。如果有 <code>override</code> 声明的函数不是虚函数，或基类中不存在这个虚函数，编译器会报告错误。这个说明符的主要作用有两个：</p><ul><li>给开发人员更明确的提示，这个函数覆写了基类的成员函数；</li><li>让编译器进行额外的检查，防止程序员由于拼写错误或代码改动没有让基类和派生类中的成员函数名称完全一致。</li></ul><p><code>final</code> 则声明了成员函数是一个虚函数，且该虚函数不可在派生类中被覆盖。如果有一点没有得到满足的话，编译器就会报错。</p><p><code>final</code> 还有一个作用是标志某个类或结构不可被派生。同样，这时应将其放在被定义的类或结构名后面。</p><p>用法示意如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class A {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  virtual void foo();</span></span>
<span class="line"><span>  virtual void bar();</span></span>
<span class="line"><span>  void foobar();</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class B : public A {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  void foo() override; // OK</span></span>
<span class="line"><span>  void bar() override final; // OK</span></span>
<span class="line"><span>  //void foobar() override;</span></span>
<span class="line"><span>  // 非虚函数不能 override</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class C final : public B {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>  void foo() override; // OK</span></span>
<span class="line"><span>  //void bar() override;</span></span>
<span class="line"><span>  // final 函数不可 override</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class D : public C {</span></span>
<span class="line"><span>  // 错误：final 类不可派生</span></span>
<span class="line"><span>  …</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>今天我们介绍了现代 C++ 引入的另外几个易用性改进：自定义字面量，二进制字面量，数字分隔符，静态断言，default 和 delete 成员函数，及 override 和 final。同上一讲介绍的易用性改进一样，这些新功能可以改进代码的可读性，同时也不会带来额外的开销。在任何有条件使用满足新 C++ 标准的编译器的项目中，都应该考虑使用这些新特性。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>你最喜欢的 C++ 易用性改进是什么？为什么？</p><p>欢迎留言和我分享你的看法！</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] Wikipedia, “<strong>Mars Climate Orbiter</strong>”. <a href="https://en.wikipedia.org/wiki/Mars_Climate_Orbiter" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Mars_Climate_Orbiter</a></p><p>[1a] 维基百科, “火星气候探测者号”. <a href="https://zh.wikipedia.org/zh-cn/%E7%81%AB%E6%98%9F%E6%B0%A3%E5%80%99%E6%8E%A2%E6%B8%AC%E8%80%85%E8%99%9F" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/火星氣候探測者號</a></p><p>[2] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “User-defined literals”. <a href="https://en.cppreference.com/w/cpp/language/user_literal" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/language/user_literal</a></p><p>[2a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “用户定义字面量”. <a href="https://zh.cppreference.com/w/cpp/language/user_literal" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/language/user_literal</a></p><p>[3] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Non-static member functions”, section “Special member functions”. <a href="https://en.cppreference.com/w/cpp/language/member_functions" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/language/member_functions</a></p><p>[3a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “非静态成员函数”, “特殊成员函数”部分. <a href="https://zh.cppreference.com/w/cpp/language/member_functions" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/language/member_functions</a></p>`,85)]))}const t=e(l,[["render",p]]),o=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/09%20_%20%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B%20II%EF%BC%9A%E5%AD%97%E9%9D%A2%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E%E7%AC%A6.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是吴咏炜。 本讲我们继续易用性的话题，看看现代 C++ 带来的其他易用性改进。 自定义字面量 字面量（literal）是指在源代码中写出的固定常量，它们在 C++98 里只能是原生类型，如： \\"hello\\"，字符串字面量，类型是 const char[6] 1，整数字面量，类型是 int 0.0，浮点数字面量，类型是 double 3.14f，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%9F%BA%E7%A1%80%E7%AF%87/09%20_%20%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B%20II%EF%BC%9A%E5%AD%97%E9%9D%A2%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是吴咏炜。 本讲我们继续易用性的话题，看看现代 C++ 带来的其他易用性改进。 自定义字面量 字面量（literal）是指在源代码中写出的固定常量，它们在 C++98 里只能是原生类型，如： \\"hello\\"，字符串字面量，类型是 const char[6] 1，整数字面量，类型是 int 0.0，浮点数字面量，类型是 double 3.14f，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":11.76,"words":3529},"filePathRelative":"posts/现代C++实战30讲/基础篇/09 _ 易用性改进 II：字面量、静态断言和成员函数说明符.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"09 | 易用性改进 II：字面量、静态断言和成员函数说明符\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/63/cb/63290510c554cb7ef0c7b3c9333b9fcb.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>本讲我们继续易用性的话题，看看现代 C++ 带来的其他易用性改进。</p>\\n<h2>自定义字面量</h2>\\n<p>字面量（literal）是指在源代码中写出的固定常量，它们在 C++98 里只能是原生类型，如：</p>","autoDesc":true}');export{t as comp,o as data};
