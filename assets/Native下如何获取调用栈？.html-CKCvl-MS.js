import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,o as s}from"./app-6Bz2fGO5.js";const r={};function t(p,e){return s(),n("div",null,e[0]||(e[0]=[i(`<p><audio id="audio" title="Native下如何获取调用栈？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/6c/15/6c87ddee93100bc7b6f330617e4bb215.mp3"></audio></p><p>你好，我是simsun，曾在微信从事Android开发，也是开源爱好者、Rust语言“铁粉”。应绍文邀请，很高兴可以在“高手课”里和你分享一些编译方面的底层知识。</p><p>当我们在调试Native崩溃或者在做profiling的时候是十分依赖backtrace的，高质量的backtrace可以大大减少我们修复崩溃的时间。但你是否了解系统是如何生成backtrace的呢？今天我们就来探索一下backtrace背后的故事。</p><p>下面是一个常见的Native崩溃。通常崩溃本身并没有任何backtrace信息，可以直接获得的就是当前寄存器的值，但显然backtrace才是能够帮助我们修复Bug的关键。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pid: 4637, tid: 4637, name: crasher  &amp;gt;&amp;gt;&amp;gt; crasher &amp;lt;&amp;lt;&amp;lt;</span></span>
<span class="line"><span>signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------</span></span>
<span class="line"><span>Abort message: &#39;some_file.c:123: some_function: assertion &amp;quot;false&amp;quot; failed&#39;</span></span>
<span class="line"><span>    r0  00000000  r1  0000121d  r2  00000006  r3  00000008</span></span>
<span class="line"><span>    r4  0000121d  r5  0000121d  r6  ffb44a1c  r7  0000010c</span></span>
<span class="line"><span>    r8  00000000  r9  00000000  r10 00000000  r11 00000000</span></span>
<span class="line"><span>    ip  ffb44c20  sp  ffb44a08  lr  eace2b0b  pc  eace2b16</span></span>
<span class="line"><span>backtrace:</span></span>
<span class="line"><span>    #00 pc 0001cb16  /system/lib/libc.so (abort+57)</span></span>
<span class="line"><span>    #01 pc 0001cd8f  /system/lib/libc.so (__assert2+22)</span></span>
<span class="line"><span>    #02 pc 00001531  /system/bin/crasher (do_action+764)</span></span>
<span class="line"><span>    #03 pc 00002301  /system/bin/crasher (main+68)</span></span>
<span class="line"><span>    #04 pc 0008a809  /system/lib/libc.so (__libc_init+48)</span></span>
<span class="line"><span>    #05 pc 00001097  /system/bin/crasher (_start_main+38)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在阅读后面的内容之前，你可以先给自己2分钟时间，思考一下系统是如何生成backtrace的呢？我们通常把生成backtrace的过程叫作unwind，unwind看似和我们平时开发并没有什么关系，但其实很多功能都是依赖unwind的。举个例子，比如你要绘制火焰图或者是在崩溃发生时得到backtrace，都需要依赖unwind。</p><h2 id="书本中的unwind" tabindex="-1"><a class="header-anchor" href="#书本中的unwind"><span>书本中的unwind</span></a></h2><p><strong>1. 函数调用过程</strong></p><p>如果你在大学时期修过汇编原理这门课程，相信你会对下面的内容还有印象。下图就是一个非常标准的函数调用的过程。</p><img src="https://static001.geekbang.org/resource/image/09/2a/09cd560f823de783e22af03a5f837f2a.png" alt=""><li> 首先假设我们处于函数main()并准备调用函数foo()，调用方会按倒序压入参数。此时第一个参数会在调用栈栈顶。 </li><li> 调用invoke foo()伪指令，压入当前寄存器EIP的值到栈，然后载入函数foo()的地址到EIP。 </li><li> 此时，由于我们已经更改了EIP的值（为foo()的地址），相当于我们已经进入了函数foo()。在执行一个函数之前，编译器都会给每个函数写一段序言（prologue），这里会压入旧的EBP值，并赋予当前EBP和ESP新的值，从而形成新的一个函数栈。 </li><li> 下一步就行执行函数foo()本身的代码了。 </li><li> 结束执行函数foo() 并准备返回，这里编译器也会给每个函数插入一段尾声（epilogue）用于恢复调用方的ESP和EBP来重建之前函数的栈和恢复寄存器。 </li><li> 执行返回指令（ret），被调用函数的尾声（epilogue）已经恢复了EBP和ESP，然后我们可以从被恢复的栈中依次pop出EIP、所有的参数以及被暂存的寄存器的值。 </li><p>读到这里，相信如果没有学过汇编原理的同学肯定会有一些懵，我来解释一下上面提到的寄存器缩写的具体含义，上述命名均使用了x86的命名方式。讲这些是希望你对函数调用有一个初步的理解，其中有很多细节在不同体系结构、不同编译器上的行为都有所区别，所以请你放松心情，跟我一起继续向后看。</p><blockquote></blockquote><p>EBP：基址指针寄存器，指向栈帧的底部。<br> 在ARM体系结构中，R11（ARM code）或者R7（Thumb code）起到了类似的作用。在ARM64中，此寄存器为X29。<br> ESP：栈指针寄存器，指向栈帧的栈顶 ， 在ARM下寄存器为R13。<br> EIP：指令寄存器，存储的是CPU下次要执行的指令的地址，ARM下为PC，寄存器为R15。</p><p><strong>2. 恢复调用帧</strong></p><p>如果我们把上述过程缩小，站在更高一层视角去看，所有的函数调用栈都会形成调用帧（stack frame），每一个帧中都保存了足够的信息可以恢复调用函数的栈帧。</p><img src="https://static001.geekbang.org/resource/image/01/45/017b900048f1be70ec870ea0750d2145.png" alt=""><p>我们这里忽略掉其他不相关的细节，重点关注一下EBP、ESP和EIP。你可以看到EBP和ESP分别指向执行函数栈的栈底和栈顶。每次函数调用都会保存EBP和EIP用于在返回时恢复函数栈帧。这里所有被保存的EBP就像一个链表指针，不断地指向调用函数的EBP。 这样我们就可以此为线索，十分优雅地恢复整个调用栈。</p><img src="https://static001.geekbang.org/resource/image/7a/f8/7ab1f6e1774731ec96b9c68843a73df8.png" alt=""><p>这里我们可以用下面的伪代码来恢复调用栈：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void debugger::print_backtrace() {</span></span>
<span class="line"><span>    auto curr_func = get_func_from_pc(get_pc());</span></span>
<span class="line"><span>    output_frame(curr_func);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    auto frame_pointer = get_register_value(m_pid, reg::rbp);</span></span>
<span class="line"><span>    auto return_address = read_mem(frame_pointer+8);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while (dwarf::at_name(curr_func) != &amp;quot;main&amp;quot;) {</span></span>
<span class="line"><span>        curr_func = get_func_from_pc(ret_addr);</span></span>
<span class="line"><span>        output_frame(curr_func);</span></span>
<span class="line"><span>        frame_pointer = read_mem(frame_pointer);</span></span>
<span class="line"><span>        return_address = read_mem(frame_pointer+8);</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在ARM体系结构中，出于性能的考虑，天才的开发者为了节约R7/R11寄存器，使其可以作为通用寄存器来使用，因此无法保证保存足够的信息来形成上述调用栈的（即使你向编译器传入了“-fno-omit-frame-pointer”）。比如下面两种情况，ARM就会不遵循一般意义上的序言（prologue），感兴趣的同学可以具体查看<a href="https://www.cl.cam.ac.uk/~fms27/teaching/2001-02/arm-project/02-sort/apcs.txt#1018" target="_blank" rel="noopener noreferrer">APCS Doc</a>。</p><li> 函数为叶函数，即在函数体内再没有任何函数调用。 </li><li> 函数体非常小。 </li><h2 id="android中的unwind" tabindex="-1"><a class="header-anchor" href="#android中的unwind"><span>Android中的unwind</span></a></h2><p>我们知道大部分Android手机使用的都是ARM体系结构，那在Android中需要如何进行unwind呢？我们需要分两种情况分别讨论。</p><p><strong>1. Debug版本unwind</strong></p><p>如果是Debug版本，我们可以通过“.debug_frame”（有兴趣的同学可以了解一下<a href="http://www.dwarfstd.org/doc/DWARF4.pdf" target="_blank" rel="noopener noreferrer">DWARF</a>）来帮助我们进行unwind。这种方法十分高效也十分准确，但缺点是调试信息本身很大，甚至会比程序段（.TEXT段）更大，所以我们是无法在Release版本中包含这个信息的。</p><blockquote></blockquote><p>DWARF 是一种标准调试信息格式。DWARF最早与ELF文件格式一起设计, 但DWARF本身是独立的一种对象文件格式。\b本身DAWRF和ELF的名字并没有任何意义（侏儒、精灵，是不是像魔兽世界的角色 😃），后续为了方便宣传，才命名为Debugging With Attributed Record Formats。引自<a href="https://en.wikipedia.org/wiki/DWARF#cite_note-eager-1" target="_blank" rel="noopener noreferrer">wiki</a></p><p><strong>2. Release版本unwind</strong></p><p>对于Release版本，系统使用了一种类似“.debug_frame”的段落，是更加紧凑的方法，我们可以称之为unwind table，具体来说在x86和ARM64平台上是“.eh_frame”和“.eh_frame_hdr”，在ARM32平台上为“.ARM.extab”和“.ARM.exidx”。</p><p>由于ARM32的标准早于DWARF的方法，所有ARM使用了自己的实现，不过它们的原理十分接近，后续我们只讨论“.eh_frame”，如果你对ARM32的实现特别感兴趣，可以参考<a href="https://sourceware.org/binutils/docs/as/ARM-Unwinding-Tutorial.html" target="_blank" rel="noopener noreferrer">ARM-Unwinding-Tutorial</a>。</p><p>“.eh_frame section”也是遵循DWARF的格式的，但DWARF本身十分琐碎也十分复杂，这里我们就不深入进去了，只涉及一些比较浅显的内容，你只需要了解DAWRF使用了一个被称为DI（Debugging Information Entry）的数据结构，去表示每个变量、变量类型和函数等在debug程序时需要用到的内容。</p><p>“.eh_frame”使用了一种很聪明的方法构成了一个非常大的表，表中包含了每个程序段的地址对应的相应寄存器的值以及返回地址等相关信息，下面就是这张表的示例（你可以使用<code>readelf --debug-dump=frames-interp</code>去查看相应的信息，Release版中会精简一些信息，但所有帮助我们unwind的寄存器信息都会被保留）。</p><img src="https://static001.geekbang.org/resource/image/03/70/03aa1ebfe910222910dee2b23c7a5770.png" alt=""><p>“.eh_frame section”至少包含了一个CFI（Call Frame Information）。每个CFI都包含了两个条目：独立的CIE（Common Information Entry）和至少一个FDE（Frame Description Entry）。通常来讲CFI都对应一个对象文件，FDE则描述一个函数。</p><p>“<a href="https://refspecs.linuxfoundation.org/LSB_1.3.0/gLSB/gLSB/ehframehdr.html" target="_blank" rel="noopener noreferrer">.eh_frame_hdr</a> section”包含了一系列属性，除了一些基础的meta信息，还包含了一列有序信息（初始地址，指向“.eh_frame”中FDE的指针），这些信息按照function排序，从而可以使用二分查找加速搜索。</p><img src="https://static001.geekbang.org/resource/image/ba/d1/ba663ea69e7a64a716e37c7f6710f4d1.png" alt=""><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>总的来说，unwind第一个栈帧是最难的，由于ARM无法保证会压基址指针寄存器（EBP）进栈，所以我们需要借助一些额外的信息（.eh_frame）来帮助我们得到相应的基址指针寄存器的值。即使如此，生产环境还是会有各种栈破坏，所以还是有许多工作需要做，比如不同的调试器（GDB、LLDB）或者breakpad都实现了一些搜索算法去寻找潜在的栈帧，这里我们就不展开讨论了，感兴趣的同学可以查阅相关代码。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><p>下面给你一些外部链接，你可以阅读GCC中实现unwind的关键函数，有兴趣的同学可以在调试器中实现自己的unwinder。</p><li> [_Unwind_Backtrace](https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;a=blob;f=libgcc/unwind.inc;h=12f62bca7335f3738fb723f00b1175493ef46345;hb=HEAD#l275) </li><li> [uw_frame_state_for](https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;a=blob;f=libgcc/unwind-dw2.c;h=b262fd9f5b92e2d0ea4f0e65152927de0290fcbd;hb=HEAD#l1222) </li><li> [uw_update_context](https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;a=blob;f=libgcc/unwind-dw2.c;h=b262fd9f5b92e2d0ea4f0e65152927de0290fcbd;hb=HEAD#l1494) </li><li> [uw_update_context_1](https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;a=blob;f=libgcc/unwind-dw2.c;h=b262fd9f5b92e2d0ea4f0e65152927de0290fcbd;hb=HEAD#l1376) </li>`,52)]))}const o=a(r,[["render",t]]),d=JSON.parse('{"path":"/posts/Android%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81/Native%E4%B8%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是simsun，曾在微信从事Android开发，也是开源爱好者、Rust语言“铁粉”。应绍文邀请，很高兴可以在“高手课”里和你分享一些编译方面的底层知识。 当我们在调试Native崩溃或者在做profiling的时候是十分依赖backtrace的，高质量的backtrace可以大大减少我们修复崩溃的时间。但你是否了解系统是如何生成backtra...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Android%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81/Native%E4%B8%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是simsun，曾在微信从事Android开发，也是开源爱好者、Rust语言“铁粉”。应绍文邀请，很高兴可以在“高手课”里和你分享一些编译方面的底层知识。 当我们在调试Native崩溃或者在做profiling的时候是十分依赖backtrace的，高质量的backtrace可以大大减少我们修复崩溃的时间。但你是否了解系统是如何生成backtra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":8.12,"words":2436},"filePathRelative":"posts/Android开发高手课/特别放送/Native下如何获取调用栈？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"Native下如何获取调用栈？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/6c/15/6c87ddee93100bc7b6f330617e4bb215.mp3\\"></audio></p>\\n<p>你好，我是simsun，曾在微信从事Android开发，也是开源爱好者、Rust语言“铁粉”。应绍文邀请，很高兴可以在“高手课”里和你分享一些编译方面的底层知识。</p>\\n<p>当我们在调试Native崩溃或者在做profiling的时候是十分依赖backtrace的，高质量的backtrace可以大大减少我们修复崩溃的时间。但你是否了解系统是如何生成backtrace的呢？今天我们就来探索一下backtrace背后的故事。</p>","autoDesc":true}');export{o as comp,d as data};
