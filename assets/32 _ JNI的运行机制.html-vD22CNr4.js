import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-CrA-f6So.js";const l={};function p(d,a){return i(),n("div",null,a[0]||(a[0]=[e(`<h1 id="_32-jni的运行机制" tabindex="-1"><a class="header-anchor" href="#_32-jni的运行机制"><span>32 _ JNI的运行机制</span></a></h1><p><audio id="audio" title="32 | JNI的运行机制" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/83/22/835e43c39382b3f56e7466537b3d5622.mp3"></audio></p><p>我们经常会遇见Java语言较难表达，甚至是无法表达的应用场景。比如我们希望使用汇编语言（如X86_64的SIMD指令）来提升关键代码的性能；再比如，我们希望调用Java核心类库无法提供的，某个体系架构或者操作系统特有的功能。</p><p>在这种情况下，我们往往会牺牲可移植性，在Java代码中调用C/C++代码（下面简述为C代码），并在其中实现所需功能。这种跨语言的调用，便需要借助Java虚拟机的Java Native Interface（JNI）机制。</p><p>关于JNI的例子，你应该特别熟悉Java中标记为<code>native</code>的、没有方法体的方法（下面统称为native方法）。当在Java代码中调用这些native方法时，Java虚拟机将通过JNI，调用至对应的C函数（下面将native方法对应的C实现统称为C函数）中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public class Object {</span></span>
<span class="line"><span>  public native int hashCode();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子，<code>Object.hashCode</code>方法便是一个native方法。它对应的C函数将计算对象的哈希值，并缓存在对象头、栈上锁记录（轻型锁）或对象监视锁（重型锁所使用的monitor）中，以确保该值在对象的生命周期之内不会变更。</p><h2 id="native方法的链接" tabindex="-1"><a class="header-anchor" href="#native方法的链接"><span>native方法的链接</span></a></h2><p>在调用native方法前，Java虚拟机需要将该native方法链接至对应的C函数上。</p><p>链接方式主要有两种。第一种是让Java虚拟机自动查找符合默认命名规范的C函数，并且链接起来。</p><p>事实上，我们并不需要记住所谓的命名规范，而是采用<code>javac -h</code>命令，便可以根据Java程序中的native方法声明，自动生成包含符合命名规范的C函数的头文件。</p><p>举个例子，在下面这段代码中，<code>Foo</code>类有三个native方法，分别为静态方法<code>foo</code>以及两个重载的实例方法<code>bar</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package org.example;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Foo {</span></span>
<span class="line"><span>  public static native void foo();</span></span>
<span class="line"><span>  public native void bar(int i, long j);</span></span>
<span class="line"><span>  public native void bar(String s, Object o);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过执行<code>javac -h . org/example/Foo.java</code>命令，我们将在当前文件夹（对应<code>-h</code>后面跟着的<code>.</code>）生成名为<code>org_example_Foo.h</code>的头文件。其内容如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/* DO NOT EDIT THIS FILE - it is machine generated */</span></span>
<span class="line"><span>#include &amp;lt;jni.h&amp;gt;</span></span>
<span class="line"><span>/* Header for class org_example_Foo */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ifndef _Included_org_example_Foo</span></span>
<span class="line"><span>#define _Included_org_example_Foo</span></span>
<span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>extern &amp;quot;C&amp;quot; {</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span> * Class:     org_example_Foo</span></span>
<span class="line"><span> * Method:    foo</span></span>
<span class="line"><span> * Signature: ()V</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_foo</span></span>
<span class="line"><span>  (JNIEnv *, jclass);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span> * Class:     org_example_Foo</span></span>
<span class="line"><span> * Method:    bar</span></span>
<span class="line"><span> * Signature: (IJ)V</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__IJ</span></span>
<span class="line"><span>  (JNIEnv *, jobject, jint, jlong);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span> * Class:     org_example_Foo</span></span>
<span class="line"><span> * Method:    bar</span></span>
<span class="line"><span> * Signature: (Ljava/lang/String;Ljava/lang/Object;)V</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2</span></span>
<span class="line"><span>  (JNIEnv *, jobject, jstring, jobject);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我简单讲解一下该命名规范。</p><p>首先，native方法对应的C函数都需要以<code>Java_</code>为前缀，之后跟着完整的包名和方法名。由于C函数名不支持<code>/</code>字符，因此我们需要将<code>/</code>转换为<code>_</code>，而原本方法名中的<code>_</code>符号，则需要转换为<code>_1</code>。</p><p>举个例子，<code>org.example</code>包下<code>Foo</code>类的<code>foo</code>方法，Java虚拟机会将其自动链接至名为<code>Java_org_example_Foo_foo</code>的C函数中。</p><p>当某个类出现重载的native方法时，Java虚拟机还会将参数类型纳入自动链接对象的考虑范围之中。具体的做法便是在前面C函数名的基础上，追加<code>__</code>以及方法描述符作为后缀。</p><p>方法描述符的特殊符号同样会被替换掉，如引用类型所使用的<code>;</code>会被替换为<code>_2</code>，数组类型所使用的<code>[</code>会被替换为<code>_3</code>。</p><p>基于此命名规范，你可以手动拼凑上述代码中，<code>Foo</code>类的两个<code>bar</code>方法所能自动链接的C函数名，并用<code>javac -h</code>命令所生成的结果来验证一下。</p><p>第二种链接方式则是在C代码中主动链接。</p><p>这种链接方式对C函数名没有要求。通常我们会使用一个名为<code>registerNatives</code>的native方法，并按照第一种链接方式定义所能自动链接的C函数。在该C函数中，我们将手动链接该类的其他native方法。</p><p>举个例子，<code>Object</code>类便拥有一个<code>registerNatives</code>方法，所对应的C代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 注：Object类的registerNatives方法的实现位于java.base模块里的C代码中</span></span>
<span class="line"><span>static JNINativeMethod methods[] = {</span></span>
<span class="line"><span>    {&amp;quot;hashCode&amp;quot;,    &amp;quot;()I&amp;quot;,                    (void *)&amp;amp;JVM_IHashCode},</span></span>
<span class="line"><span>    {&amp;quot;wait&amp;quot;,        &amp;quot;(J)V&amp;quot;,                   (void *)&amp;amp;JVM_MonitorWait},</span></span>
<span class="line"><span>    {&amp;quot;notify&amp;quot;,      &amp;quot;()V&amp;quot;,                    (void *)&amp;amp;JVM_MonitorNotify},</span></span>
<span class="line"><span>    {&amp;quot;notifyAll&amp;quot;,   &amp;quot;()V&amp;quot;,                    (void *)&amp;amp;JVM_MonitorNotifyAll},</span></span>
<span class="line"><span>    {&amp;quot;clone&amp;quot;,       &amp;quot;()Ljava/lang/Object;&amp;quot;,   (void *)&amp;amp;JVM_Clone},</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL</span></span>
<span class="line"><span>Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    (*env)-&amp;gt;RegisterNatives(env, cls,</span></span>
<span class="line"><span>                            methods, sizeof(methods)/sizeof(methods[0]));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，上面这段代码中的C函数将调用<code>RegisterNatives</code> API，注册<code>Object</code>类中其他native方法所要链接的C函数。并且，这些C函数的名字并不符合默认命名规则。</p><p>当使用第二种方式进行链接时，我们需要在其他native方法被调用之前完成链接工作。因此，我们往往会在类的初始化方法里调用该<code>registerNatives</code>方法。具体示例如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public class Object {</span></span>
<span class="line"><span>    private static native void registerNatives();</span></span>
<span class="line"><span>    static {</span></span>
<span class="line"><span>        registerNatives();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们采用第一种链接方式，并且实现其中的<code>bar(String, Object)</code>方法。如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// foo.c</span></span>
<span class="line"><span>#include &amp;lt;stdio.h&amp;gt;</span></span>
<span class="line"><span>#include &amp;quot;org_example_Foo.h&amp;quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2</span></span>
<span class="line"><span>  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {</span></span>
<span class="line"><span>  printf(&amp;quot;Hello, World\\n&amp;quot;);</span></span>
<span class="line"><span>  return;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以通过gcc命令将其编译成为动态链接库：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 该命令仅适用于macOS</span></span>
<span class="line"><span>$ gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/darwin -o libfoo.dylib -shared foo.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，动态链接库的名字须以<code>lib</code>为前缀，以<code>.dylib</code>(或Linux上的<code>.so</code>）为扩展名。在Java程序中，我们可以通过<code>System.loadLibrary(&quot;foo&quot;)</code>方法来加载<code>libfoo.dylib</code>，如下述代码所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package org.example;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Foo {</span></span>
<span class="line"><span>  public static native void foo();</span></span>
<span class="line"><span>  public native void bar(int i, long j);</span></span>
<span class="line"><span>  public native void bar(String s, Object o);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  int i = 0xDEADBEEF;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  public static void main(String[] args) {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>      System.loadLibrary(&amp;quot;foo&amp;quot;);</span></span>
<span class="line"><span>    } catch (UnsatisfiedLinkError e) {</span></span>
<span class="line"><span>      e.printStackTrace();</span></span>
<span class="line"><span>      System.exit(1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    new Foo().bar(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>libfoo.dylib</code>不在当前路径下，我们可以在启动Java虚拟机时配置<code>java.library.path</code>参数，使其指向包含<code>libfoo.dylib</code>的文件夹。具体命令如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ java -Djava.library.path=/PATH/TO/DIR/CONTAINING/libfoo.dylib org.example.Foo</span></span>
<span class="line"><span>Hello, World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jni的api" tabindex="-1"><a class="header-anchor" href="#jni的api"><span>JNI的API</span></a></h2><p>在C代码中，我们也可以使用Java的语言特性，如instanceof测试等。这些功能都是通过特殊的JNI函数（<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jni/functions.html" target="_blank" rel="noopener noreferrer">JNI Functions</a>）来实现的。</p><p>Java虚拟机会将所有JNI函数的函数指针聚合到一个名为<code>JNIEnv</code>的数据结构之中。</p><p>这是一个线程私有的数据结构。Java虚拟机会为每个线程创建一个<code>JNIEnv</code>，并规定C代码不能将当前线程的<code>JNIEnv</code>共享给其他线程，否则JNI函数的正确性将无法保证。</p><p>这么设计的原因主要有两个。一是给JNI函数提供一个单独命名空间。二是允许Java虚拟机通过更改函数指针替换JNI函数的具体实现，例如从附带参数类型检测的慢速版本，切换至不做参数类型检测的快速版本。</p><p>在HotSpot虚拟机中，<code>JNIEnv</code>被内嵌至Java线程的数据结构之中。部分虚拟机代码甚至会从<code>JNIEnv</code>的地址倒推出Java线程的地址。因此，如果在其他线程中使用当前线程的<code>JNIEnv</code>，会使这部分代码错误识别当前线程。</p><p>JNI会将Java层面的基本类型以及引用类型映射为另一套可供C代码使用的数据结构。其中，基本类型的对应关系如下表所示：</p><img src="https://static001.geekbang.org/resource/image/cb/ca/cb2c806532449f2c1edfe821990ac9ca.png" alt=""><p>引用类型对应的数据结构之间也存在着继承关系，具体如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>jobject</span></span>
<span class="line"><span>|- jclass (java.lang.Class objects)</span></span>
<span class="line"><span>|- jstring (java.lang.String objects)</span></span>
<span class="line"><span>|- jthrowable (java.lang.Throwable objects)</span></span>
<span class="line"><span>|- jarray (arrays)</span></span>
<span class="line"><span>   |- jobjectArray (object arrays)</span></span>
<span class="line"><span>   |- jbooleanArray (boolean arrays)</span></span>
<span class="line"><span>   |- jbyteArray (byte arrays)</span></span>
<span class="line"><span>   |- jcharArray (char arrays)</span></span>
<span class="line"><span>   |- jshortArray (short arrays)</span></span>
<span class="line"><span>   |- jintArray (int arrays)</span></span>
<span class="line"><span>   |- jlongArray (long arrays)</span></span>
<span class="line"><span>   |- jfloatArray (float arrays)</span></span>
<span class="line"><span>   |- jdoubleArray (double arrays)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回头看看<code>Foo</code>类3个native方法对应的C函数的参数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_foo</span></span>
<span class="line"><span>  (JNIEnv *, jclass);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__IJ</span></span>
<span class="line"><span>  (JNIEnv *, jobject, jint, jlong);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2  (JNIEnv *, jobject, jstring, jobject);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态native方法<code>foo</code>将接收两个参数，分别为存放JNI函数的<code>JNIEnv</code>指针，以及一个<code>jclass</code>参数，用来指代定义该native方法的类，即<code>Foo</code>类。</p><p>两个实例native方法<code>bar</code>的第二个参数则是<code>jobject</code>类型的，用来指代该native方法的调用者，也就是<code>Foo</code>类的实例。</p><p>如果native方法声明了参数，那么对应的C函数将接收这些参数。在我们的例子中，第一个<code>bar</code>方法声明了int型和long型的参数，对应的C函数则接收jint和jlong类型的参数；第二个<code>bar</code>方法声明了String类型和Object类型的参数，对应的C函数则接收jstring和jobject类型的参数。</p><p>下面，我们继续修改上一小节中的<code>foo.c</code>，并在C代码中获取<code>Foo</code>类实例的<code>i</code>字段。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// foo.c</span></span>
<span class="line"><span>#include &amp;lt;stdio.h&amp;gt;</span></span>
<span class="line"><span>#include &amp;quot;org_example_Foo.h&amp;quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2</span></span>
<span class="line"><span>  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {</span></span>
<span class="line"><span>  jclass cls = (*env)-&amp;gt;GetObjectClass(env, thisObject);</span></span>
<span class="line"><span>  jfieldID fieldID = (*env)-&amp;gt;GetFieldID(env, cls, &amp;quot;i&amp;quot;, &amp;quot;I&amp;quot;);</span></span>
<span class="line"><span>  jint value = (*env)-&amp;gt;GetIntField(env, thisObject, fieldID);</span></span>
<span class="line"><span>  printf(&amp;quot;Hello, World 0x%x\\n&amp;quot;, value);</span></span>
<span class="line"><span>  return;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在JNI中访问字段类似于反射API：我们首先需要通过类实例获得<code>FieldID</code>，然后再通过<code>FieldID</code>获得某个实例中该字段的值。不过，与Java代码相比，上述代码貌似不用处理异常。事实果真如此吗？</p><p>下面我就尝试获取了不存在的字段<code>j</code>，运行结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ java org.example.Foo</span></span>
<span class="line"><span>Hello, World 0x5</span></span>
<span class="line"><span>Exception in thread &amp;quot;main&amp;quot; java.lang.NoSuchFieldError: j</span></span>
<span class="line"><span> at org.example.Foo.bar(Native Method)</span></span>
<span class="line"><span> at org.example.Foo.main(Foo.java:20)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>printf</code>语句照常执行并打印出<code>Hello, World 0x5</code>，但这个数值明显是错误的。当从C函数返回至main方法时，Java虚拟机又会抛出<code>NoSuchFieldError</code>异常。</p><p>实际上，当调用JNI函数时，Java虚拟机便已生成异常实例，并缓存在内存中的某个位置。与Java编程不一样的是，它并不会显式地跳转至异常处理器或者调用者中，而是继续执行接下来的C代码。</p><p>因此，当从可能触发异常的JNI函数返回时，我们需要通过JNI函数<code>ExceptionOccurred</code>检查是否发生了异常，并且作出相应的处理。如果无须抛出该异常，那么我们需要通过JNI函数<code>ExceptionClear</code>显式地清空已缓存的异常。</p><p>具体示例如下所示（为了控制代码篇幅，我仅在第一个<code>GetFieldID</code>后检查异常以及清空异常）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// foo.c</span></span>
<span class="line"><span>#include &amp;lt;stdio.h&amp;gt;</span></span>
<span class="line"><span>#include &amp;quot;org_example_Foo.h&amp;quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2</span></span>
<span class="line"><span>  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {</span></span>
<span class="line"><span>  jclass cls = (*env)-&amp;gt;GetObjectClass(env, thisObject);</span></span>
<span class="line"><span>  jfieldID fieldID = (*env)-&amp;gt;GetFieldID(env, cls, &amp;quot;j&amp;quot;, &amp;quot;I&amp;quot;);</span></span>
<span class="line"><span>  if((*env)-&amp;gt;ExceptionOccurred(env)) {</span></span>
<span class="line"><span>    printf(&amp;quot;Exception!\\n&amp;quot;);</span></span>
<span class="line"><span>    (*env)-&amp;gt;ExceptionClear(env);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  fieldID = (*env)-&amp;gt;GetFieldID(env, cls, &amp;quot;i&amp;quot;, &amp;quot;I&amp;quot;);</span></span>
<span class="line"><span>  jint value = (*env)-&amp;gt;GetIntField(env, thisObject, fieldID);</span></span>
<span class="line"><span>  // we should put an exception guard here as well.</span></span>
<span class="line"><span>  printf(&amp;quot;Hello, World 0x%x\\n&amp;quot;, value);</span></span>
<span class="line"><span>  return;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="局部引用与全局引用" tabindex="-1"><a class="header-anchor" href="#局部引用与全局引用"><span>局部引用与全局引用</span></a></h2><p>在C代码中，我们可以访问所传入的引用类型参数，也可以通过JNI函数创建新的Java对象。</p><p>这些Java对象显然也会受到垃圾回收器的影响。因此，Java虚拟机需要一种机制，来告知垃圾回收算法，不要回收这些C代码中可能引用到的Java对象。</p><p>这种机制便是JNI的局部引用（Local Reference）和全局引用（Global Reference）。垃圾回收算法会将被这两种引用指向的对象标记为不可回收。</p><p>事实上，无论是传入的引用类型参数，还是通过JNI函数（除<code>NewGlobalRef</code>及<code>NewWeakGlobalRef</code>之外）返回的引用类型对象，都属于局部引用。</p><p>不过，一旦从C函数中返回至Java方法之中，那么局部引用将失效。也就是说，垃圾回收器在标记垃圾时不再考虑这些局部引用。</p><p>这就意味着，我们不能缓存局部引用，以供另一C线程或下一次native方法调用时使用。</p><p>对于这种应用场景，我们需要借助JNI函数<code>NewGlobalRef</code>，将该局部引用转换为全局引用，以确保其指向的Java对象不会被垃圾回收。</p><p>相应的，我们还可以通过JNI函数<code>DeleteGlobalRef</code>来消除全局引用，以便回收被全局引用指向的Java对象。</p><p>此外，当C函数运行时间极其长时，我们也应该考虑通过JNI函数<code>DeleteLocalRef</code>，消除不再使用的局部引用，以便回收被引用的Java对象。</p><p>另一方面，由于垃圾回收器可能会移动对象在内存中的位置，因此Java虚拟机需要另一种机制，来保证局部引用或者全局引用将正确地指向移动过后的对象。</p><p>HotSpot虚拟机是通过句柄（handle）来完成上述需求的。这里句柄指的是内存中Java对象的指针的指针。当发生垃圾回收时，如果Java对象被移动了，那么句柄指向的指针值也将发生变动，但句柄本身保持不变。</p><p>实际上，无论是局部引用还是全局引用，都是句柄。其中，局部引用所对应的句柄有两种存储方式，一是在本地方法栈帧中，主要用于存放C函数所接收的来自Java层面的引用类型参数；另一种则是线程私有的句柄块，主要用于存放C函数运行过程中创建的局部引用。</p><p>当从C函数返回至Java方法时，本地方法栈帧中的句柄将会被自动清除。而线程私有句柄块则需要由Java虚拟机显式清理。</p><p>进入C函数时对引用类型参数的句柄化，和调整参数位置（C调用和Java调用传参的方式不一样），以及从C函数返回时清理线程私有句柄块，共同造就了JNI调用的额外性能开销（具体可参考该stackoverflow上的<a href="https://stackoverflow.com/questions/24746776/what-does-a-jvm-have-to-do-when-calling-a-native-method/24747484#24747484" target="_blank" rel="noopener noreferrer">回答</a>）。</p><h2 id="总结与实践" tabindex="-1"><a class="header-anchor" href="#总结与实践"><span>总结与实践</span></a></h2><p>今天我介绍了JNI的运行机制。</p><p>Java中的native方法的链接方式主要有两种。一是按照JNI的默认规范命名所要链接的C函数，并依赖于Java虚拟机自动链接。另一种则是在C代码中主动链接。</p><p>JNI提供了一系列API来允许C代码使用Java语言特性。这些API不仅使用了特殊的数据结构来表示Java类，还拥有特殊的异常处理模式。</p><p>JNI中的引用可分为局部引用和全局引用。这两者都可以阻止垃圾回收器回收被引用的Java对象。不同的是，局部引用在native方法调用返回之后便会失效。传入参数以及大部分JNI API函数的返回值都属于局部引用。</p><p>今天的实践环节，请阅读<a href="https://www.ibm.com/developerworks/java/library/j-jni/index.html" target="_blank" rel="noopener noreferrer">该文档</a>中的Performance pitfalls以及Correctness pitfalls两节。</p>`,82)]))}const r=s(l,[["render",p]]),t=JSON.parse('{"path":"/posts/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%A8%A1%E5%9D%97%E4%B8%89%EF%BC%9A%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/32%20_%20JNI%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html","title":"32 _ JNI的运行机制","lang":"zh-CN","frontmatter":{"description":"32 _ JNI的运行机制 我们经常会遇见Java语言较难表达，甚至是无法表达的应用场景。比如我们希望使用汇编语言（如X86_64的SIMD指令）来提升关键代码的性能；再比如，我们希望调用Java核心类库无法提供的，某个体系架构或者操作系统特有的功能。 在这种情况下，我们往往会牺牲可移植性，在Java代码中调用C/C++代码（下面简述为C代码），并在其...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%A8%A1%E5%9D%97%E4%B8%89%EF%BC%9A%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/32%20_%20JNI%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"32 _ JNI的运行机制"}],["meta",{"property":"og:description","content":"32 _ JNI的运行机制 我们经常会遇见Java语言较难表达，甚至是无法表达的应用场景。比如我们希望使用汇编语言（如X86_64的SIMD指令）来提升关键代码的性能；再比如，我们希望调用Java核心类库无法提供的，某个体系架构或者操作系统特有的功能。 在这种情况下，我们往往会牺牲可移植性，在Java代码中调用C/C++代码（下面简述为C代码），并在其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"32 _ JNI的运行机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":12.84,"words":3852},"filePathRelative":"posts/深入拆解Java虚拟机/模块三：代码优化/32 _ JNI的运行机制.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"32 | JNI的运行机制\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/83/22/835e43c39382b3f56e7466537b3d5622.mp3\\"></audio></p>\\n<p>我们经常会遇见Java语言较难表达，甚至是无法表达的应用场景。比如我们希望使用汇编语言（如X86_64的SIMD指令）来提升关键代码的性能；再比如，我们希望调用Java核心类库无法提供的，某个体系架构或者操作系统特有的功能。</p>","autoDesc":true}');export{r as comp,t as data};
