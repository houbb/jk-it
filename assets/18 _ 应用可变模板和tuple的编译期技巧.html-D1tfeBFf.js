import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as p}from"./app-CrA-f6So.js";const i={};function l(t,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_18-应用可变模板和tuple的编译期技巧" tabindex="-1"><a class="header-anchor" href="#_18-应用可变模板和tuple的编译期技巧"><span>18 _ 应用可变模板和tuple的编译期技巧</span></a></h1><p><audio id="audio" title="18 | 应用可变模板和tuple的编译期技巧" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/76/e0/76181e927a84617d78a7ca04e16195e0.mp3"></audio></p><p>你好，我是吴咏炜。</p><p>今天我们讲一个特殊的专题，如何使用可变模板和 tuple 来完成一些常见的功能，尤其是编译期计算。</p><h2 id="可变模板" tabindex="-1"><a class="header-anchor" href="#可变模板"><span>可变模板</span></a></h2><p>可变模板 [1] 是 C++11 引入的一项新功能，使我们可以在模板参数里表达不定个数和类型的参数。从实际的角度，它有两个明显的用途：</p><ul><li>用于在通用工具模板中转发参数到另外一个函数</li><li>用于在递归的模板中表达通用的情况（另外会有至少一个模板特化来表达边界情况）</li></ul><p>我们下面就来分开讨论一下。</p><h3 id="转发用法" tabindex="-1"><a class="header-anchor" href="#转发用法"><span>转发用法</span></a></h3><p>以标准库里的 <code>make_unique</code> 为例，它的定义差不多是下面这个样子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename T,</span></span>
<span class="line"><span>          typename... Args&amp;gt;</span></span>
<span class="line"><span>inline unique_ptr&amp;lt;T&amp;gt;</span></span>
<span class="line"><span>make_unique(Args&amp;amp;&amp;amp;... args)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return unique_ptr&amp;lt;T&amp;gt;(</span></span>
<span class="line"><span>    new T(forward&amp;lt;Args&amp;gt;(args)...));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，它就可以把传递给自己的全部参数转发到模板参数类的构造函数上去。注意，在这种情况下，我们通常会使用 <code>std::forward</code>，确保参数转发时仍然保持正确的左值或右值引用类型。</p><p>稍微解释一下上面三处出现的 <code>...</code>：</p><ul><li><code>typename... Args</code> 声明了一系列的类型——<code>class...</code> 或 <code>typename...</code> 表示后面的标识符代表了一系列的类型。</li><li><code>Args&amp;amp;&amp;amp;... args</code> 声明了一系列的形参 <code>args</code>，其类型是 <code>Args&amp;amp;&amp;amp;</code>。</li><li><code>forward&amp;lt;Args&amp;gt;(args)...</code> 会在编译时实际逐项展开 <code>Args</code> 和 <code>args</code> ，参数有多少项，展开后就是多少项。</li></ul><p>举一个例子，如果我们需要在堆上传递一个 <code>vector&amp;lt;int&amp;gt;</code>，假设我们希望初始构造的大小为 100，每个元素都是 <code>1</code>，那我们可以这样写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>make_unique&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(100, 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>模板实例化之后，会得到相当于下面的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;&amp;gt;</span></span>
<span class="line"><span>inline unique_ptr&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;</span></span>
<span class="line"><span>make_unique(int&amp;amp;&amp;amp; arg1, int&amp;amp;&amp;amp; arg2)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return unique_ptr&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(</span></span>
<span class="line"><span>    new vector&amp;lt;int&amp;gt;(</span></span>
<span class="line"><span>      forward&amp;lt;int&amp;gt;(arg1),</span></span>
<span class="line"><span>      forward&amp;lt;int&amp;gt;(arg2)));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，<code>forward&amp;lt;Args&amp;gt;(args)...</code> 为每一项可变模板参数都以同样的形式展开。项数也允许为零，那样，我们在调用构造函数时也同样没有任何参数。</p><h3 id="递归用法" tabindex="-1"><a class="header-anchor" href="#递归用法"><span>递归用法</span></a></h3><p>我们也可以用可变模板来实现编译期递归。下面就是个小例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename T&amp;gt;</span></span>
<span class="line"><span>constexpr auto sum(T x)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return x;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;typename T1, typename T2,</span></span>
<span class="line"><span>          typename... Targ&amp;gt;</span></span>
<span class="line"><span>constexpr auto sum(T1 x, T2 y,</span></span>
<span class="line"><span>                   Targ... args)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return sum(x + y, args...);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的定义里，如果 <code>sum</code> 得到的参数只有一个，会走到上面那个重载。如果有两个或更多参数，编译器就会选择下面那个重载，执行一次加法，随后你的参数数量就少了一个，因而递归总会终止到上面那个重载，结束计算。</p><p>要使用上面这个模板，我们就可以写出像下面这样的函数调用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>auto result = sum(1, 2, 3.5, x);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>模板会这样依次展开：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum(1 + 2, 3.5, x)</span></span>
<span class="line"><span>sum(3 + 3.5, x)</span></span>
<span class="line"><span>sum(6.5 + x)</span></span>
<span class="line"><span>6.5 + x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们都不必使用相同的数据类型：只要这些数据之间可以应用 <code>+</code>，它们的类型无关紧要……</p><p>再看另一个复杂些的例子，函数的组合 [2]。如果我们有函数 $f$ 和 函数 $g$，要得到函数的联用 $g \\circ f$，其满足：</p><p>$$<br><br> (g \\circ f)(x) = g(f(x))<br><br> $$</p><p>我们能不能用一种非常简单的方式，写不包含变量 $x$ 的表达式来表示函数组合呢？答案是肯定的。</p><p>跟上面类似，我们需要写出递归的终结情况，单个函数的“组合”：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename F&amp;gt;</span></span>
<span class="line"><span>auto compose(F f)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return [f](auto&amp;amp;&amp;amp;... x) {</span></span>
<span class="line"><span>    return f(</span></span>
<span class="line"><span>      forward&amp;lt;decltype(x)&amp;gt;(x)...);</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们仅返回一个泛型 lambda 表达式，保证参数可以转发到 <code>f</code>。记得我们在<a href="https://time.geekbang.org/column/article/184018" target="_blank" rel="noopener noreferrer">[第 16 讲]</a> 讲过泛型 lambda 表达式，本质上就是一个模板，所以我们按转发用法的可变模板来理解上面的 <code>...</code> 部分就对了。</p><p>下面是正常有组合的情况：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;typename F,</span></span>
<span class="line"><span>          typename... Args&amp;gt;</span></span>
<span class="line"><span>auto compose(F f, Args... other)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return [f,</span></span>
<span class="line"><span>          other...](auto&amp;amp;&amp;amp;... x) {</span></span>
<span class="line"><span>    return f(compose(other...)(</span></span>
<span class="line"><span>      forward&amp;lt;decltype(x)&amp;gt;(x)...));</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个模板里，我们返回一个 lambda 表达式，然后用 <code>f</code> 捕捉第一个函数对象，用 <code>args...</code> 捕捉后面的函数对象。我们用 <code>args...</code> 继续组合后面的部分，然后把结果传到 <code>f</code> 里面。</p><p>上面的模板定义我实际上已经有所简化，没有保持值类别。完整的包含完美转发的版本，请看参考资料 [3] 中的 functional.h 实现。</p><p>下面我们来试验一下使用这个 <code>compose</code> 函数。我们先写一个对输入范围中每一项都进行平方的函数对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>auto square_list =</span></span>
<span class="line"><span>  [](auto&amp;amp;&amp;amp; container) {</span></span>
<span class="line"><span>    return fmap(</span></span>
<span class="line"><span>      [](int x) { return x * x; },</span></span>
<span class="line"><span>      container);</span></span>
<span class="line"><span>  };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用了<a href="https://time.geekbang.org/column/article/181608" target="_blank" rel="noopener noreferrer">[第 13 讲]</a> 中给出的 <code>fmap</code>，而不是标准库里的 <code>transform</code>，是因为后者接口非函数式，无法组合——它要求参数给出输出位置的迭代器，会修改迭代器指向的内容，返回结果也只是单个的迭代器；函数式的接口则期望不修改参数的内容，结果完全在返回值中。</p><p>我们这儿用了泛型 lambda 表达式，是因为组合的时候不能使用模板，只能是函数对象或函数（指针）——如果我们定义一个 <code>square_list</code> 模板的话，组合时还得显式实例化才行（写成 <code>square_list&amp;lt;const vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;</code> 的样子），很不方便。</p><p>我们再写一个求和的函数对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>auto sum_list =</span></span>
<span class="line"><span>  [](auto&amp;amp;&amp;amp; container) {</span></span>
<span class="line"><span>    return accumulate(</span></span>
<span class="line"><span>      container.begin(),</span></span>
<span class="line"><span>      container.end(), 0);</span></span>
<span class="line"><span>  };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那先平方再求和，就可以这样简单定义了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>auto squared_sum =</span></span>
<span class="line"><span>  compose(sum_list, square_list);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以验证这个定义是可以工作的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>vector v{1, 2, 3, 4, 5};</span></span>
<span class="line"><span>cout &amp;lt;&amp;lt; squared_sum(v) &amp;lt;&amp;lt; endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会得到：</p><blockquote></blockquote><p><code>55</code></p><h2 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple"><span>tuple</span></a></h2><p>上面的写法虽然看起来还不错，但实际上有个缺陷：被 compose 的函数除了第一个（最右边的），其他的函数只能接收一个参数。要想进一步推进类似的技巧，我们得首先解决这个问题。</p><p>在 C++ 里，要通用地用一个变量来表达多个值，那就得看多元组——<code>tuple</code> 模板了 [4]。<code>tuple</code> 算是 C++98 里的 <code>pair</code> 类型的一般化，可以表达任意多个固定数量、固定类型的值的组合。下面这段代码约略地展示了其基本用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &amp;lt;algorithm&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;iostream&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;string&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;tuple&amp;gt;</span></span>
<span class="line"><span>#include &amp;lt;vector&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 整数、字符串、字符串的三元组</span></span>
<span class="line"><span>using num_tuple =</span></span>
<span class="line"><span>  tuple&amp;lt;int, string, string&amp;gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ostream&amp;amp;</span></span>
<span class="line"><span>operator&amp;lt;&amp;lt;(ostream&amp;amp; os,</span></span>
<span class="line"><span>           const num_tuple&amp;amp; value)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  os &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(value) &amp;lt;&amp;lt; &#39;,&#39;</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; get&amp;lt;1&amp;gt;(value) &amp;lt;&amp;lt; &#39;,&#39;</span></span>
<span class="line"><span>     &amp;lt;&amp;lt; get&amp;lt;2&amp;gt;(value);</span></span>
<span class="line"><span>  return os;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // 阿拉伯数字、英文、法文</span></span>
<span class="line"><span>  vector&amp;lt;num_tuple&amp;gt; vn{</span></span>
<span class="line"><span>    {1, &quot;one&quot;,   &quot;un&quot;},</span></span>
<span class="line"><span>    {2, &quot;two&quot;,   &quot;deux&quot;},</span></span>
<span class="line"><span>    {3, &quot;three&quot;, &quot;trois&quot;},</span></span>
<span class="line"><span>    {4, &quot;four&quot;,  &quot;quatre&quot;}};</span></span>
<span class="line"><span>  // 修改第 0 项的法文</span></span>
<span class="line"><span>  get&amp;lt;2&amp;gt;(vn[0]) = &quot;une&quot;;</span></span>
<span class="line"><span>  // 按法文进行排序</span></span>
<span class="line"><span>  sort(vn.begin(), vn.end(),</span></span>
<span class="line"><span>       [](auto&amp;amp;&amp;amp; x, auto&amp;amp;&amp;amp; y) {</span></span>
<span class="line"><span>         return get&amp;lt;2&amp;gt;(x) &amp;lt;</span></span>
<span class="line"><span>                get&amp;lt;2&amp;gt;(y);</span></span>
<span class="line"><span>       });</span></span>
<span class="line"><span>  // 输出内容</span></span>
<span class="line"><span>  for (auto&amp;amp;&amp;amp; value : vn) {</span></span>
<span class="line"><span>    cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  // 输出多元组项数</span></span>
<span class="line"><span>  constexpr auto size = \\</span></span>
<span class="line"><span>    tuple_size_v&amp;lt;num_tuple&amp;gt;;</span></span>
<span class="line"><span>  cout &amp;lt;&amp;lt; &quot;Tuple size is &quot; &amp;lt;&amp;lt; size &amp;lt;&amp;lt; endl;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是：</p><blockquote></blockquote><p>\`2,two,deux\`<br> \`4,four,quatre\`<br> \`3,three,trois\`<br> \`1,one,une\`<br> \`Tuple size is 3\`</p><p>我们可以看到：</p><ul><li><code>tuple</code> 的成员数量由尖括号里写的类型数量决定。</li><li>可以使用 <code>get</code> 函数对 <code>tuple</code> 的内容进行读和写。（当一个类型在 <code>tuple</code> 中出现正好一次时，我们也可以传类型取内容，即，对我们上面的三元组，<code>get&amp;lt;int&amp;gt;</code> 是合法的，<code>get&amp;lt;string&amp;gt;</code> 则不是。）</li><li>可以用 <code>tuple_size_v</code> （在编译期）取得多元组里面的项数。</li></ul><p>如果我们要用一个三项的 <code>tuple</code> 去调用一个函数，我们可以写类似这样的代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class F, class Tuple&amp;gt;</span></span>
<span class="line"><span>constexpr decltype(auto) apply(</span></span>
<span class="line"><span>  F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return f(</span></span>
<span class="line"><span>    get&amp;lt;0&amp;gt;(forward&amp;lt;Tuple&amp;gt;(t)),</span></span>
<span class="line"><span>    get&amp;lt;1&amp;gt;(forward&amp;lt;Tuple&amp;gt;(t)),</span></span>
<span class="line"><span>    get&amp;lt;2&amp;gt;(forward&amp;lt;Tuple&amp;gt;(t)));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这似乎已经挺接近我们需要的形式了，但实际调用函数的参数项数会变啊……</p><p>我们已经有了参数的项数（使用 <code>tuple_size_v</code>），所以我们下面要做的是生成从 0 到项数减一之间的整数序列。标准库里已经定义了相关的工具，我们需要的就是其中的 <code>make_index_sequence</code> [5]，其简化实现如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class T, T... Ints&amp;gt;</span></span>
<span class="line"><span>struct integer_sequence {};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;size_t... Ints&amp;gt;</span></span>
<span class="line"><span>using index_sequence =</span></span>
<span class="line"><span>  integer_sequence&amp;lt;size_t, Ints...&amp;gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;size_t N, size_t... Ints&amp;gt;</span></span>
<span class="line"><span>struct index_sequence_helper {</span></span>
<span class="line"><span>  typedef</span></span>
<span class="line"><span>    typename index_sequence_helper&amp;lt;</span></span>
<span class="line"><span>      N - 1, N - 1, Ints...&amp;gt;::type</span></span>
<span class="line"><span>      type;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;size_t... Ints&amp;gt;</span></span>
<span class="line"><span>struct index_sequence_helper&amp;lt;</span></span>
<span class="line"><span>  0, Ints...&amp;gt; {</span></span>
<span class="line"><span>  typedef index_sequence&amp;lt;Ints...&amp;gt;</span></span>
<span class="line"><span>    type;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;size_t N&amp;gt;</span></span>
<span class="line"><span>using make_index_sequence =</span></span>
<span class="line"><span>  typename index_sequence_helper&amp;lt;</span></span>
<span class="line"><span>    N&amp;gt;::type;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如一般的模板代码，它看起来还是有点绕的。其要点是，如果我们给出 <code>make_index_sequence&amp;lt;N&amp;gt;</code>，则结果是 <code>integer_sequence&amp;lt;size_t, 0, 1, 2, …, N - 1&amp;gt;</code>（一下子想不清楚的话，可以拿纸笔来模拟一下模板的展开过程）。而有了这样一个模板的帮助之后，我们就可以写出下面这样的函数（同样，这是标准库里的 <code>apply</code> 函数模板 [6] 的简化版本）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;class F, class Tuple,</span></span>
<span class="line"><span>          size_t... I&amp;gt;</span></span>
<span class="line"><span>constexpr decltype(auto)</span></span>
<span class="line"><span>apply_impl(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t,</span></span>
<span class="line"><span>           index_sequence&amp;lt;I...&amp;gt;)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return f(</span></span>
<span class="line"><span>    get&amp;lt;I&amp;gt;(forward&amp;lt;Tuple&amp;gt;(t))...);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template &amp;lt;class F, class Tuple&amp;gt;</span></span>
<span class="line"><span>constexpr decltype(auto)</span></span>
<span class="line"><span>apply(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return apply_impl(</span></span>
<span class="line"><span>    forward&amp;lt;F&amp;gt;(f),</span></span>
<span class="line"><span>    forward&amp;lt;Tuple&amp;gt;(t),</span></span>
<span class="line"><span>    make_index_sequence&amp;lt;</span></span>
<span class="line"><span>      tuple_size_v&amp;lt;</span></span>
<span class="line"><span>        remove_reference_t&amp;lt;</span></span>
<span class="line"><span>          Tuple&amp;gt;&amp;gt;&amp;gt;{});</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们如果有一个三元组 <code>t</code>，类型为 <code>tuple&amp;lt;int, string, string&amp;gt;</code>，去 <code>apply</code> 到一个函数 <code>f</code>，展开后我们得到 <code>apply_impl(f, t, index_sequence&amp;lt;0, 1, 2&amp;gt;{})</code>，再展开后我们就得到了上面那个有 <code>get&amp;lt;0&amp;gt;</code>、<code>get&amp;lt;1&amp;gt;</code>、<code>get&amp;lt;2&amp;gt;</code> 的函数调用形式。换句话说，我们利用一个计数序列的类型，可以在编译时展开 <code>tuple</code> 里的各个成员，并用来调用函数。</p><h2 id="数值预算" tabindex="-1"><a class="header-anchor" href="#数值预算"><span>数值预算</span></a></h2><p>上面的代码有点复杂，而且似乎并没有完成什么很重要的功能。我们下面看一个源自实际项目的例子。需求是，我们希望快速地计算一串二进制数中 1 比特的数量。举个例子，如果我们有十进制的 31 和 254，转换成二进制是 00011111 和 11111110，那我们应该得到 5 + 7 = 12。</p><p>显然，每个数字临时去数肯定会慢，我们应该预先把每个字节的 256 种情况记录下来。因而，如何得到这些计数值是个问题。在没有编译期编程时，我们似乎只能用另外一个程序先行计算，然后把结果填进去——这就很不方便很不灵活了。有了编译期编程，我们就不用写死，而让编译器在编译时帮我们计算数值。</p><p>利用 constexpr 函数，我们计算单个数值完全没有问题。快速定义如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>constexpr int</span></span>
<span class="line"><span>count_bits(unsigned char value)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  if (value == 0) {</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    return (value &amp;amp; 1) +</span></span>
<span class="line"><span>           count_bits(value &amp;gt;&amp;gt; 1);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可 256 个，总不见得把计算语句写上 256 遍吧？这就需要用到我们上面讲到的 <code>index_sequence</code> 了。我们定义一个模板，它的参数是一个序列，在初始化时这个模板会对参数里的每一项计算比特数，并放到数组成员里。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;size_t... V&amp;gt;</span></span>
<span class="line"><span>struct bit_count_t {</span></span>
<span class="line"><span>  unsigned char</span></span>
<span class="line"><span>    count[sizeof...(V)] = {</span></span>
<span class="line"><span>      static_cast&amp;lt;unsigned char&amp;gt;(</span></span>
<span class="line"><span>        count_bits(V))...};</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面用 <code>sizeof...(V)</code> 可以获得参数的个数（在 <code>tuple_size_v</code> 的实现里实际也用到它了）。如果我们模板参数传 <code>0, 1, 2, 3</code>，结果里面就会有个含 4 项元素的数组，数值分别是对 0、1、2、3 的比特计数。</p><p>然后，我们当然就可以利用 <code>make_index_sequence</code> 来展开计算了，想产生几项就可以产生几项。不过，要注意到 <code>make_index_sequence</code> 的结果是个类型，不能直接用在 <code>bit_count_t</code> 的构造中。我们需要用模板匹配来中转一下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>template &amp;lt;size_t... V&amp;gt;</span></span>
<span class="line"><span>constexpr bit_count_t&amp;lt;V...&amp;gt;</span></span>
<span class="line"><span>get_bit_count(index_sequence&amp;lt;V...&amp;gt;)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  return bit_count_t&amp;lt;V...&amp;gt;();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>auto bit_count = get_bit_count(</span></span>
<span class="line"><span>  make_index_sequence&amp;lt;256&amp;gt;());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到 <code>bit_count</code> 后，我们要计算一个序列里的比特数就只是轻松查表相加了，此处不再赘述。</p><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>今天我们讨论了在编译期处理不确定数量的参数和类型的基本语言特性，可变模板，以及可以操控可变模板的重要工具——<code>tuple</code> 和 <code>index_sequence</code>。用好这些工具，可以让我们轻松地完成一些编译期计算的工作。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>请考虑一下：</p><ol><li>我展示了 <code>compose</code> 带一个或更多参数的情况。你觉得 <code>compose</code> 不带任何参数该如何定义？它有意义吗？</li><li>有没有可能不用 <code>index_sequence</code> 来初始化 <code>bit_count</code>？如果行，应该如何实现？</li><li>作为一个挑战，你能自行实现出 <code>make_integer_sequence</code> 吗？</li></ol><p>期待你的答案。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>[1] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “Parameter pack”. <a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/language/parameter_pack</a></p><p>[1a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “形参包”. <a href="https://zh.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/language/parameter_pack</a></p><p>[2] Wikipedia, “Function composition”. <a href="https://en.wikipedia.org/wiki/Function_composition" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Function_composition</a></p><p>[2a] 维基百科, “复合函数”. <a href="https://zh.wikipedia.org/zh-cn/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/复合函数</a></p><p>[3] 吴咏炜, nvwa. <a href="https://github.com/adah1972/nvwa" target="_blank" rel="noopener noreferrer">https://github.com/adah1972/nvwa</a></p><p>[4] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::tuple”. <a href="https://en.cppreference.com/w/cpp/utility/tuple" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/utility/tuple</a></p><p>[4a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::tuple”. <a href="https://zh.cppreference.com/w/cpp/utility/tuple" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/utility/tuple</a></p><p>[5] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::integer_sequence”. <a href="https://en.cppreference.com/w/cpp/utility/integer_sequence" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/utility/integer_sequence</a></p><p>[5a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::integer_sequence”. <a href="https://zh.cppreference.com/w/cpp/utility/integer_sequence" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/utility/integer_sequence</a></p><p>[6] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::apply”. <a href="https://en.cppreference.com/w/cpp/utility/apply" target="_blank" rel="noopener noreferrer">https://en.cppreference.com/w/cpp/utility/apply</a></p><p>[6a] <a href="http://cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a>, “std::apply”. <a href="https://zh.cppreference.com/w/cpp/utility/apply" target="_blank" rel="noopener noreferrer">https://zh.cppreference.com/w/cpp/utility/apply</a></p>`,97)]))}const d=n(i,[["render",l]]),m=JSON.parse('{"path":"/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%8F%90%E9%AB%98%E7%AF%87/18%20_%20%E5%BA%94%E7%94%A8%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%92%8Ctuple%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%8A%80%E5%B7%A7.html","title":"18 _ 应用可变模板和tuple的编译期技巧","lang":"zh-CN","frontmatter":{"description":"18 _ 应用可变模板和tuple的编译期技巧 你好，我是吴咏炜。 今天我们讲一个特殊的专题，如何使用可变模板和 tuple 来完成一些常见的功能，尤其是编译期计算。 可变模板 可变模板 [1] 是 C++11 引入的一项新功能，使我们可以在模板参数里表达不定个数和类型的参数。从实际的角度，它有两个明显的用途： 用于在通用工具模板中转发参数到另外一个函...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%8E%B0%E4%BB%A3C__%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%8F%90%E9%AB%98%E7%AF%87/18%20_%20%E5%BA%94%E7%94%A8%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%92%8Ctuple%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"18 _ 应用可变模板和tuple的编译期技巧"}],["meta",{"property":"og:description","content":"18 _ 应用可变模板和tuple的编译期技巧 你好，我是吴咏炜。 今天我们讲一个特殊的专题，如何使用可变模板和 tuple 来完成一些常见的功能，尤其是编译期计算。 可变模板 可变模板 [1] 是 C++11 引入的一项新功能，使我们可以在模板参数里表达不定个数和类型的参数。从实际的角度，它有两个明显的用途： 用于在通用工具模板中转发参数到另外一个函..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18 _ 应用可变模板和tuple的编译期技巧\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":11.73,"words":3520},"filePathRelative":"posts/现代C++实战30讲/提高篇/18 _ 应用可变模板和tuple的编译期技巧.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"18 | 应用可变模板和tuple的编译期技巧\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/76/e0/76181e927a84617d78a7ca04e16195e0.mp3\\"></audio></p>\\n<p>你好，我是吴咏炜。</p>\\n<p>今天我们讲一个特殊的专题，如何使用可变模板和 tuple 来完成一些常见的功能，尤其是编译期计算。</p>\\n<h2>可变模板</h2>\\n<p>可变模板 [1] 是 C++11 引入的一项新功能，使我们可以在模板参数里表达不定个数和类型的参数。从实际的角度，它有两个明显的用途：</p>","autoDesc":true}');export{d as comp,m as data};
