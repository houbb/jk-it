import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-6Bz2fGO5.js";const p={};function t(r,a){return i(),s("div",null,a[0]||(a[0]=[n(`<p><audio id="audio" title="13 | 落后的代码风格：使用“新”的语言特性和程序库升级你的代码" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/yy/32/yy59304dd803837a64568198faafcc32.mp3"></audio></p><p>你好，我是郑晔。</p><p>上一讲，我们讲的是因为代码不一致造成的坏味道，其中我提到的“方案不一致”，是因为随着时间的流逝，总会有一些新的方案产生，替换原有的方案。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，只要有一个活跃的社区，这门语言就会不断地演进。</p><p>从 C++ 11 开始，C++ 开始出现了大规模的演化，让之前学习 C++的人感觉自己就像没学过这门语言一样；Python 2 与 Python 3 甚至是不兼容的演化；Java 也是每隔一段时间就会出现一次大的语言演进。</p><p>也正是因为语言本身的演化，在不同时期接触不同版本的程序员写出来的程序，甚至不像是在用同一门语言在编程。所以，我们有机会看到在同一个代码库中，各种不同时期风格的代码并存。</p><p>通常来说，新的语言特性都是为了提高代码的表达性，减少犯错误的几率。所以，在实践中，我是非常鼓励你采用新的语言特性写代码的。</p><p>这一讲，我们就以 Java 为例，讲讲如何使用“新”语言特性让代码写得更好。其实，这里的“新”只是相对的，我准备讨论的是 Java 8 的语言特性，按照官方的标准，这是一个已经到了生命周期终点的版本，只不过，从语言特性上来说，Java 8 是最近有重大变更的一个版本，而很多程序员的编码习惯停留在更早的版本。</p><h2 id="optional" tabindex="-1"><a class="header-anchor" href="#optional"><span>Optional</span></a></h2><p>我们先来看一段代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String name = book.getAuthor().getName();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是我们在讲“<a href="https://time.geekbang.org/column/article/333135" target="_blank" rel="noopener noreferrer">缺乏封装</a>”时用到的一个例子，我们这里暂且不考虑缺乏封装的问题。即便如此，严格地说，这段代码依然是有问题的。因为它没有考虑对象可能为 null 的场景。</p><p>所以，这段代码更严谨的写法是这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Author author = book.getAuthor();</span></span>
<span class="line"><span>String name = (author == null) ? null : author.getName();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在很多真实的项目中，这种严格的写法却是稀有的，所以，在实际的运行过程中，我们总会惊喜地发现各种空指针异常。如果你要问程序员为什么不写对象为 null 的判断，答案很可能出乎你意料：他们忘了。</p><p>是的，忘了，就是这么简单得令人发指的理由。</p><p>不用过于责备这些程序员缺乏职业素养，因为这不是个体问题，而是行业整体的问题，IT 行业每年都会因此造成巨大的损失。空指针的发明者 Tony Hoare 将其称为“自己犯下的十亿美元错误”。</p><p>对于这个如此常见的问题，Java 8 中已经给出了一个解决方案，它就是 Optional。Optional 提供了一个对象容器，你需要从中“取出（get）”你所需要的对象，但在取出之前，你需要判断一下这个对象容器中是否真的存在一个对象。用这个思路可以这样改写这段代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class Book {</span></span>
<span class="line"><span>  public Optional&amp;lt;Author&amp;gt; getAuthor() {</span></span>
<span class="line"><span>    return Optioanl.ofNullable(this.author);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Optional&amp;lt;Author&amp;gt; author = book.getAuthor();</span></span>
<span class="line"><span>String name = author.isPresent() ? author.get().getName() : null;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种做法和之前做法的最大差别在于，你不会忘掉判断对象是否存在的过程，因为你需要从 Optional 这个对象容器中取出存在里面的对象。正是这多出来的一步，减少了“忘了”的概率。</p><p>也是因为多了 Optional 这个类，这段代码其实还有更简洁的写法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Optional&amp;lt;Author&amp;gt; author = book.getAuthor();</span></span>
<span class="line"><span>String name = author.map(Author::getName).orElse(null);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 Optional，我们可以在项目中做一个约定，<strong>所有可能为 null 的返回值，都要返回 Optional，以此减少犯错的几率</strong>。关于 Optional，我在《软件设计之美》中花了<a href="https://time.geekbang.org/column/article/258954" target="_blank" rel="noopener noreferrer">专门的篇幅</a>进行了介绍，你有兴趣的话，不妨进一步了解一下。</p><p>事实上，鉴于空对象是一个普遍存在的问题，一些程序设计语言甚至为此专门设计了语法，比如，类似的代码用 Kotlin 或 Groovy 写出来的话，应该是这下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>val author = book.author</span></span>
<span class="line"><span>val name = author?.name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程"><span>函数式编程</span></a></h2><p>Optional 是 Java 8 引入的新特性，它的出现改变了编写 Java 代码的习惯用法。接下来，我们来看看另外一个改变我们代码习惯用法的特性。</p><p>在讲“<a href="https://time.geekbang.org/column/article/332341" target="_blank" rel="noopener noreferrer">滥用控制语句</a>”那一讲时，我留下了一个尾巴，说循环语句本身就是一个坏味道。接下来，我们就来说一下这个问题。我们还是先从一段代码开始：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public ChapterParameters toParameters(final List&amp;lt;Chapter&amp;gt; chapters) {</span></span>
<span class="line"><span>  List&amp;lt;ChapterParameter&amp;gt; parameters = new ArrayList&amp;lt;&amp;gt;();</span></span>
<span class="line"><span>  for (Chapter chapter : chapters) {</span></span>
<span class="line"><span>    if (chapter.isApproved()) {</span></span>
<span class="line"><span>      parameters.add(toChapterParameter(chapter));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  return new ChapterParameters(parameters);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一段向翻译引擎发送章节信息前准备参数的代码，这里首先筛选出审核通过的章节，然后，再把章节转换成与翻译引擎通信的格式，最后，再把所有得到的单个参数打包成一个完整的章节参数。</p><p>如果按照 Java 8 之前的版本理解，这段代码是一段很正常的代码。当 Java 的时代进入到 8 之后，这段代码就成了有坏味道的代码。</p><p>Martin Fowler 在《<a href="https://book.douban.com/subject/30468597/" target="_blank" rel="noopener noreferrer">重构</a>》的第二版中新增的坏味道就包括了循环语句（Loops）。之所以循环语句成了坏味道，一个重要的原因就是函数式编程的兴起。<strong>不是我们不需要遍历集合，而是我们有了更好的遍历集合的方式。</strong></p><p>我在《软件设计之美》讲<a href="https://time.geekbang.org/column/article/257396" target="_blank" rel="noopener noreferrer">函数式编程的组合性</a>时曾经提到过，函数式编程的一个重要洞见就是，大部分操作都可以归结成列表转换，其中，最核心的列表转换就是 map、filter 和 reduce。在函数式编程日益重要的今天，列表转换已经成为了每个程序员应该必备的基本功。</p><p>了解了这些，你就知道为什么循环语句是坏味道了，因为大部分循环语句都是在对一个元素集合进行操作，而这些操作基本上都可以用列表操作进行替代。</p><p>再者，一般来说，采用列表转换写出来的代码相较于传统的循环语句写出来的代码，表达性更好，因为它们都是描述做什么，而传统的循环语句是在描述怎么做。我在这个专栏已经多次说过了，这是两种不同的抽象层次，描述做什么比怎么做的代码，在表达性上要好得多。</p><p>有了这些基础，我们再来看这段代码。这段代码中有一个循环语句，正如前面所说，这个循环语句在处理的是一个集合中的元素，所以，这个循环语句是可以用列表转换的方式代替的。</p><p>具体怎么做呢？其实，这里的行为我们在前面已经分析过了，就是先筛选出审核通过的章节，这个过程对应着 filter，然后，把筛选出来的章节转换成通信中的参数，这个过程对应着 map，最后，把转换的结果搜集起来，这个过程对应着 reduce。所以，这段代码可以改写成这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public ChapterParameters toParameters(final List&amp;lt;Chapter&amp;gt; chapters) {</span></span>
<span class="line"><span>  List&amp;lt;ChapterParameter&amp;gt; parameters = chapters.stream()</span></span>
<span class="line"><span>    .filter(Chapter::isApproved)</span></span>
<span class="line"><span>    .map(this::toChapterParameter)</span></span>
<span class="line"><span>    .collect(Collectors.toList());</span></span>
<span class="line"><span>  return new ChapterParameters(parameters);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过这样的改造，一个循环语句就彻底被一个列表转换的操作替换掉了（这里的 collect 函数对应着 reduce 操作）。在这段代码中，我们用到了 Java 8 提供的一些基础设施，比如，Stream、lambda 和方法引用等等。</p><p>或许有人会说，这段代码看着还不如我原来的循环语句简单。不过，你要知道，两种写法根本的差别是侧重点不同，循环语句是在描述实现细节，而列表转换的写法是在描述做什么，二者的抽象层次不同。</p><p>对于理解这段代码的人来说，二者提供的信息量是完全不同的，循环语句必须要做一次“阅读理解”知晓了其中的细节才能把整个场景拼出来，而列表转换的写法则基本上和我们用语言叙述的过程一一对应。所以，理解的难度是完全不同的。</p><p>这段代码只是为了说明问题，而选择了简单的代码，但在实际工作中，需求会比这复杂得多。而且，如果要添加新的需求，循环语句里的代码会随之变得越来越复杂，原因就是循环语句里都是细节，而列表转换则是一段一段的描述，就像在阅读一篇文章。</p><p>很多人之所以更喜欢使用循环语句而不是列表转换，一个重要原因是对于列表转换的基础还不了解。只要多写几次 filter、map 和 reduce，理解它们就会像理解选择语句和循环语句一样自然。</p><p>到这里有人会说：“你说得有点道理，但为什么我的感觉和你不一样，在实践中，我也使用了这种风格，为什么写出来的代码感觉更难理解了？”对于这一点，一个常见的原因就是，你在列表转换过程中写了太多代码。</p><p>自从 Java 里引入了 lambda，因为写起来实在是太容易了，很多人就直接在列表转换过程中写 lambda。lambda 本身相当于一个匿名函数，所以，很多人在写函数中犯的错误在 lambda 里也一样出现了，最典型的当然就是长函数。</p><p>在各种程序设计语言中，lambda 都是为了写短小代码提供的便利，所以，lambda 中写出大片的代码，根本就是违反 lambda 设计初衷的。<strong>最好的 lambda 应该只有一行代码</strong>。</p><p>那如果一个转换过程中有很多操作怎么办呢？很简单，提取出一个函数，就像前面代码中的 toChapterParameter，它负责完成从 Chapter 到 ChapterParameter 的转换。这样一来，<strong>列表转换的本身就完全变成了一个声明，这样的写法才是能发挥出列表转换价值的写法</strong>。</p><p>在这一讲中，我们以 Optional 和函数式编程为例，讲解了用“新”的代码风格改进代码，其实，我们在前面的内容中也已经讲了不少“新”的代码风格，比如，使用 Java 8 的时间日期类型、try-with-resource 等等。在讲解的过程中，我也提到过不少的编码风格实际上是停留在过去，比如，变量初始化的习惯。</p><p>你可以看到，代码风格有一个逐步演化的过程，每个程序员对此的理解程度都有所差异，所以，如果我们不加注意的话，各种代码风格会并存于代码之中，加剧代码的理解难度，这就是我们上一讲讲到的坏味道：不一致。</p><p>一种编程风格会过时，本质上是因为它存在问题，新代码风格就是用更好的方案解决它，就像今天讲到的 Optional。所以，我们要不断学习新引入的语言特性，了解它们给语言带来的“新”风格，而不要停留在原地。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻"><span>总结时刻</span></a></h2><p>今天我们讲了“新”风格对于代码的改善。每一种有生命力的语言都会在自己的生命周期中不断地对语言本身进行改进，无论是引入新的语言特性，还是引入新的程序库，都会对代码的编写产生或多或少的影响。这一讲，我们用来讲解的例子是 Java 8 引入的 Optional 和函数式编程。</p><p>Optional 是一个对象容器，它的出现是为了规避空对象带来的各种问题。Optional 的引入可以减少由于程序员的忽略而引发对空对象的问题。团队内部可以约定，所有可能返回空对象的地方，都要返回 Optional，以此降低犯错的几率。</p><p>函数式编程是一个影响代码整体风格的重要编程范式，然而，对于很多 Java 程序员来说，Java 8 引入的函数式编程支持，只是引入了一些新的程序库。缺乏对于函数式编程的理解，尤其是对于列表转换思维的理解，让我们虽然有了很多很好的工具，却完全无法发挥其功效。</p><p>懂得列表转换思维，首先要懂得最基本的几个操作：map、filter 和 reduce，然后，就可以把大部分的集合操作转换成列表转换。想要使用这种思维写好代码，一方面，要懂得声明式代码的重要性，另一方面，要懂得写出短小的函数，不要在 lambda 中写过多的代码。</p><p>作为一个精进的程序员，我们要不断地学习“新”的代码风格，改善自己的代码质量，不要故步自封，让自己停留在上一个时代。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>不断学习“新”的代码风格，不断改善自己的代码</strong>。</p><img src="https://static001.geekbang.org/resource/image/00/a9/00ec53d5cbe13368425f119861d3fda9.jpg" alt=""><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>这一讲，我们讲到了不同的代码风格，你有体验过不同的代码风格对于代码库的影响吗？欢迎在留言区分享你的经验。</p><p>对于团队来说，逐步将统一将语言特性和程序库统一到新的风格上是一件很重要的事，欢迎你把这节课学到的知识，分享给你的团队。</p><p>感谢阅读，我们下一讲再见！</p><p>参考资料:</p><p><a href="https://time.geekbang.org/column/article/257396" target="_blank" rel="noopener noreferrer">18 | 函数式编程之组合性：函数式编程为什么如此吸引人？</a></p><p><a href="https://time.geekbang.org/column/article/258954" target="_blank" rel="noopener noreferrer">加餐 | 函数式编程拾遗</a></p>`,64)]))}const d=e(p,[["render",t]]),c=JSON.parse('{"path":"/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91/13%E7%B1%BB%E5%85%B8%E5%9E%8B%E5%9D%8F%E5%91%B3%E9%81%93/13%20_%20%E8%90%BD%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%EF%BC%9A%E4%BD%BF%E7%94%A8%E2%80%9C%E6%96%B0%E2%80%9D%E7%9A%84%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%BA%93%E5%8D%87%E7%BA%A7%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是郑晔。 上一讲，我们讲的是因为代码不一致造成的坏味道，其中我提到的“方案不一致”，是因为随着时间的流逝，总会有一些新的方案产生，替换原有的方案。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，只要有一个活跃的社区，这门语言就会不断地演进。 从 C++ 11 开始，C++ 开始出现了大规模的演化，让之前学习 C++的人感觉...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91/13%E7%B1%BB%E5%85%B8%E5%9E%8B%E5%9D%8F%E5%91%B3%E9%81%93/13%20_%20%E8%90%BD%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%EF%BC%9A%E4%BD%BF%E7%94%A8%E2%80%9C%E6%96%B0%E2%80%9D%E7%9A%84%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%BA%93%E5%8D%87%E7%BA%A7%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是郑晔。 上一讲，我们讲的是因为代码不一致造成的坏味道，其中我提到的“方案不一致”，是因为随着时间的流逝，总会有一些新的方案产生，替换原有的方案。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，只要有一个活跃的社区，这门语言就会不断地演进。 从 C++ 11 开始，C++ 开始出现了大规模的演化，让之前学习 C++的人感觉..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":12.32,"words":3695},"filePathRelative":"posts/代码之丑/13类典型坏味道/13 _ 落后的代码风格：使用“新”的语言特性和程序库升级你的代码.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"13 | 落后的代码风格：使用“新”的语言特性和程序库升级你的代码\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/yy/32/yy59304dd803837a64568198faafcc32.mp3\\"></audio></p>\\n<p>你好，我是郑晔。</p>\\n<p>上一讲，我们讲的是因为代码不一致造成的坏味道，其中我提到的“方案不一致”，是因为随着时间的流逝，总会有一些新的方案产生，替换原有的方案。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，只要有一个活跃的社区，这门语言就会不断地演进。</p>","autoDesc":true}');export{d as comp,c as data};
