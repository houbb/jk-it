import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as p}from"./app-CrA-f6So.js";const i={};function l(t,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_12-树的深度优先搜索-下-如何才能高效率地查字典" tabindex="-1"><a class="header-anchor" href="#_12-树的深度优先搜索-下-如何才能高效率地查字典"><span>12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？</span></a></h1><p><audio id="audio" title="12 | 树的深度优先搜索（下）：如何才能高效率地查字典？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/62/db/620a9d90a1b8433b9698a3a3faaf2cdb.mp3"></audio></p><p>你好，我是黄申。今天咱们继续聊前缀树。</p><p>上节结尾我给你留了道思考题：如何实现前缀树的构建和查询？如果你动手尝试之后，你会发现，这个案例的实现没有我们前面讲的那些排列组合这么直观。</p><p>这是因为，从数学的思想，到最终的编程实现，其实需要一个比较长的流程。我们首先需要把问题转化成数学中的模型，然后使用数据结构和算法来刻画数学模型，最终才能落实到编码。</p><p>而在前缀树中，我们需要同时涉及树的结构、树的动态构建和深度优先搜索，这个实现过程相对比较复杂。所以，这节我就给你仔细讲解一下，这个实现过程中需要注意的点。只要掌握这些点，你就能轻而易举实现深度优先搜索。</p><h2 id="如何使用数据结构表达树" tabindex="-1"><a class="header-anchor" href="#如何使用数据结构表达树"><span>如何使用数据结构表达树？</span></a></h2><p>首先，我想问你一个问题，什么样的数据结构可以表示树？</p><p>我们知道，计算机中最基本的数据结构是数组和链表。数组适合快速地随机访问。不过，数组并不适合稀疏的数列或者矩阵，而且数组中元素的插入和删除操作也比较低效。相对于数组，链表的随机访问的效率更低，但是它的优势是，不必事先规定数据的数量，表示稀疏的数列或矩阵时，可以更有效地利用存储空间，同时也利于数据的动态插入和删除。</p><p>我们再来看树的特点。树的结点及其之间的边，和链表中的结点和链接在本质上是一样的，因此，我们可以模仿链表的结构，用编程语言中的指针或对象引用来构建树。</p><p>除此之外，我们其实还可以用二维数组。用数组的行或列元素表示树中的结点，而行和列共同确定了两个树结点之间是不是存在边。可是在树中，这种二维关系通常是非常稀疏的、非常动态的，所以用数组效率就比较低下。</p><p>基于上面这些考虑，我们可以设计一个TreeNode类，表示有向树的结点和边。这个类需要体现前缀树结点最重要的两个属性。</p><li> 这个结点所代表的字符，要用label变量表示。 </li><li> 这个结点有哪些子结点，要用sons哈希映射表示。之所以用哈希，是为了便于查找某个子结点（或者说对应的字符）是否存在。 </li><p>另外，我们还可以用变量prefix表示当前结点之前的前缀，用变量explanation表示某个单词的解释。和之前一样，为了代码的简洁，所有属性都用了public，避免读取和设置类属性的代码。</p><p>这里我写了一段TreeNode类的代码，来表示前缀树的结点和边，你可以看看。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>* @Description: 前缀树的结点</span></span>
<span class="line"><span>* </span></span>
<span class="line"><span>*/</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> public class TreeNode {</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  public char label;  // 结点的名称，在前缀树里是单个字母</span></span>
<span class="line"><span>  public HashMap&amp;lt;Character, TreeNode&amp;gt; sons = null; // 使用哈希映射存放子结点。哈希便于确认是否已经添加过某个字母对应的结点。</span></span>
<span class="line"><span>  public String prefix = null;   // 从树的根到当前结点这条通路上，全部字母所组成的前缀。例如通路b-&amp;gt;o-&amp;gt;y，对于字母o结点而言，前缀是b；对于字母y结点而言，前缀是bo</span></span>
<span class="line"><span>  public String explanation = null;  // 词条的解释</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  // 初始化结点</span></span>
<span class="line"><span>  public TreeNode(char l, String pre, String exp) {</span></span>
<span class="line"><span>   label = l;</span></span>
<span class="line"><span>   prefix = pre; </span></span>
<span class="line"><span>   explanation = exp;</span></span>
<span class="line"><span>   sons = new HashMap&amp;lt;&amp;gt;();</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说到这里，你可能会好奇，为什么只有结点的定义，而没有边的定义呢？实际上，这里的有向边表达的是父子结点之间的关系，我把这种关系用sons变量来存储父结点。</p><p>需要注意的是，我们需要动态地构建这棵树。每当接收一个新单词时，代码都需要扫描这个单词的每个字母，并使用当前的前缀树进行匹配。如果匹配到某个结点，发现相应的字母结点并不存在，那么就建立一个新的树结点。这个过程不好理解，我也写了几行代码，你可以结合来看。其中，str表示还未处理的字符串，parent表示父结点。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 处理当前字符串的第一个字母</span></span>
<span class="line"><span>char c = str.toCharArray()[0];</span></span>
<span class="line"><span>TreeNode found = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 如果字母结点已经存在于当前父结点之下，找出它。否则就新生成一个</span></span>
<span class="line"><span>if (parent.sons.containsKey(c)) {</span></span>
<span class="line"><span>	found = parent.sons.get(c);</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>	TreeNode son = new TreeNode(c, pre, &amp;quot;&amp;quot;);</span></span>
<span class="line"><span>	parent.sons.put(c, son);</span></span>
<span class="line"><span>	found = son;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用递归和栈实现深度优先搜索" tabindex="-1"><a class="header-anchor" href="#如何使用递归和栈实现深度优先搜索"><span>如何使用递归和栈实现深度优先搜索？</span></a></h2><p>构建好了数据结构，我们现在需要考虑，<strong>什么样的编程方式可以实现对树结点和边的操作？</strong></p><p>仔细观察前缀树构建和查询，你会发现这两个不断重复迭代的过程，都可以使用递归编程来实现。换句话说，<strong>深度优先搜索的过程和递归调用在逻辑上是一致的</strong>。</p><p>我们可以把函数的嵌套调用，看作访问下一个连通的结点；把函数的返回，看作没有更多新的结点需要访问，回溯到上一个结点。在之前的案例中，我已经讲过很多次递归编程的例子，这里我就不列举代码细节了。如果忘记的话，你可以回去前面章节复习一下。</p><p>在查询的过程中，至少有三种情况是无法在字典里找到被查的单词的。于是，我们需要在递归的代码中做相应的处理。</p><p><strong>第一种情况：被查单词所有字母都被处理完毕，但是我们仍然无法在字典里找到相应的词条。</strong></p><p>每次递归调用的函数开始，我们都需要判断待查询的单词，看看是否还有字母需要处理。如果没有更多的字母需要匹配了，那么再确认一下当前匹配到的结点本身是不是一个单词。如果是，就返回相应的单词解释，否则就返回查找失败。对于结点是不是一个单词，你可以使用Node类中的explanation变量来进行标识和判断，如果不是一个存在的单词，这个变量应该是空串或者Null值。</p><p><strong>第二种情况：搜索到前缀树的叶子结点，但是被查单词仍有未处理的字母，就返回查找失败。</strong></p><p>我们可以通过结点对象的sons变量来判断这个结点是不是叶子结点。如果是叶子结点，这个变量应该是空的HashMap，或者Null值。</p><p><strong>第三种情况：搜索到中途，还没到达叶子结点，被查单词也有尚未处理的字母，但是当前被处理的字母已经无法和结点上的label匹配，返回查找失败。是不是叶子仍然通过结点对象的sons变量来判断。</strong></p><p>好了，现在你已经可以很方便地在字典里查找某个单词，看看它是否存在，或者看看它的解释是什么。我这里又有一个新的问题了：<strong>如果我想遍历整个字典中所有的单词，那该怎么办呢？</strong></p><p>仔细观察一下，你应该能发现，查找一个单词的过程，其实就是在有向树中，找一条从树的根到代表这个单词的结点之通路。那么如果要遍历所有的单词，就意味着我们要找出从根到所有代表单词的结点之通路。所以，在每个结点上，我们不再是和某个待查询单词中的字符进行比较，而是要遍历该结点所有的子结点，这样才能找到所有可能的通路。我们还可以用递归来实现这一过程。</p><p>尽管函数递归调用非常直观，可是也有它自身的弱点。函数的每次嵌套，都可能产生新的变量来保存中间结果，这可能会消耗大量的内存。所以这里我们可以用一个更节省内存的数据结构，栈（Stack）。</p><p>栈的特点是先进后出（First In Last Out），也就是，最先进入栈的元素最后才会得到处理。我画了一张元素入栈和出栈的过程图，你可以看看。</p><img src="https://static001.geekbang.org/resource/image/53/c1/5391e9f266cb795cec532cc54928b8c1.jpg" alt=""><p>为什么栈可以进行深度优先搜索呢？你可以先回顾一下上一节，我解释深度优先搜索时候的例子。为了方便你回想，我把图放在这里了。</p><img src="https://static001.geekbang.org/resource/image/90/b7/900c981c816375268eefdf274cb149b7.jpg" alt=""><p>然后，我们用栈来实现一下这个过程。</p><p>第1步，将初始结点110压入栈中。</p><p>第2步，弹出结点110，搜出下一级结点123、879、945和131。</p><p>第3步，将结点123、879、945和131压入栈中。</p><p>第4步，重复第2步和第3步弹出和压入的步骤，处理结点123，将新发现结点162和587压入栈中。</p><p>第5步，处理结点162，由于162是叶子结点，所以没有发现新的点。第6步，重复第2和第3步，处理结点587，将新发现结点681压入栈中。</p><p>……</p><p>第n-1步，重复第2和第3步，处理结点131，将新发现结点906压入栈中。</p><p>第n步，重复第2和第3步，处理结点906，没有发现新的结点，也没有更多待处理的结点，整个过程结束。</p><img src="https://static001.geekbang.org/resource/image/89/45/893203ec268e095397966b58e1c71d45.jpg" alt=""><p>从上面的步骤来看，栈先进后出的特性，可以模拟函数的递归调用。实际上，计算机系统里的函数递归，在内部也是通过栈来实现的。如果我们不使用函数调用时自动生成的栈，而是手动使用栈的数据结构，就能始终保持数据的副本只有一个，大大节省内存的使用量。</p><p>用TreeNode类和栈实现深度优先搜索的代码我写出来了，你可以看看。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 使用栈来实现深度优先搜索</span></span>
<span class="line"><span>public void dfsByStack(TreeNode root) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Stack&amp;lt;TreeNode&amp;gt; stack = new Stack&amp;lt;TreeNode&amp;gt;(); </span></span>
<span class="line"><span>	  // 创建堆栈对象，其中每个元素都是TreeNode类型</span></span>
<span class="line"><span>  stack.push(root);		// 初始化的时候，压入根结点</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  while (!stack.isEmpty()) {	// 只要栈里还有结点，就继续下去</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	TreeNode node = stack.pop();	// 弹出栈顶的结点</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	if (node.sons.size() == 0) {</span></span>
<span class="line"><span>		// 已经到达叶子结点了，输出</span></span>
<span class="line"><span>		System.out.println(node.prefix + node.label);</span></span>
<span class="line"><span>	} else {</span></span>
<span class="line"><span>		// 非叶子结点，遍历它的每个子结点</span></span>
<span class="line"><span>		Iterator&amp;lt;Entry&amp;lt;Character, TreeNode&amp;gt;&amp;gt; iter </span></span>
<span class="line"><span>			= node.sons.entrySet().iterator();</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>		// 注意，这里使用了一个临时的栈stackTemp</span></span>
<span class="line"><span>		// 这样做是为了保持遍历的顺序，和递归遍历的顺序是一致的</span></span>
<span class="line"><span>		// 如果不要求一致，可以直接压入stack</span></span>
<span class="line"><span>		Stack&amp;lt;TreeNode&amp;gt; stackTemp = new Stack&amp;lt;TreeNode&amp;gt;();</span></span>
<span class="line"><span>		while (iter.hasNext()) {</span></span>
<span class="line"><span>			stackTemp.push(iter.next().getValue());</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		while (!stackTemp.isEmpty()) {</span></span>
<span class="line"><span>			stack.push(stackTemp.pop());</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有个细节需要注意一下。当我们把某个结点的子结点压入栈的时候，由于栈“先进后出”的特性，会导致子结点的访问顺序，和递归遍历时子结点的访问顺序相反。如果你希望两者保持一致，可以用一个临时的栈stackTemp把子结点入栈的顺序颠倒过来。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>这一节我们用递归来实现了深度优先搜索。说到这，你可能会想到，之前讨论的归并排序、排列组合等课题，也采用了递归来实现，那它们是不是也算深度优先搜索呢？</p><p>我把归并排序和排列的分解过程放在这里，它们是不是也可以用有向树来表示呢？</p><p>在归并排序的数据分解阶段，初始的数据集就是树的根结点，二分之前的数据集代表父节点，而二分之后的左半边的数据集和右半边的数据集都是父结点的子结点。分解过程一直持续到单个的数值，也就是最末端的叶子结点，很明显这个阶段可以用树来表示。如果使用递归编程来进行数据的切分，那么这种实现就是深度优先搜索的体现。</p><img src="https://static001.geekbang.org/resource/image/54/12/5410fb301ffce57355ad7ef074e8fd12.jpg" alt=""><p>在排列中，我们可以把空集认为是树的根结点，如果把每次选择的元素作为父结点，那么剩下可选择的元素，就构成了这个父结点的子结点。而每多选择一个元素，就会把树的高度加1。因此，我们也可以使用递归和深度优先搜索，列举所有可能的排列。</p><img src="https://static001.geekbang.org/resource/image/98/15/98df21876ad52195217709e298707515.jpg" alt=""><p>从这两个例子，我们可以看出有些数学思想都是相通的，例如递归、排列和深度优先搜索等等。</p><p>我来总结一下，其实深度优先搜索的核心思想，就是按照当前的通路，不断地向前进，当遇到走不通的时候就回退到上一个结点，通过另一个新的边进行尝试。如果这一个点所有的方向都走不通的时候，就继续回退。这样一次一次循环下去，直到到达目标结点。树中的每个结点，既可以表示某个子问题和它所对应的抽象状态，也可以表示某个数据结构中一部分具体的值。</p><p>所以，我们需要做的是，观察问题是否可以使用递归的方式来逐步简化，或者是否需要像前缀树这样遍历，如果是，就可以尝试使用深度优先搜索来帮助我们思考并解决问题。</p><img src="https://static001.geekbang.org/resource/image/ae/c7/aeef1d5f6be9b5d09618a189520055c7.jpg" alt=""><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>这两节我讲的是树的深度优先搜索。如果是在一般的图中进行深度优先搜索，会有什么不同呢？</p><p>欢迎在留言区交作业，并写下你今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</p>`,65)]))}const d=n(i,[["render",l]]),o=JSON.parse('{"path":"/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%9F%BA%E7%A1%80%E6%80%9D%E6%83%B3%E7%AF%87/12%20_%20%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E6%89%8D%E8%83%BD%E9%AB%98%E6%95%88%E7%8E%87%E5%9C%B0%E6%9F%A5%E5%AD%97%E5%85%B8%EF%BC%9F.html","title":"12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？","lang":"zh-CN","frontmatter":{"description":"12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？ 你好，我是黄申。今天咱们继续聊前缀树。 上节结尾我给你留了道思考题：如何实现前缀树的构建和查询？如果你动手尝试之后，你会发现，这个案例的实现没有我们前面讲的那些排列组合这么直观。 这是因为，从数学的思想，到最终的编程实现，其实需要一个比较长的流程。我们首先需要把问题转化成数学中的模型，然后使用...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%9F%BA%E7%A1%80%E6%80%9D%E6%83%B3%E7%AF%87/12%20_%20%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E6%89%8D%E8%83%BD%E9%AB%98%E6%95%88%E7%8E%87%E5%9C%B0%E6%9F%A5%E5%AD%97%E5%85%B8%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？"}],["meta",{"property":"og:description","content":"12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？ 你好，我是黄申。今天咱们继续聊前缀树。 上节结尾我给你留了道思考题：如何实现前缀树的构建和查询？如果你动手尝试之后，你会发现，这个案例的实现没有我们前面讲的那些排列组合这么直观。 这是因为，从数学的思想，到最终的编程实现，其实需要一个比较长的流程。我们首先需要把问题转化成数学中的模型，然后使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":12.43,"words":3730},"filePathRelative":"posts/程序员的数学基础课/基础思想篇/12 _ 树的深度优先搜索（下）：如何才能高效率地查字典？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"12 | 树的深度优先搜索（下）：如何才能高效率地查字典？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/62/db/620a9d90a1b8433b9698a3a3faaf2cdb.mp3\\"></audio></p>\\n<p>你好，我是黄申。今天咱们继续聊前缀树。</p>\\n<p>上节结尾我给你留了道思考题：如何实现前缀树的构建和查询？如果你动手尝试之后，你会发现，这个案例的实现没有我们前面讲的那些排列组合这么直观。</p>","autoDesc":true}');export{d as comp,o as data};
