import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as s}from"./app-CrA-f6So.js";const r={};function p(n,e){return s(),t("div",null,e[0]||(e[0]=[i('<h1 id="加餐-推荐几款常用的性能测试工具" tabindex="-1"><a class="header-anchor" href="#加餐-推荐几款常用的性能测试工具"><span>加餐 _ 推荐几款常用的性能测试工具</span></a></h1><p><audio id="audio" title="加餐 | 推荐几款常用的性能测试工具" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/af/c0/afcc5d1c597fd4c852565dff3478d6c0.mp3"></audio></p><p>你好，我是刘超。很多同学给我留言想让我讲讲工具，所以我的第一篇加餐就光速来了～</p><p>熟练掌握一款性能测试工具，是我们必备的一项技能。他不仅可以帮助我们模拟测试场景（包括并发、复杂的组合场景），还能将测试结果转化成数据或图形，帮助我们更直观地了解系统性能。</p><h2 id="常用的性能测试工具" tabindex="-1"><a class="header-anchor" href="#常用的性能测试工具"><span>常用的性能测试工具</span></a></h2><p>常用的性能测试工具有很多，在这里我将列举几个比较实用的。</p><p>对于开发人员来说，首选是一些开源免费的性能（压力）测试软件，例如ab（ApacheBench）、JMeter等；对于专业的测试团队来说，付费版的LoadRunner是首选。当然，也有很多公司是自行开发了一套量身定做的性能测试软件，优点是定制化强，缺点则是通用性差。</p><p>接下来，我会为你重点介绍ab和JMeter两款测试工具的特点以及常规的使用方法。</p><h3 id="_1-ab" tabindex="-1"><a class="header-anchor" href="#_1-ab"><span>1.ab</span></a></h3><p>ab测试工具是Apache提供的一款测试工具，具有简单易上手的特点，在测试Web服务时非常实用。</p><p>ab可以在Windows系统中使用，也可以在Linux系统中使用。这里我说下在Linux系统中的安装方法，非常简单，只需要在Linux系统中输入yum-y install httpd-tools命令，就可以了。</p><p>安装成功后，输入ab命令，可以看到以下提示：</p><img src="https://static001.geekbang.org/resource/image/ac/0a/ac58706f86ebd1d7349561ae501fca0a.png" alt=""><p>ab工具用来测试post get接口请求非常便捷，可以通过参数指定请求数、并发数、请求参数等。例如，一个测试并发用户数为10、请求数量为100的的post请求输入如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ab -n 100  -c 10 -p &#39;post.txt&#39; -T &#39;application/x-www-form-urlencoded&#39; &#39;http://test.api.com/test/register&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>post.txt为存放post参数的文档，存储格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>usernanme=test&amp;amp;password=test&amp;amp;sex=1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>附上几个常用参数的含义：</strong></p><ul><li>-n：总请求次数（最小默认为1）；</li><li>-c：并发次数（最小默认为1且不能大于总请求次数，例如：10个请求，10个并发，实际就是1人请求1次）；</li><li>-p：post参数文档路径（-p和-T参数要配合使用）；</li><li>-T：header头内容类型（此处切记是大写英文字母T）。</li></ul><p>当我们测试一个get请求接口时，可以直接在链接的后面带上请求的参数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ab -c 10 -n 100 http://www.test.api.com/test/login?userName=test&amp;amp;password=test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出结果如下：</p><img src="https://static001.geekbang.org/resource/image/66/9b/66e7cf2dafa91a3ae80405f97a91899b.png" alt=""><p><strong>以上输出中，有几项性能指标可以提供给你参考使用：</strong></p><ul><li>Requests per second：吞吐率，指某个并发用户数下单位时间内处理的请求数；</li><li>Time per request：上面的是用户平均请求等待时间，指处理完成所有请求数所花费的时间/（总请求数/并发用户数）；</li><li>Time per request：下面的是服务器平均请求处理时间，指处理完成所有请求数所花费的时间/总请求数；</li><li>Percentage of the requests served within a certain time：每秒请求时间分布情况，指在整个请求中，每个请求的时间长度的分布情况，例如有50%的请求响应在8ms内，66%的请求响应在10ms内，说明有16%的请求在8ms~10ms之间。</li></ul><h3 id="_2-jmeter" tabindex="-1"><a class="header-anchor" href="#_2-jmeter"><span>2.JMeter</span></a></h3><p>JMeter是Apache提供的一款功能性比较全的性能测试工具，同样可以在Windows和Linux环境下安装使用。</p><p>JMeter在Windows环境下使用了图形界面，可以通过图形界面来编写测试用例，具有易学和易操作的特点。</p><p>JMeter不仅可以实现简单的并发性能测试，还可以实现复杂的宏基准测试。我们可以通过录制脚本的方式，在JMeter实现整个业务流程的测试。JMeter也支持通过csv文件导入参数变量，实现用多样化的参数测试系统性能。</p><p>Windows下的JMeter安装非常简单，在官网下载安装包，解压后即可使用。如果你需要打开图形化界面，那就进入到bin目录下，找到jmeter.bat文件，双击运行该文件就可以了。</p><img src="https://static001.geekbang.org/resource/image/2d/53/2d96660e8e88a2697e066fd301663153.png" alt=""><p>JMeter的功能非常全面，我在这里简单介绍下如何录制测试脚本，并使用JMeter测试业务的性能。</p><p>录制JMeter脚本的方法有很多，一种是使用Jmeter自身的代理录制，另一种是使用Badboy这款软件录制，还有一种是我下面要讲的，通过安装浏览器插件的方式实现脚本的录制，这种方式非常简单，不用做任何设置。</p><p>首先我们安装一个录制测试脚本的插件，叫做BlazeMeter插件。你可以在Chrome应用商店中找到它，然后点击安装， 如图所示：</p><img src="https://static001.geekbang.org/resource/image/a8/3e/a8f7403c1b6b720318d97accf191843e.png" alt=""><p>然后使用谷歌账号登录这款插件，如果不登录，我们将无法生成JMeter文件，安装以及登录成功后的界面如下图所示：</p><img src="https://static001.geekbang.org/resource/image/29/4a/2932afaf9eecb2cce789ad5151180a4a.png" alt=""><p>最后点击开始，就可以录制脚本了。录制成功后，点击保存为JMX文件，我们就可以通过JMeter打开这个文件，看到录制的脚本了，如下图所示：</p><img src="https://static001.geekbang.org/resource/image/bf/fd/bf03e37ace494cf84171b55f9b63bdfd.png" alt=""><p>这个时候，我们还需要创建一个查看结果树，用来可视化查看运行的性能结果集合：</p><img src="https://static001.geekbang.org/resource/image/84/69/844a2a65add49c2f4d15b10667943069.png" alt=""><p>设置好结果树之后，我们可以对线程组的并发用户数以及循环调用次数进行设置：</p><img src="https://static001.geekbang.org/resource/image/43/9b/431ae410ec4369cc81af7622a23b409b.png" alt=""><p>设置成功之后，点击运行，我们可以看到运行的结果：</p><img src="https://static001.geekbang.org/resource/image/6f/67/6ffe85677e50bb75152d45526a7ba667.png" alt=""><p>JMeter的测试结果与ab的测试结果的指标参数差不多，这里我就不再重复讲解了。</p><h3 id="_3-loadrunner" tabindex="-1"><a class="header-anchor" href="#_3-loadrunner"><span>3.LoadRunner</span></a></h3><p>LoadRunner是一款商业版的测试工具，并且License的售价不低。</p><p>作为一款专业的性能测试工具，LoadRunner在性能压测时，表现得非常稳定和高效。相比JMeter，LoadRunner可以模拟出不同的内网IP地址，通过分配不同的IP地址给测试的用户，模拟真实环境下的用户。这里我就不展开详述了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>三种常用的性能测试工具就介绍完了，最后我把今天的主要内容为你总结了一张图。</p><img src="https://static001.geekbang.org/resource/image/a7/1a/a70d0081607081471df4db435641b51a.jpg" alt=""><p>现在测试工具非常多，包括阿里云的PTS测试工具也很好用，但每款测试工具其实都有自己的优缺点。个人建议，还是在熟练掌握其中一款测试工具的前提下，再去探索其他测试工具的使用方法会更好。</p><p>今天的加餐到这里就结束了，如果你有其他疑问或者更多想要了解的内容，欢迎留言告诉我。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起学习。</p>',54)]))}const d=a(r,[["render",p]]),l=JSON.parse('{"path":"/posts/Java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/%E6%A8%A1%E5%9D%97%E4%BA%8C%20%C2%B7%20Java%E7%BC%96%E7%A8%8B%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E5%8A%A0%E9%A4%90%20_%20%E6%8E%A8%E8%8D%90%E5%87%A0%E6%AC%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html","title":"加餐 _ 推荐几款常用的性能测试工具","lang":"zh-CN","frontmatter":{"description":"加餐 _ 推荐几款常用的性能测试工具 你好，我是刘超。很多同学给我留言想让我讲讲工具，所以我的第一篇加餐就光速来了～ 熟练掌握一款性能测试工具，是我们必备的一项技能。他不仅可以帮助我们模拟测试场景（包括并发、复杂的组合场景），还能将测试结果转化成数据或图形，帮助我们更直观地了解系统性能。 常用的性能测试工具 常用的性能测试工具有很多，在这里我将列举几个...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/%E6%A8%A1%E5%9D%97%E4%BA%8C%20%C2%B7%20Java%E7%BC%96%E7%A8%8B%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E5%8A%A0%E9%A4%90%20_%20%E6%8E%A8%E8%8D%90%E5%87%A0%E6%AC%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"加餐 _ 推荐几款常用的性能测试工具"}],["meta",{"property":"og:description","content":"加餐 _ 推荐几款常用的性能测试工具 你好，我是刘超。很多同学给我留言想让我讲讲工具，所以我的第一篇加餐就光速来了～ 熟练掌握一款性能测试工具，是我们必备的一项技能。他不仅可以帮助我们模拟测试场景（包括并发、复杂的组合场景），还能将测试结果转化成数据或图形，帮助我们更直观地了解系统性能。 常用的性能测试工具 常用的性能测试工具有很多，在这里我将列举几个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加餐 _ 推荐几款常用的性能测试工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":6.12,"words":1837},"filePathRelative":"posts/Java性能调优实战/模块二 · Java编程性能调优/加餐 _ 推荐几款常用的性能测试工具.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"加餐 | 推荐几款常用的性能测试工具\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/af/c0/afcc5d1c597fd4c852565dff3478d6c0.mp3\\"></audio></p>\\n<p>你好，我是刘超。很多同学给我留言想让我讲讲工具，所以我的第一篇加餐就光速来了～</p>\\n<p>熟练掌握一款性能测试工具，是我们必备的一项技能。他不仅可以帮助我们模拟测试场景（包括并发、复杂的组合场景），还能将测试结果转化成数据或图形，帮助我们更直观地了解系统性能。</p>","autoDesc":true}');export{d as comp,l as data};
