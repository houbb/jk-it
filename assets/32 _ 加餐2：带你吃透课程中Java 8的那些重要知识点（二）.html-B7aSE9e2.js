import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as e,b as n,d as a,e as i,w as l,r as t,o as c}from"./app-CrA-f6So.js";const o={};function u(v,s){const p=t("order"),r=t("orderitem");return c(),m("div",null,[s[13]||(s[13]=e(`<h1 id="_32-加餐2-带你吃透课程中java-8的那些重要知识点-二" tabindex="-1"><a class="header-anchor" href="#_32-加餐2-带你吃透课程中java-8的那些重要知识点-二"><span>32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二）</span></a></h1><p><audio id="audio" title="32 | 加餐2：带你吃透课程中Java 8的那些重要知识点（二）" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/60/4c/60f75bbd9b617b4e4991117b1803e64c.mp3"></audio></p><p>你好，我是朱晔。</p><p>上一讲的几个例子中，其实都涉及了Stream API的最基本使用方法。今天，我会与你详细介绍复杂、功能强大的Stream API。</p><p>Stream流式操作，用于对集合进行投影、转换、过滤、排序等，更进一步地，这些操作能链式串联在一起使用，类似于SQL语句，可以大大简化代码。可以说，Stream操作是Java 8中最重要的内容，也是这个课程大部分代码都会用到的操作。</p><p>我先说明下，有些案例可能不太好理解，建议你对着代码逐一到源码中查看Stream操作的方法定义，以及JDK中的代码注释。</p><h2 id="stream操作详解" tabindex="-1"><a class="header-anchor" href="#stream操作详解"><span>Stream操作详解</span></a></h2><p>为了方便你理解Stream的各种操作，以及后面的案例，我先把这节课涉及的Stream操作汇总到了一张图中。你可以先熟悉一下。</p><img src="https://static001.geekbang.org/resource/image/44/04/44a6f4cb8b413ef62c40a272cb474104.jpg" alt=""><p>在接下来的讲述中，我会围绕订单场景，给出如何使用Stream的各种API完成订单的统计、搜索、查询等功能，和你一起学习Stream流式操作的各种方法。你可以结合代码中的注释理解案例，也可以自己运行源码观察输出。</p><p>我们先定义一个订单类、一个订单商品类和一个顾客类，用作后续Demo代码的数据结构：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//订单类</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>public class Order {</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private Long customerId;//顾客ID</span></span>
<span class="line"><span>    private String customerName;//顾客姓名</span></span>
<span class="line"><span>    private List&amp;lt;OrderItem&amp;gt; orderItemList;//订单商品明细</span></span>
<span class="line"><span>    private Double totalPrice;//总价格</span></span>
<span class="line"><span>    private LocalDateTime placedAt;//下单时间</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>//订单商品类</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>@NoArgsConstructor</span></span>
<span class="line"><span>public class OrderItem {</span></span>
<span class="line"><span>    private Long productId;//商品ID</span></span>
<span class="line"><span>    private String productName;//商品名称</span></span>
<span class="line"><span>    private Double productPrice;//商品价格</span></span>
<span class="line"><span>    private Integer productQuantity;//商品数量</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>//顾客类</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>public class Customer {</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private String name;//顾客姓名</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),n("p",null,[s[1]||(s[1]=a("在这里，我们有一个orders字段保存了一些模拟数据，类型是List")),i(p,null,{default:l(()=>s[0]||(s[0]=[a("。这里，我就不贴出生成模拟数据的代码了。这不会影响你理解后面的代码，你也可以自己下载源码阅读。")])),_:1})]),s[14]||(s[14]=e(`<h3 id="创建流" tabindex="-1"><a class="header-anchor" href="#创建流"><span>创建流</span></a></h3><p>要使用流，就要先创建流。创建流一般有五种方式：</p><ul><li>通过stream方法把List或数组转换为流；</li><li>通过Stream.of方法直接传入多个元素构成一个流；</li><li>通过Stream.iterate方法使用迭代的方式构造一个无限流，然后使用limit限制流元素个数；</li><li>通过Stream.generate方法从外部传入一个提供元素的Supplier来构造无限流，然后使用limit限制流元素个数；</li><li>通过IntStream或DoubleStream构造基本类型的流。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//通过stream方法把List或数组转换为流</span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void stream()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    Arrays.asList(&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;a3&amp;quot;).stream().forEach(System.out::println);</span></span>
<span class="line"><span>    Arrays.stream(new int[]{1, 2, 3}).forEach(System.out::println);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//通过Stream.of方法直接传入多个元素构成一个流</span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void of()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    String[] arr = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;};</span></span>
<span class="line"><span>    Stream.of(arr).forEach(System.out::println);</span></span>
<span class="line"><span>    Stream.of(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;).forEach(System.out::println);</span></span>
<span class="line"><span>    Stream.of(1, 2, &amp;quot;a&amp;quot;).map(item -&amp;gt; item.getClass().getName()).forEach(System.out::println);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//通过Stream.iterate方法使用迭代的方式构造一个无限流，然后使用limit限制流元素个数</span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void iterate()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    Stream.iterate(2, item -&amp;gt; item * 2).limit(10).forEach(System.out::println);</span></span>
<span class="line"><span>    Stream.iterate(BigInteger.ZERO, n -&amp;gt; n.add(BigInteger.TEN)).limit(10).forEach(System.out::println);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//通过Stream.generate方法从外部传入一个提供元素的Supplier来构造无限流，然后使用limit限制流元素个数</span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void generate()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    Stream.generate(() -&amp;gt; &amp;quot;test&amp;quot;).limit(3).forEach(System.out::println);</span></span>
<span class="line"><span>    Stream.generate(Math::random).limit(10).forEach(System.out::println);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//通过IntStream或DoubleStream构造基本类型的流</span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void primitive()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    //演示IntStream和DoubleStream</span></span>
<span class="line"><span>    IntStream.range(1, 3).forEach(System.out::println);</span></span>
<span class="line"><span>    IntStream.range(0, 3).mapToObj(i -&amp;gt; &amp;quot;x&amp;quot;).forEach(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    IntStream.rangeClosed(1, 3).forEach(System.out::println);</span></span>
<span class="line"><span>    DoubleStream.of(1.1, 2.2, 3.3).forEach(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //各种转换，后面注释代表了输出结果</span></span>
<span class="line"><span>    System.out.println(IntStream.of(1, 2).toArray().getClass()); //class [I</span></span>
<span class="line"><span>    System.out.println(Stream.of(1, 2).mapToInt(Integer::intValue).toArray().getClass()); //class [I</span></span>
<span class="line"><span>    System.out.println(IntStream.of(1, 2).boxed().toArray().getClass()); //class [Ljava.lang.Object;</span></span>
<span class="line"><span>    System.out.println(IntStream.of(1, 2).asDoubleStream().toArray().getClass()); //class [D</span></span>
<span class="line"><span>    System.out.println(IntStream.of(1, 2).asLongStream().toArray().getClass()); //class [J</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //注意基本类型流和装箱后的流的区别</span></span>
<span class="line"><span>    Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;).stream()   // Stream&amp;lt;String&amp;gt;</span></span>
<span class="line"><span>            .mapToInt(String::length)       // IntStream</span></span>
<span class="line"><span>            .asLongStream()                 // LongStream</span></span>
<span class="line"><span>            .mapToDouble(x -&amp;gt; x / 10.0)     // DoubleStream</span></span>
<span class="line"><span>            .boxed()                        // Stream&amp;lt;Double&amp;gt;</span></span>
<span class="line"><span>            .mapToLong(x -&amp;gt; 1L)             // LongStream</span></span>
<span class="line"><span>            .mapToObj(x -&amp;gt; &amp;quot;&amp;quot;)              // Stream&amp;lt;String&amp;gt;</span></span>
<span class="line"><span>            .collect(Collectors.toList());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h3><p>filter方法可以实现过滤操作，类似SQL中的where。我们可以使用一行代码，通过filter方法实现查询所有订单中最近半年金额大于40的订单，通过连续叠加filter方法进行多次条件过滤：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//最近半年的金额大于40的订单</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>        .filter(Objects::nonNull) //过滤null值</span></span>
<span class="line"><span>        .filter(order -&amp;gt; order.getPlacedAt().isAfter(LocalDateTime.now().minusMonths(6))) //最近半年的订单</span></span>
<span class="line"><span>        .filter(order -&amp;gt; order.getTotalPrice() &amp;gt; 40) //金额大于40的订单</span></span>
<span class="line"><span>        .forEach(System.out::println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不使用Stream的话，必然需要一个中间集合来收集过滤后的结果，而且所有的过滤条件会堆积在一起，代码冗长且不易读。</p><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>map</span></a></h3><p>map操作可以做转换（或者说投影），类似SQL中的select。为了对比，我用两种方式统计订单中所有商品的数量，前一种是通过两次遍历实现，后一种是通过两次mapToLong+sum方法实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//计算所有订单商品数量</span></span>
<span class="line"><span>//通过两次遍历实现</span></span>
<span class="line"><span>LongAdder longAdder = new LongAdder();</span></span>
<span class="line"><span>orders.stream().forEach(order -&amp;gt;</span></span>
<span class="line"><span>        order.getOrderItemList().forEach(orderItem -&amp;gt; longAdder.add(orderItem.getProductQuantity())));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//使用两次mapToLong+sum方法实现</span></span>
<span class="line"><span>assertThat(longAdder.longValue(), is(orders.stream().mapToLong(order -&amp;gt;</span></span>
<span class="line"><span>        order.getOrderItemList().stream()</span></span>
<span class="line"><span>                .mapToLong(OrderItem::getProductQuantity).sum()).sum()));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，后一种方式无需中间变量longAdder，更直观。</p><p>这里再补充一下，使用for循环生成数据，是我们平时常用的操作，也是这个课程会大量用到的。现在，我们可以用一行代码使用IntStream配合mapToObj替代for循环来生成数据，比如生成10个Product元素构成List：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//把IntStream通过转换Stream&amp;lt;Project&amp;gt;</span></span>
<span class="line"><span>System.out.println(IntStream.rangeClosed(1,10)</span></span>
<span class="line"><span>        .mapToObj(i-&amp;gt;new Product((long)i, &amp;quot;product&amp;quot;+i, i*100.0))</span></span>
<span class="line"><span>        .collect(toList()));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap"><span>flatMap</span></a></h3><p>接下来，我们看看flatMap展开或者叫扁平化操作，相当于map+flat，通过map把每一个元素替换为一个流，然后展开这个流。</p><p>比如，我们要统计所有订单的总价格，可以有两种方式：</p>`,17)),n("ul",null,[n("li",null,[s[3]||(s[3]=a("直接通过原始商品列表的商品个数*商品单价统计的话，可以先把订单通过flatMap展开成商品清单，也就是把Order替换为Stream")),i(r,null,{default:l(()=>s[2]||(s[2]=[a("，然后对每一个OrderItem用mapToDouble转换获得商品总价，最后进行一次sum求和；")])),_:1})]),s[4]||(s[4]=n("li",null,"利用flatMapToDouble方法把列表中每一项展开替换为一个DoubleStream，也就是直接把每一个订单转换为每一个商品的总价，然后求和。",-1))]),s[15]||(s[15]=e(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//直接展开订单商品进行价格统计</span></span>
<span class="line"><span>System.out.println(orders.stream()</span></span>
<span class="line"><span>        .flatMap(order -&amp;gt; order.getOrderItemList().stream())</span></span>
<span class="line"><span>        .mapToDouble(item -&amp;gt; item.getProductQuantity() * item.getProductPrice()).sum());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//另一种方式flatMap+mapToDouble=flatMapToDouble</span></span>
<span class="line"><span>System.out.println(orders.stream()</span></span>
<span class="line"><span>        .flatMapToDouble(order -&amp;gt;</span></span>
<span class="line"><span>                order.getOrderItemList()</span></span>
<span class="line"><span>                        .stream().mapToDouble(item -&amp;gt; item.getProductQuantity() * item.getProductPrice()))</span></span>
<span class="line"><span>        .sum());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方式可以得到相同的结果，并无本质区别。</p><h3 id="sorted" tabindex="-1"><a class="header-anchor" href="#sorted"><span>sorted</span></a></h3><p>sorted操作可以用于行内排序的场景，类似SQL中的order by。比如，要实现大于50元订单的按价格倒序取前5，可以通过Order::getTotalPrice方法引用直接指定需要排序的依据字段，通过reversed()实现倒序：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//大于50的订单,按照订单价格倒序前5</span></span>
<span class="line"><span>orders.stream().filter(order -&amp;gt; order.getTotalPrice() &amp;gt; 50)</span></span>
<span class="line"><span>        .sorted(comparing(Order::getTotalPrice).reversed())</span></span>
<span class="line"><span>        .limit(5)</span></span>
<span class="line"><span>        .forEach(System.out::println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span>distinct</span></a></h3><p>distinct操作的作用是去重，类似SQL中的distinct。比如下面的代码实现：</p><ul><li>查询去重后的下单用户。使用map从订单提取出购买用户，然后使用distinct去重。</li><li>查询购买过的商品名。使用flatMap+map提取出订单中所有的商品名，然后使用distinct去重。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//去重的下单用户</span></span>
<span class="line"><span>System.out.println(orders.stream().map(order -&amp;gt; order.getCustomerName()).distinct().collect(joining(&amp;quot;,&amp;quot;)));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//所有购买过的商品</span></span>
<span class="line"><span>System.out.println(orders.stream()</span></span>
<span class="line"><span>        .flatMap(order -&amp;gt; order.getOrderItemList().stream())</span></span>
<span class="line"><span>        .map(OrderItem::getProductName)</span></span>
<span class="line"><span>        .distinct().collect(joining(&amp;quot;,&amp;quot;)));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="skip-limit" tabindex="-1"><a class="header-anchor" href="#skip-limit"><span>skip &amp; limit</span></a></h3><p>skip和limit操作用于分页，类似MySQL中的limit。其中，skip实现跳过一定的项，limit用于限制项总数。比如下面的两段代码：</p><ul><li>按照下单时间排序，查询前2个订单的顾客姓名和下单时间；</li><li>按照下单时间排序，查询第3和第4个订单的顾客姓名和下单时间。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//按照下单时间排序，查询前2个订单的顾客姓名和下单时间</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>        .sorted(comparing(Order::getPlacedAt))</span></span>
<span class="line"><span>        .map(order -&amp;gt; order.getCustomerName() + &amp;quot;@&amp;quot; + order.getPlacedAt())</span></span>
<span class="line"><span>        .limit(2).forEach(System.out::println);</span></span>
<span class="line"><span>//按照下单时间排序，查询第3和第4个订单的顾客姓名和下单时间</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>        .sorted(comparing(Order::getPlacedAt))</span></span>
<span class="line"><span>        .map(order -&amp;gt; order.getCustomerName() + &amp;quot;@&amp;quot; + order.getPlacedAt())</span></span>
<span class="line"><span>        .skip(2).limit(2).forEach(System.out::println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collect" tabindex="-1"><a class="header-anchor" href="#collect"><span>collect</span></a></h3><p>collect是收集操作，对流进行终结（终止）操作，把流导出为我们需要的数据结构。“终结”是指，导出后，无法再串联使用其他中间操作，比如filter、map、flatmap、sorted、distinct、limit、skip。</p><p>在Stream操作中，collect是最复杂的终结操作，比较简单的终结操作还有forEach、toArray、min、max、count、anyMatch等，我就不再展开了，你可以查询<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="noopener noreferrer">JDK文档</a>，搜索terminal operation或intermediate operation。</p><p>接下来，我通过6个案例，来演示下几种比较常用的collect操作：</p>`,17)),n("ul",null,[s[8]||(s[8]=n("li",null,"第一个案例，实现了字符串拼接操作，生成一定位数的随机字符串。",-1)),s[9]||(s[9]=n("li",null,"第二个案例，通过Collectors.toSet静态方法收集为Set去重，得到去重后的下单用户，再通过Collectors.joining静态方法实现字符串拼接。",-1)),n("li",null,[s[7]||(s[7]=a("第三个案例，通过Collectors.toCollection静态方法获得指定类型的集合，比如把List")),i(p,null,{default:l(()=>[s[6]||(s[6]=a("转换为LinkedList")),i(p,null,{default:l(()=>s[5]||(s[5]=[a("。")])),_:1})]),_:1})]),s[10]||(s[10]=n("li",null,"第四个案例，通过Collectors.toMap静态方法将对象快速转换为Map，Key是订单ID、Value是下单用户名。",-1)),s[11]||(s[11]=n("li",null,"第五个案例，通过Collectors.toMap静态方法将对象转换为Map。Key是下单用户名，Value是下单时间，一个用户可能多次下单，所以直接在这里进行了合并，只获取最近一次的下单时间。",-1)),s[12]||(s[12]=n("li",null,"第六个案例，使用Collectors.summingInt方法对商品数量求和，再使用Collectors.averagingInt方法对结果求平均值，以统计所有订单平均购买的商品数量。",-1))]),s[16]||(s[16]=e(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//生成一定位数的随机字符串</span></span>
<span class="line"><span>System.out.println(random.ints(48, 122)</span></span>
<span class="line"><span>    .filter(i -&amp;gt; (i &amp;lt; 57 || i &amp;gt; 65) &amp;amp;&amp;amp; (i &amp;lt; 90 || i &amp;gt; 97))</span></span>
<span class="line"><span>    .mapToObj(i -&amp;gt; (char) i)</span></span>
<span class="line"><span>    .limit(20)</span></span>
<span class="line"><span>    .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)</span></span>
<span class="line"><span>    .toString());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//所有下单的用户，使用toSet去重后实现字符串拼接</span></span>
<span class="line"><span>System.out.println(orders.stream()</span></span>
<span class="line"><span>    .map(order -&amp;gt; order.getCustomerName()).collect(toSet())</span></span>
<span class="line"><span>    .stream().collect(joining(&amp;quot;,&amp;quot;, &amp;quot;[&amp;quot;, &amp;quot;]&amp;quot;)));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//用toCollection收集器指定集合类型</span></span>
<span class="line"><span>System.out.println(orders.stream().limit(2).collect(toCollection(LinkedList::new)).getClass());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//使用toMap获取订单ID+下单用户名的Map</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>    .collect(toMap(Order::getId, Order::getCustomerName))</span></span>
<span class="line"><span>    .entrySet().forEach(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//使用toMap获取下单用户名+最近一次下单时间的Map</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>    .collect(toMap(Order::getCustomerName, Order::getPlacedAt, (x, y) -&amp;gt; x.isAfter(y) ? x : y))</span></span>
<span class="line"><span>    .entrySet().forEach(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//订单平均购买的商品数量</span></span>
<span class="line"><span>System.out.println(orders.stream().collect(averagingInt(order -&amp;gt;</span></span>
<span class="line"><span>    order.getOrderItemList().stream()</span></span>
<span class="line"><span>            .collect(summingInt(OrderItem::getProductQuantity)))));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这6个操作使用Stream方式一行代码就可以实现，但使用非Stream方式实现的话，都需要几行甚至十几行代码。</p><p>有关Collectors类的一些常用静态方法，我总结到了一张图中，你可以再整理一下思路：</p><img src="https://static001.geekbang.org/resource/image/5a/de/5af5ba60d7af2c8780b69bc6c71cf3de.png" alt=""><p>其中，groupBy和partitionBy比较复杂，我和你举例介绍。</p><h3 id="groupby" tabindex="-1"><a class="header-anchor" href="#groupby"><span>groupBy</span></a></h3><p>groupBy是分组统计操作，类似SQL中的group by子句。它和后面介绍的partitioningBy都是特殊的收集器，同样也是终结操作。分组操作比较复杂，为帮你理解得更透彻，我准备了8个案例：</p><ul><li>第一个案例，按照用户名分组，使用Collectors.counting方法统计每个人的下单数量，再按照下单数量倒序输出。</li><li>第二个案例，按照用户名分组，使用Collectors.summingDouble方法统计订单总金额，再按总金额倒序输出。</li><li>第三个案例，按照用户名分组，使用两次Collectors.summingInt方法统计商品采购数量，再按总数量倒序输出。</li><li>第四个案例，统计被采购最多的商品。先通过flatMap把订单转换为商品，然后把商品名作为Key、Collectors.summingInt作为Value分组统计采购数量，再按Value倒序获取第一个Entry，最后查询Key就得到了售出最多的商品。</li><li>第五个案例，同样统计采购最多的商品。相比第四个案例排序Map的方式，这次直接使用Collectors.maxBy收集器获得最大的Entry。</li><li>第六个案例，按照用户名分组，统计用户下的金额最高的订单。Key是用户名，Value是Order，直接通过Collectors.maxBy方法拿到金额最高的订单，然后通过collectingAndThen实现Optional.get的内容提取，最后遍历Key/Value即可。</li><li>第七个案例，根据下单年月分组统计订单ID列表。Key是格式化成年月后的下单时间，Value直接通过Collectors.mapping方法进行了转换，把订单列表转换为订单ID构成的List。</li><li>第八个案例，根据下单年月+用户名两次分组统计订单ID列表，相比上一个案例多了一次分组操作，第二次分组是按照用户名进行分组。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//按照用户名分组，统计下单数量</span></span>
<span class="line"><span>System.out.println(orders.stream().collect(groupingBy(Order::getCustomerName, counting()))</span></span>
<span class="line"><span>        .entrySet().stream().sorted(Map.Entry.&amp;lt;String, Long&amp;gt;comparingByValue().reversed()).collect(toList()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//按照用户名分组，统计订单总金额</span></span>
<span class="line"><span>System.out.println(orders.stream().collect(groupingBy(Order::getCustomerName, summingDouble(Order::getTotalPrice)))</span></span>
<span class="line"><span>        .entrySet().stream().sorted(Map.Entry.&amp;lt;String, Double&amp;gt;comparingByValue().reversed()).collect(toList()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//按照用户名分组，统计商品采购数量</span></span>
<span class="line"><span>System.out.println(orders.stream().collect(groupingBy(Order::getCustomerName,</span></span>
<span class="line"><span>        summingInt(order -&amp;gt; order.getOrderItemList().stream()</span></span>
<span class="line"><span>                .collect(summingInt(OrderItem::getProductQuantity)))))</span></span>
<span class="line"><span>        .entrySet().stream().sorted(Map.Entry.&amp;lt;String, Integer&amp;gt;comparingByValue().reversed()).collect(toList()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//统计最受欢迎的商品，倒序后取第一个</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>        .flatMap(order -&amp;gt; order.getOrderItemList().stream())</span></span>
<span class="line"><span>        .collect(groupingBy(OrderItem::getProductName, summingInt(OrderItem::getProductQuantity)))</span></span>
<span class="line"><span>        .entrySet().stream()</span></span>
<span class="line"><span>        .sorted(Map.Entry.&amp;lt;String, Integer&amp;gt;comparingByValue().reversed())</span></span>
<span class="line"><span>        .map(Map.Entry::getKey)</span></span>
<span class="line"><span>        .findFirst()</span></span>
<span class="line"><span>        .ifPresent(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//统计最受欢迎的商品的另一种方式，直接利用maxBy</span></span>
<span class="line"><span>orders.stream()</span></span>
<span class="line"><span>        .flatMap(order -&amp;gt; order.getOrderItemList().stream())</span></span>
<span class="line"><span>        .collect(groupingBy(OrderItem::getProductName, summingInt(OrderItem::getProductQuantity)))</span></span>
<span class="line"><span>        .entrySet().stream()</span></span>
<span class="line"><span>        .collect(maxBy(Map.Entry.comparingByValue()))</span></span>
<span class="line"><span>        .map(Map.Entry::getKey)</span></span>
<span class="line"><span>        .ifPresent(System.out::println);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//按照用户名分组，选用户下的总金额最大的订单</span></span>
<span class="line"><span>orders.stream().collect(groupingBy(Order::getCustomerName, collectingAndThen(maxBy(comparingDouble(Order::getTotalPrice)), Optional::get)))</span></span>
<span class="line"><span>        .forEach((k, v) -&amp;gt; System.out.println(k + &amp;quot;#&amp;quot; + v.getTotalPrice() + &amp;quot;@&amp;quot; + v.getPlacedAt()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//根据下单年月分组，统计订单ID列表</span></span>
<span class="line"><span>System.out.println(orders.stream().collect</span></span>
<span class="line"><span>        (groupingBy(order -&amp;gt; order.getPlacedAt().format(DateTimeFormatter.ofPattern(&amp;quot;yyyyMM&amp;quot;)),</span></span>
<span class="line"><span>                mapping(order -&amp;gt; order.getId(), toList()))));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//根据下单年月+用户名两次分组，统计订单ID列表</span></span>
<span class="line"><span>System.out.println(orders.stream().collect</span></span>
<span class="line"><span>        (groupingBy(order -&amp;gt; order.getPlacedAt().format(DateTimeFormatter.ofPattern(&amp;quot;yyyyMM&amp;quot;)),</span></span>
<span class="line"><span>                groupingBy(order -&amp;gt; order.getCustomerName(),</span></span>
<span class="line"><span>                        mapping(order -&amp;gt; order.getId(), toList())))));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不借助Stream转换为普通的Java代码，实现这些复杂的操作可能需要几十行代码。</p><h3 id="partitionby" tabindex="-1"><a class="header-anchor" href="#partitionby"><span>partitionBy</span></a></h3><p>partitioningBy用于分区，分区是特殊的分组，只有true和false两组。比如，我们把用户按照是否下单进行分区，给partitioningBy方法传入一个Predicate作为数据分区的区分，输出是Map&lt;Boolean, List&lt;T&gt;&gt;：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public static &amp;lt;T&amp;gt;</span></span>
<span class="line"><span>Collector&amp;lt;T, ?, Map&amp;lt;Boolean, List&amp;lt;T&amp;gt;&amp;gt;&amp;gt; partitioningBy(Predicate&amp;lt;? super T&amp;gt; predicate) {</span></span>
<span class="line"><span>    return partitioningBy(predicate, toList());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下，partitioningBy配合anyMatch，可以把用户分为下过订单和没下过订单两组：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//根据是否有下单记录进行分区</span></span>
<span class="line"><span>System.out.println(Customer.getData().stream().collect(</span></span>
<span class="line"><span>        partitioningBy(customer -&amp;gt; orders.stream().mapToLong(Order::getCustomerId)</span></span>
<span class="line"><span>                .anyMatch(id -&amp;gt; id == customer.getId()))));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾"><span>重点回顾</span></a></h2><p>今天，我用了大量的篇幅和案例，和你展开介绍了Stream中很多具体的流式操作方法。有些案例可能不太好理解，我建议你对着代码逐一到源码中查看这些操作的方法定义，以及JDK中的代码注释。</p><p>最后，我建议你思考下，在日常工作中还会使用SQL统计哪些信息，这些SQL是否也可以用Stream来改写呢？Stream的API博大精深，但其中又有规律可循。这其中的规律主要就是，理清楚这些API传参的函数式接口定义，就能搞明白到底是需要我们提供数据、消费数据、还是转换数据等。那，掌握Stream的方法便是，多测试多练习，以强化记忆、加深理解。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href="https://github.com/JosephZhu1983/java-common-mistakes" target="_blank" rel="noopener noreferrer">这个链接</a>查看。</p><h2 id="思考与讨论" tabindex="-1"><a class="header-anchor" href="#思考与讨论"><span>思考与讨论</span></a></h2><ol><li>使用Stream可以非常方便地对List做各种操作，那有没有什么办法可以实现在整个过程中观察数据变化呢？比如，我们进行filter+map操作，如何观察filter后map的原始数据呢？</li><li>Collectors类提供了很多现成的收集器，那我们有没有办法实现自定义的收集器呢？比如，实现一个MostPopularCollector，来得到List中出现次数最多的元素，满足下面两个测试用例：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assertThat(Stream.of(1, 1, 2, 2, 2, 3, 4, 5, 5).collect(new MostPopularCollector&amp;lt;&amp;gt;()).get(), is(2));</span></span>
<span class="line"><span>assertThat(Stream.of(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;c&#39;, &#39;c&#39;, &#39;d&#39;).collect(new MostPopularCollector&amp;lt;&amp;gt;()).get(), is(&#39;c&#39;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java 8，你还有什么使用心得吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>`,23))])}const h=d(o,[["render",u]]),y=JSON.parse('{"path":"/posts/Java%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF100%E4%BE%8B/%E5%8A%A0%E9%A4%90/32%20_%20%E5%8A%A0%E9%A4%902%EF%BC%9A%E5%B8%A6%E4%BD%A0%E5%90%83%E9%80%8F%E8%AF%BE%E7%A8%8B%E4%B8%ADJava%208%E7%9A%84%E9%82%A3%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89.html","title":"32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二）","lang":"zh-CN","frontmatter":{"description":"32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二） 你好，我是朱晔。 上一讲的几个例子中，其实都涉及了Stream API的最基本使用方法。今天，我会与你详细介绍复杂、功能强大的Stream API。 Stream流式操作，用于对集合进行投影、转换、过滤、排序等，更进一步地，这些操作能链式串联在一起使用，类似于SQL语句，可以大大简化代...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Java%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF100%E4%BE%8B/%E5%8A%A0%E9%A4%90/32%20_%20%E5%8A%A0%E9%A4%902%EF%BC%9A%E5%B8%A6%E4%BD%A0%E5%90%83%E9%80%8F%E8%AF%BE%E7%A8%8B%E4%B8%ADJava%208%E7%9A%84%E9%82%A3%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二）"}],["meta",{"property":"og:description","content":"32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二） 你好，我是朱晔。 上一讲的几个例子中，其实都涉及了Stream API的最基本使用方法。今天，我会与你详细介绍复杂、功能强大的Stream API。 Stream流式操作，用于对集合进行投影、转换、过滤、排序等，更进一步地，这些操作能链式串联在一起使用，类似于SQL语句，可以大大简化代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":14.74,"words":4421},"filePathRelative":"posts/Java业务开发常见错误100例/加餐/32 _ 加餐2：带你吃透课程中Java 8的那些重要知识点（二）.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"32 | 加餐2：带你吃透课程中Java 8的那些重要知识点（二）\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/60/4c/60f75bbd9b617b4e4991117b1803e64c.mp3\\"></audio></p>\\n<p>你好，我是朱晔。</p>\\n<p>上一讲的几个例子中，其实都涉及了Stream API的最基本使用方法。今天，我会与你详细介绍复杂、功能强大的Stream API。</p>","autoDesc":true}');export{h as comp,y as data};
