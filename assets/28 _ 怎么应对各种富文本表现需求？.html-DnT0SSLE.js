import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as i}from"./app-CrA-f6So.js";const t={};function l(p,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_28-怎么应对各种富文本表现需求" tabindex="-1"><a class="header-anchor" href="#_28-怎么应对各种富文本表现需求"><span>28 _ 怎么应对各种富文本表现需求？</span></a></h1><p><audio id="audio" title="28 | 怎么应对各种富文本表现需求？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a0/f8/a0c0c6358e74fef00551e9f80eb917f8.mp3"></audio></p><p>你好，我是戴铭。今天，我要和你分享的主题是，在iOS开发中，如何展示富文本的内容。</p><p>在iOS开发中，富文本的展示是一个非常常见的需求。为了帮助你更好地了解如何展示富文本，我在今天这篇文章中，会结合一个项目来跟你说说面对富文本展示需求时，要怎么考虑和实现。这样，你在自己的项目中，也可以借鉴今天这样的实现思路和方法。</p><p>简单来说，富文本就是一段有属性的字符串，可以包含不同字体、不同字号、不同背景、不同颜色、不同字间距的文字，还可以设置段落、图文混排等等属性。</p><p>我以前做过一个 <a href="https://github.com/ming1016/GCDFetchFeed" target="_blank" rel="noopener noreferrer">RSS 阅读器</a>，阅读器启动后，需要抓取最新的 RSS 内容进行展示。RSS 里面的文章内容属于富文本，是用HTML标签来描述的，包含了文字样式、链接和图片。</p><p>比如，RSS阅读器中的某篇文章内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;item&amp;gt;</span></span>
<span class="line"><span>&amp;lt;title&amp;gt;涉国资流失嫌疑 东方广益6亿元入股锤子科技被调查&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span>&amp;lt;link&amp;gt;https://www.cnbeta.com/articles/tech/841851.htm&amp;lt;/link&amp;gt;</span></span>
<span class="line"><span>&amp;lt;description&amp;gt;</span></span>
<span class="line"><span>&amp;lt;![CDATA[</span></span>
<span class="line"><span>&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;据虎嗅得到的独家消息，成都成华区监察委已立案调查“东方广益6亿元入股锤子科技（北京）股份有限公司”事宜，认为这个项目有国有资产流失嫌疑。&amp;lt;/strong&amp;gt;成华区监察委员会成立于2018年2月，按照管理权限对全区行使公权力的公职人员依法实行监察，履行监督、调查和处置职责。&amp;lt;/p&amp;gt; &amp;lt;a href=&amp;quot;https://www.cnbeta.com/articles/tech/841851.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;阅读全文&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;</span></span>
<span class="line"><span>]]&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/description&amp;gt;</span></span>
<span class="line"><span>&amp;lt;author&amp;gt;ugmbbc&amp;lt;/author&amp;gt;</span></span>
<span class="line"><span>&amp;lt;source&amp;gt;cnBeta.COM&amp;lt;/source&amp;gt;</span></span>
<span class="line"><span>&amp;lt;pubDate&amp;gt;Sat, 27 Apr 2019 09:46:45 GMT&amp;lt;/pubDate&amp;gt;</span></span>
<span class="line"><span>&amp;lt;guid&amp;gt;https://www.cnbeta.com/articles/tech/841851.htm&amp;lt;/guid&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/item&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文章的 HTML 代码就在上面 RSS 中的 description 标签里。解析出 RSS 中所有文章的 HTML 代码，并将它们保存到本地数据库中。</p><p>接下来，如何展示 HTML 内容呢？当时，我的第一反应就是使用 WebView 控件来展示。</p><h2 id="webview" tabindex="-1"><a class="header-anchor" href="#webview"><span>WebView</span></a></h2><p>使用 WebView 显示文章只需要创建一个 UIWebView 对象，进行一些基本滚动相关的设置，然后读取 HTML 字符串就可以了，具体实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>self.wbView = [[UIWebView alloc] init];</span></span>
<span class="line"><span>self.wbView.delegate = self;</span></span>
<span class="line"><span>[self.view addSubview:self.wbView];</span></span>
<span class="line"><span>[self.wbView mas_makeConstraints:^(MASConstraintMaker *make) {</span></span>
<span class="line"><span>    make.top.left.right.bottom.equalTo(self.view);</span></span>
<span class="line"><span>}];</span></span>
<span class="line"><span>self.wbView.scalesPageToFit = YES; // 确保网页的显示尺寸和屏幕大小相同</span></span>
<span class="line"><span>self.wbView.scrollView.directionalLockEnabled = YES; // 只在一个方向滚动</span></span>
<span class="line"><span>self.wbView.scrollView.showsHorizontalScrollIndicator = NO; // 不显示左右滑动</span></span>
<span class="line"><span>[self.wbView setOpaque:NO]; // 默认是透明的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 读取文章 html 字符串进行展示</span></span>
<span class="line"><span>[self.wbView loadHTMLString:articleString baseURL:nil];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 UIWebView 的 loadRequest 相比，UIWebView 通过 loadHTMLString 直接读取 HTML 代码，省去了网络请求的时间，展示的速度非常快。不过，HTML 里的图片资源还是需要通过网络请求来获取。所以，如果能够在文章展示之前就缓存下图片，那么无需等待，就能够快速完整地展示丰富的文章内容了。</p><p>那么，我应该使用什么方案来缓存文章中的图片呢？</p><p>在 Cocoa 层使用 NSURLProtocol 可以拦截所有 HTTP 的请求，因此我可以利用 NSURLProtocol 来缓存文章中的图片。</p><p>接下来，我再来和你说说，<strong>如何用我写的一个 Web 页面预加载库</strong> <a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/STMURLCache.m" target="_blank" rel="noopener noreferrer"><strong>STMURLCache</strong></a>**来预缓存 HTML 里的图片。**这个库你也可以应用到自己项目中。</p><p><strong>首先</strong>，我需要从数据库中取出所有未缓存图片的文章内容 HTML。实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[[[[[SMDB shareInstance] selectAllUnCachedFeedItems] subscribeOn:[RACScheduler schedulerWithPriority:RACSchedulerPriorityDefault]] deliverOn:[RACScheduler mainThreadScheduler]] subscribeNext:^(NSMutableArray *x) {</span></span>
<span class="line"><span>    // 在数据库中获取所有未缓存的文章数据 x</span></span>
<span class="line"><span>    NSMutableArray *urls = [NSMutableArray array];</span></span>
<span class="line"><span>    if (x.count &amp;gt; 0) {</span></span>
<span class="line"><span>        self.needCacheCount = x.count;</span></span>
<span class="line"><span>        for (SMFeedItemModel *aModel in x) {</span></span>
<span class="line"><span>            // 将文章数据中的正文内容都存在 urls 数组中</span></span>
<span class="line"><span>            [urls addObject:aModel.des];</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>}];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面代码所示，在数据库中获取到所有未缓存文章的数据后，遍历所有数据，提取文章数据中的正文 HTML 内容保存到一个新的数组 urls 中。</p><p><strong>然后</strong>，使用 STMURLCache 开始依次预下载文章中的图片进行缓存。实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[[STMURLCache create:^(STMURLCacheMk *mk) {</span></span>
<span class="line"><span>    mk.whiteUserAgent(@&amp;quot;gcdfetchfeed&amp;quot;).diskCapacity(1000 * 1024 * 1024);</span></span>
<span class="line"><span>}] preloadByWebViewWithHtmls:[NSArray arrayWithArray:urls]].delegate = self;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>STMURLCache 使用 preloadByWebViewWithHtmls 方法去预缓存所有图片，在 STMURLCache 初始化时，会设置 UserAgent 白名单，目的是避免额外缓存了其他不相关 UIWebView 的图片。</p><p>缓存图片的核心技术还是 NSURLProtocol，STMURLCache 最终也是使用 NSURLProtocol 来缓存图片的。NSURLProtocol 是一个抽象类，专门用来处理特定协议的 URL 数据加载。你可以使用自定义 URL 处理的方式，来重新定义系统 URL 加载。STMURLCache 缓存图片的具体实现代码，你可以在 <a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/STMURLProtocol.m" target="_blank" rel="noopener noreferrer">STMURLProtocol</a>这个类里查看。</p><p>STMURLProtocol 会在所有网络请求的入口 canInitWithRequest 方法中加上过滤条件，比如 STMURLCache 在初始化时设置 UserAgent 白名单，过滤代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// User-Agent来过滤</span></span>
<span class="line"><span>if (sModel.whiteUserAgent.length &amp;gt; 0) {</span></span>
<span class="line"><span>    // 在 HTTP header 里取出 User Agent</span></span>
<span class="line"><span>    NSString *uAgent = [request.allHTTPHeaderFields objectForKey:@&amp;quot;User-Agent&amp;quot;];</span></span>
<span class="line"><span>    if (uAgent) {</span></span>
<span class="line"><span>        // 不在白名单中返回 NO，不会进行缓存</span></span>
<span class="line"><span>        if (![uAgent hasSuffix:sModel.whiteUserAgent]) {</span></span>
<span class="line"><span>            return NO;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        return NO;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UserAgent 白名单过滤会通过 request 的 allHTTPHeaderFields 获取到当前网络请求的 UserAgent，然后和已经设置的 UserAgent 白名单做比较：如果在白名单中就进行缓存；否则，就不会缓存。</p><p>STMURLProtocol 还可以根据域名进行过滤，这样可以灵活、精确地控制缓存范围。如果你设置了域名白名单，那么只有在白名单里的域名下的网络请求才会执行缓存，过滤代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//对于域名白名单的过滤</span></span>
<span class="line"><span>if (sModel.whiteListsHost.count &amp;gt; 0) {</span></span>
<span class="line"><span>    id isExist = [sModel.whiteListsHost objectForKey:request.URL.host];</span></span>
<span class="line"><span>    // 如果当前请求的域名不在白名单中也会返回 NO</span></span>
<span class="line"><span>    if (!isExist) {</span></span>
<span class="line"><span>        return NO;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码所示，当前网络请求的域名可以通过 request.URL.host 属性获取到，获取到网络请求的域名后，再去看域名白名单里是否有，如果有就缓存，没有就返回 NO，不进行缓存操作。</p><p>在 canInitWithRequest 方法中满足缓存条件后，开始缓存的方法是 startLoading。startLoading 方法会判断已缓存和未缓存的情况，如果没有缓存会发起网络请求，将请求到的数据保存在本地。如果有缓存，则会直接从本地读取缓存，实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 从缓存里读取数据</span></span>
<span class="line"><span>NSData *data = [NSData dataWithContentsOfFile:self.filePath];</span></span>
<span class="line"><span>NSURLResponse *response = [[NSURLResponse alloc] initWithURL:self.request.URL MIMEType:[otherInfo objectForKey:@&amp;quot;MIMEType&amp;quot;] expectedContentLength:data.length textEncodingName:[otherInfo objectForKey:@&amp;quot;textEncodingName&amp;quot;]];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[self.client URLProtocol:self didReceiveResponse:response cacheStoragePolicy:NSURLCacheStorageNotAllowed];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用 NSURLProtocolClient 的 URLProtocol:didLoadData 方法加载本地数据</span></span>
<span class="line"><span>[self.client URLProtocol:self didLoadData:data];</span></span>
<span class="line"><span>[self.client URLProtocolDidFinishLoading:self];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码所示，STMURLProtocol 先通过缓存的路径获取到缓存的数据，再使用 NSURLProtocolClient 的 URLProtocol:didLoadData 方法加载本地缓存数据，以减少网络请求。</p><p>显示文章内容时使用 NSURLProtocol，对于那些已经缓存过图片的文章就不用发起图片的网络请求，显示的速度跟本地加载显示速度一样快。</p><p>虽然通过 URLProtocol 重新定义系统 URL 加载的方式，来直接读取预缓存提升了加载速度，但在长列表的 Cell 上展示富文本，就需要性能更高、内存占用更小的方法。那么接下来，我们再看看除了 UIWebView 还有没有什么方法可以展示富文本呢？</p><p>当然还有了。</p><p>在长列表这种场景下，如果不用 HTML 来描述富文本的话，想要使用原生 iOS 代码来描述富文本的话，你还可以使用苹果官方的<a href="https://developer.apple.com/documentation/appkit/textkit" target="_blank" rel="noopener noreferrer">TextKit</a>和 <a href="https://github.com/ibireme/YYText" target="_blank" rel="noopener noreferrer">YYText</a>来展示。</p><p>其中，YYText 不仅兼容 UILabel 和 UITextView，在异步文字布局和渲染上的性能也非常好。所以接下来，我们就一起看看 YYText是如何展示富文本的吧。</p><h2 id="yytext" tabindex="-1"><a class="header-anchor" href="#yytext"><span>YYText</span></a></h2><p>集成 YYText 到你的App非常简单，只需要在 Podfile 中添加 pod ‘YYText’ 就可以了。下面代码展示了如何展示图文混排的富文本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>NSMutableAttributedString *text = [NSMutableAttributedString new];</span></span>
<span class="line"><span>UIFont *font = [UIFont systemFontOfSize:16];</span></span>
<span class="line"><span>NSMutableAttributedString *attachment = nil;</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>// 嵌入 UIImage</span></span>
<span class="line"><span>UIImage *image = [UIImage imageNamed:@&amp;quot;dribbble64_imageio&amp;quot;];</span></span>
<span class="line"><span>attachment = [NSMutableAttributedString yy_attachmentStringWithContent:image contentMode:UIViewContentModeCenter attachmentSize:image.size alignToFont:font alignment:YYTextVerticalAlignmentCenter];</span></span>
<span class="line"><span>[text appendAttributedString: attachment];</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>// 嵌入 UIView</span></span>
<span class="line"><span>UISwitch *switcher = [UISwitch new];</span></span>
<span class="line"><span>[switcher sizeToFit];</span></span>
<span class="line"><span>attachment = [NSMutableAttributedString yy_attachmentStringWithContent:switcher contentMode:UIViewContentModeBottom attachmentSize:switcher.size alignToFont:font alignment:YYTextVerticalAlignmentCenter];</span></span>
<span class="line"><span>[text appendAttributedString: attachment];</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>// 嵌入 CALayer</span></span>
<span class="line"><span>CASharpLayer *layer = [CASharpLayer layer];</span></span>
<span class="line"><span>layer.path = ...</span></span>
<span class="line"><span>attachment = [NSMutableAttributedString yy_attachmentStringWithContent:layer contentMode:UIViewContentModeBottom attachmentSize:switcher.size alignToFont:font alignment:YYTextVerticalAlignmentCenter];</span></span>
<span class="line"><span>[text appendAttributedString: attachment];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码所示，YYText 对于富文本的图文混排使用的是自定义的 NSMutableAttributedString 分类，自定义分类不光简化了 NSMutableAttributedString，还增加了功能，除了图片外，可以嵌入 UIView 和 CALayer。</p><p>通过上面 YYText 描述富文本的代码，你会发现原生代码描述富文本跟 HTML 比，既复杂又啰嗦。HTML 代码更易读、更容易维护，所以除了长列表外，我建议你都使用 HTML 来描述富文本。</p><p>对于 UIWebView 内存占用高的问题，你可以考虑使用 HTML 代码转原生代码的思路解决。比如，你可以参考我以前做的将 HTML 代码转原生代码的示例项目 <a href="https://github.com/ming1016/HTN" target="_blank" rel="noopener noreferrer">HTN</a>里的解决思路。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>今天我跟你介绍了如何通过 UIWebView 和 YYText 来展示富文本。</p><p>UIWebView 展示的是使用 HTML 描述的富文本。HTML 是描述富文本最简单和最常用的方式，相对于 YYText 或 TextKit 那样描述富文本的方式来说，更加简洁和标准。不过，UIWebView 的缺点也比较明显，同时创建多个 UIWebView 实例，对于内存的占用会非常大。</p><p>所以，我对于富文本展示的建议是，如果是列表展示富文本建议使用 TextKit 或者 YYText，其他情况可以选择使用 UIWebView 来展示富文本。</p><h2 id="课后作业" tabindex="-1"><a class="header-anchor" href="#课后作业"><span>课后作业</span></a></h2><p>使用 <a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/STMURLCache.m" target="_blank" rel="noopener noreferrer">STMURLCache</a>预加载你工程中的一个 Web 页面，看看打开速度提升了多少，预加载成功后，在弱网环境和无网络的环境都可以试试。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p>`,51)]))}const c=n(t,[["render",l]]),o=JSON.parse('{"path":"/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AF%87/28%20_%20%E6%80%8E%E4%B9%88%E5%BA%94%E5%AF%B9%E5%90%84%E7%A7%8D%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%8E%B0%E9%9C%80%E6%B1%82%EF%BC%9F.html","title":"28 _ 怎么应对各种富文本表现需求？","lang":"zh-CN","frontmatter":{"description":"28 _ 怎么应对各种富文本表现需求？ 你好，我是戴铭。今天，我要和你分享的主题是，在iOS开发中，如何展示富文本的内容。 在iOS开发中，富文本的展示是一个非常常见的需求。为了帮助你更好地了解如何展示富文本，我在今天这篇文章中，会结合一个项目来跟你说说面对富文本展示需求时，要怎么考虑和实现。这样，你在自己的项目中，也可以借鉴今天这样的实现思路和方法。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AF%87/28%20_%20%E6%80%8E%E4%B9%88%E5%BA%94%E5%AF%B9%E5%90%84%E7%A7%8D%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%8E%B0%E9%9C%80%E6%B1%82%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"28 _ 怎么应对各种富文本表现需求？"}],["meta",{"property":"og:description","content":"28 _ 怎么应对各种富文本表现需求？ 你好，我是戴铭。今天，我要和你分享的主题是，在iOS开发中，如何展示富文本的内容。 在iOS开发中，富文本的展示是一个非常常见的需求。为了帮助你更好地了解如何展示富文本，我在今天这篇文章中，会结合一个项目来跟你说说面对富文本展示需求时，要怎么考虑和实现。这样，你在自己的项目中，也可以借鉴今天这样的实现思路和方法。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"28 _ 怎么应对各种富文本表现需求？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":8.96,"words":2688},"filePathRelative":"posts/iOS开发高手课/应用开发篇/28 _ 怎么应对各种富文本表现需求？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"28 | 怎么应对各种富文本表现需求？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a0/f8/a0c0c6358e74fef00551e9f80eb917f8.mp3\\"></audio></p>\\n<p>你好，我是戴铭。今天，我要和你分享的主题是，在iOS开发中，如何展示富文本的内容。</p>\\n<p>在iOS开发中，富文本的展示是一个非常常见的需求。为了帮助你更好地了解如何展示富文本，我在今天这篇文章中，会结合一个项目来跟你说说面对富文本展示需求时，要怎么考虑和实现。这样，你在自己的项目中，也可以借鉴今天这样的实现思路和方法。</p>","autoDesc":true}');export{c as comp,o as data};
