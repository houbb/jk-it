import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,o as i}from"./app-6Bz2fGO5.js";const p={};function t(l,n){return i(),a("div",null,n[0]||(n[0]=[s(`<p><audio id="audio" title="17 | 网络优化（下）：大数据下网络该如何监控？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/61/39/6169a3f8ebca2d2ee09dd0628f5eff39.mp3"></audio></p><p>通过上一期的学习，我们对如何打造一个高质量的网络已经有了一个整体的认识。但是这就足够了吗？回想一下，一个网络请求从手机到后台服务器，会涉及基站、光纤、路由器这些硬件设施，也会跟运营商和服务器机房有关。</p><p>不论是基站故障、光纤被挖断、运营商挟持，还是我们的机房、CDN服务商出现故障，都有可能会引起用户网络出现问题。你有没有感觉线上经常突发各种千奇百怪的网络问题，很多公司的运维人员每天过得胆战心惊、疲于奔命。</p><p>“善良”的故障过了一段时间之后莫名其妙就好了，“顽固”的故障难以定位也难以解决。这些故障究竟是如何产生的？为什么突然就恢复了？它们影响了多少用户、哪些用户？想要解决这些问题离不开高质量的网络，而高质量的网络又离不开强大的监控。今天我们就一起来看看网络该如何监控吧。</p><h2 id="移动端监控" tabindex="-1"><a class="header-anchor" href="#移动端监控"><span>移动端监控</span></a></h2><p>对于移动端来说，我们可能会有各种各样的网络请求。即使使用了OkHttp网络库，也可能会有一些开发人员或者第三方组件使用了系统的网络库。那应该如何统一的监控客户端的所有的网络请求呢？</p><p><strong>1. 如何监控网络</strong></p><p><strong>第一种方法：插桩。</strong></p><p>为了兼容性考虑，我首先想到的还是插桩。360开源的性能监控工具<a href="https://github.com/Qihoo360/ArgusAPM" target="_blank" rel="noopener noreferrer">ArgusAPM</a>就是利用Aspect切换插桩，实现监控系统和OkHttp网络库的请求。</p><p>系统网络库的插桩实现可以参考<a href="https://github.com/Qihoo360/ArgusAPM/blob/bc03d63c65019cd3ffe2cbef9533c9228b3f2381/argus-apm/argus-apm-aop/src/main/java/com/argusapm/android/aop/TraceNetTrafficMonitor.java" target="_blank" rel="noopener noreferrer">TraceNetTrafficMonitor</a>，主要利用<a href="http://www.shouce.ren/api/spring2.5/ch06s02.html" target="_blank" rel="noopener noreferrer">Aspect</a>的切面功能，关于OkHttp的拦截可以参考<a href="https://github.com/Qihoo360/ArgusAPM/blob/bc03d63c65019cd3ffe2cbef9533c9228b3f2381/argus-apm/argus-apm-okhttp/src/main/java/com/argusapm/android/okhttp3/OkHttp3Aspect.java" target="_blank" rel="noopener noreferrer">OkHttp3Aspect</a>，它会更加简单一些，因为OkHttp本身就有代理机制。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Pointcut(&amp;quot;call(public okhttp3.OkHttpClient build())&amp;quot;)</span></span>
<span class="line"><span>public void build() {</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Around(&amp;quot;build()&amp;quot;)</span></span>
<span class="line"><span>public Object aroundBuild(ProceedingJoinPoint joinPoint) throws Throwable {</span></span>
<span class="line"><span>    Object target = joinPoint.getTarget();</span></span>
<span class="line"><span>    if (target instanceof OkHttpClient.Builder &amp;amp;&amp;amp;    Client.isTaskRunning(ApmTask.TASK_NET)) {</span></span>
<span class="line"><span>        OkHttpClient.Builder builder = (OkHttpClient.Builder) target;</span></span>
<span class="line"><span>        builder.addInterceptor(new NetWorkInterceptor());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return joinPoint.proceed();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插桩的方法看起来很好，但是并不全面。如果使用的不是系统和OkHttp网络库，又或者使用了Native代码的网络请求，都无法监控到。</p><p><strong>第二种方法：Native Hook。</strong></p><p>跟I/O监控一样，这个时候我们想到了强大的Native Hook。网络相关的我们一般会Hook下面几个方法 ：</p><li> 连接相关：connect。 </li><li> 发送数据相关：send和sendto。 </li><li> 接收数据相关：recv和recvfrom。 </li><p>Android在不同版本Socket的逻辑会有那么一些差异，以Android 7.0为例，Socket建连的堆栈如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java.net.PlainSocketImpl.socketConnect(Native Method)</span></span>
<span class="line"><span>java.net.AbstractPlainSocketImpl.doConnect</span></span>
<span class="line"><span>java.net.AbstractPlainSocketImpl.connectToAddress</span></span>
<span class="line"><span>java.net.AbstractPlainSocketImpl.connect</span></span>
<span class="line"><span>java.net.SocksSocketImpl.connect</span></span>
<span class="line"><span>java.net.Socket.connect</span></span>
<span class="line"><span>com.android.okhttp.internal.Platform.connectSocket</span></span>
<span class="line"><span>com.android.okhttp.Connection.connectSocket</span></span>
<span class="line"><span>com.android.okhttp.Connection.connect</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“socketConnect”方法对应的Native方法定义在<a href="http://androidxref.com/7.0.0_r1/xref/libcore/ojluni/src/main/native/PlainSocketImpl.c" target="_blank" rel="noopener noreferrer">PlainSocketImpl.c</a>，查看<a href="http://androidxref.com/7.0.0_r1/xref/libcore/ojluni/src/main/native/openjdksub.mk" target="_blank" rel="noopener noreferrer">makefile</a>可以知道它们会编译在libopenjdk.so中。不过在Android 8.0，整个调用流程又完全改变了。为了兼容性考虑，我们直接PLT Hook内存的所有so，<a href="http://xn--Socketlibc-5c5p04xo6r8t0b19ddep76a7qdwrgwn1hhl9dk0xa4l3b5bd.so" target="_blank" rel="noopener noreferrer">但是需要排除掉Socket函数本身所在的libc.so</a>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hook_plt_method_all_lib(&amp;quot;libc.so&amp;quot;, &amp;quot;connect&amp;quot;, (hook_func) &amp;amp;create_hook);</span></span>
<span class="line"><span>hook_plt_method_all_lib(&amp;quot;libc.so, &amp;quot;send&amp;quot;, (hook_func) &amp;amp;send_hook);</span></span>
<span class="line"><span>hook_plt_method_all_lib(&amp;quot;libc.so&amp;quot;, &amp;quot;recvfrom&amp;quot;, (hook_func) &amp;amp;recvfrom_hook);</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种做法不好的地方在于会把系统的Local Socket也同时接管了，需要在代码中增加过滤条件。在今天的Sample中，我给你提供了一套简单的实现。其实无论是哪一种Hook，如果熟练掌握之后你会发现它并不困难。我们需要耐心地寻找，梳理清楚整个调用流程。</p><p><strong>第三种方法：统一网络库。</strong></p><p>尽管拿到了所有的网络调用，想想会有哪些使用场景呢？模拟网络数据、统计应用流量，或者是单独代理WebView的网络请求。</p><img src="https://static001.geekbang.org/resource/image/7c/4c/7cecaa1134f078228598d9b3beec6b4c.png" alt=""><p>一般来说，我们不会非常关心第三方的网络请求情况，而对于我们应用自身的网络请求，最好的监控方法还是统一网络库。<strong>不过我们可以通过插桩和Hook这两个方法，监控应用中有哪些地方使用了其他的网络库，而不是默认的统一网络库。</strong></p><p>在上一期内容中，我说过“网络质量监控”应该是客户端网络库中一个非常重要的模块，它也会跟大网络平台的接入服务共同协作。通过统一网络库的方式，的确无法监控到第三方的网络请求。不过我们可以通过其他方式拿到应用的整体流量使用情况，下面我们一起来看看。</p><p><strong>2. 如何监控流量</strong></p><p>应用流量监控的方法非常简单，一般通过TrafficStats类。TrafficState是Android API 8加入的接口，用于获取整个手机或者某个UID从开机算起的网络流量。至于如何使用，你可以参考Facebook一个历史比较久远的开源库<a href="https://github.com/facebook/network-connection-class" target="_blank" rel="noopener noreferrer">network-connection-class</a>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>getMobileRxBytes()        //从开机开始Mobile网络接收的字节总数，不包括Wifi</span></span>
<span class="line"><span>getTotalRxBytes()         //从开机开始所有网络接收的字节总数，包括Wifi</span></span>
<span class="line"><span>getMobileTxBytes()        //从开机开始Mobile网络发送的字节总数，不包括Wifi</span></span>
<span class="line"><span>getTotalTxBytes()         //从开机开始所有网络发送的字节总数，包括Wifi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的实现原理其实也非常简单，就是利用Linux内核的统计接口。具体来说，是下面两个proc接口。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// stats接口提供各个uid在各个网络接口（wlan0, ppp0等）的流量信息</span></span>
<span class="line"><span>/proc/net/xt_qtaguid/stats</span></span>
<span class="line"><span>// iface_stat_fmt接口提供各个接口的汇总流量信息</span></span>
<span class="line"><span>proc/net/xt_qtaguid/iface_stat_fmt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TrafficStats的工作原理是读取proc，并将目标UID下面所有网络接口的流量相加。但如果我们不使用TrafficStats接口，而是自己解析proc文件呢？那我们可以得到不同网络接口下的流量，从而计算出WiFi、2G/3G/4G、VPN、热点共享、WiFi P2P等不同网络状态下的流量。</p><p>不过非常遗憾的是，Android 7.0之后系统已经不让我们直接去读取stats文件，防止开发者可以拿到其他应用的流量信息，因此只能通过TrafficStats拿到自己应用的流量信息。</p><p>除了流量信息，通过/proc/net我们还可以拿到大量网络相关的信息，例如网络信号强度、电平强度等。Android手机跟iPhone都有一个网络测试模式，感兴趣的同学可以尝试一下。</p><li> iPhone：打开拨号界面，输入“*3001#12345#*”，然后按拨号键。 </li><li> Android手机：打开拨号界面，输入“*#*#4636#*#*”，然后按拨号键（可进入工程测试模式，部分版本可能不支持）。 </li><img src="https://static001.geekbang.org/resource/image/e6/59/e64bb9e4012132286b787483c01b5959.png" alt=""><p>为什么系统可以判断此时的WiFi“已连接，但无法访问互联网”？回想一下专栏第15期我给你留的课后作业：</p><blockquote></blockquote><p>iPhone的无线网络助理、小米和一加的自适应WLAN它们在检测WiFi不稳定时会自动切换到移动网络。那请你思考一下，它们是如何实现侦测，如何区分是应用后台服务器出问题还是WiFi本身有问题呢？</p><p>我看了一下同学们的回复，大部分同学认为需要访问一个公网IP的方式。其实对于手机厂商来说根据不需要，它在底层可以拿到的信息有很多。</p><li> 网卡驱动层信息。如射频参数，可以用来判断WiFi的信号强度；网卡数据包队列长度，可以用来判断网络是否拥塞。 </li><li> 协议栈信息。主要是获取数据包发送、接收、时延和丢包等信息。 </li><p>如果一个WiFi发送过数据包，但是没有收到任何的ACK回包，这个时候就可以初步判断当前的WiFi是有问题的。这样系统可以知道当前WiFi大概率是有问题的，它并不关心是不是因为我们后台服务器出问题导致的。</p><h2 id="大网络平台监控" tabindex="-1"><a class="header-anchor" href="#大网络平台监控"><span>大网络平台监控</span></a></h2><p>前面我讲了一些应用网络请求和流量的监控方法，但是还没真正回答应该如何去打造一套强大的网络监控体系。跟网络优化一样，网络监控不是客户端可以单独完成的，它也是整个大网络平台的一个重要组成部分。</p><p>不过首先我们需要在客观上承认这件事情做起来并不容易，因为网络问题会存在下面这些特点：</p><li> 实时性。部分网络问题过时不候，可能很快就丢失现场。 </li><li> 复杂性。可能跟国家、地区、运营商、版本、系统、机型、CDN都有关，不仅维度多，数据量也巨大。 </li><li> 链路长。整个请求链条非常长，客户端故障、网链障络、服务故障都有可能。 </li><p>因此所谓的网络监控，并不能保证可以明确找到故障的原因。而我们目标是希望快速发现问题，尽可能拿到更多的辅助信息，协助我们更容易地排查问题。</p><p>下面我分别从客户端与接入层的角度出发，一起来看看哪些信息可以帮助我们更好地发现问题和解决问题。</p><p><strong>1. 客户端监控</strong></p><p>客户端的监控使用统网络库的方式，你可以想想我们需要关心哪些内容：</p><li> 时延。一般我们比较关心每次请求的DNS时间、建连时间、首包时间、总时间等，会有类似1秒快开率、2秒快开率这些指标。 </li><li> 维度。网络类型、国家、省份、城市、运营商、系统、客户端版本、机型、请求域名等，这些维度主要用于分析问题。 </li><li> 错误。DNS失败、连接失败、超时、返回错误码等，会有DNS失败率、连接失败率、网络访问的失败率这些指标。 </li><p>通过这些数据，我们也可以汇总出应用的网络访问大图。例如在国内无论我们去到哪里都会问有没有WiFi，WiFi的占比会超过50%。这其实远远比海外高，在印度WiFi的占比仅仅只有15%左右。</p><img src="https://static001.geekbang.org/resource/image/62/e1/62926bf186ce0c4898419aa549ce77e1.png" alt=""><p>同样的我们分版本、分国家、分运营商、分域名等各种各样的维度，来监控我们的时延和错误这些访问指标。</p><p>由于维度太多，每个维度的取值范围也很广，如果是实时计算整个数据量会非常非常大。对于客户端的上报数据，微信可以做到分钟级别的监控报警。不过为了运算简单我们会抛弃UV，只计算每一分钟部分维度的PV。</p><p><strong>2. 接入层监控</strong></p><p>客户端监控的数据会比接入层更加丰富，因为有可能会出现部分数据还没到达接入层就已经被打回，例如运营商劫持的情况。</p><img src="https://static001.geekbang.org/resource/image/13/f3/133c91b1f38a8a8dc23fff33475b13f3.png" alt=""><p>但是接入层的数据监控还是非常有必要的，主要的原因是：</p><li> 实时性。客户端如果使用秒级的实时上报，对用户性能影响会比较大。服务端就不会存在这个问题，它很容易可以做到秒级的监控。 </li><li> 可靠性。如果出现某些网络问题，客户端的数据上报通道可能也会受到影响，客户端的数据不完全可靠。 </li><p>那接入层应该关心哪些数据呢？一般来说，我们会比较关心服务的入口和出口流量、服务端的处理时延、错误率等。</p><p><strong>3. 监控报警</strong></p><p>无论是客户端还是接入层的监控，它们都是分层的。</p><li> 实时监控。秒级或者分钟级别的实时监控的信息会相比少一些，例如只有访问量（PV）、错误率，没有去拆分几百个上千个维度，也没有独立访问用户数（UV），实时监控的目的是最快速度发现问题。 </li><li> 离线监控。小时或者天级别的监控我们可以拓展出全部的维度来做监控，它的目的是在监控的同时，可以更好地圈出问题的范围。 </li><p>下面是一个简单根据客户端、国家以及运营商维度分析的示例。当然更多的时候是某一个服务出现问题，这个时候通过分域名或者错误码就可以很容易的找到原因。</p><img src="https://static001.geekbang.org/resource/image/54/86/54901a205444cce26ff1cfb6c802ac86.png" alt=""><p>那在监控的同时如何实现准确的自动化报警呢？这同样也是业界的一个难题，它的难度在于如果规则过于苛刻，可能会出现漏报；如果过于宽松，可能会出现太多的误报。</p><p>业界一般存在两种报警的算法，一套是基于规则，例如失败率与历史数据相比暴涨、流量暴跌等。另一种是基于时间序列算法或者神经网络的智能化报警，使用者不需要录入任何规则，只需有足够长的历史数据，就可以实现自动报警。智能化报警目前准确性也存在一些问题，在智能化基础上面添加少量规则可能会是更好的选择。</p><p>如果我们收到一个线上的网络报警，通过接入层和客户端的监控报表，也会有了一个大致的判断。那怎么样才能确定问题的最终原因？我们是否可以拿到用户完整的网络日志？甚至远程地诊断用户的网络情况？关于“网络日志和远程诊断，如何快速定位网络问题”，我会把它单独成篇放在专栏第二模块里，再来讲讲这个话题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>监控、监控又是监控，很多性能优化工作其实都是“三分靠优化，七分靠监控”。</p><p>为什么监控这么重要呢？对于大公司来说，每一个项目参与人员可能成百上千人。并且大公司要的不是今天或者这个版本可以做好一些事情，而是希望保证每天每个版本都能持续保持应用的高质量。另一方面有了完善的分析和监控的平台，我们可以把复杂的事情简单化，把一些看起来“高不可攀”的优化工作，变成人人都可以做。</p><p>最后多谈两句我的感受，我们在工作的时候，希望你可以看得更远，从更高的角度去思考问题。多想想如果我能做好这件事情，怎么保证其他人不会犯错，或者让所有人都可以做得更好。</p><h2 id="课后作业" tabindex="-1"><a class="header-anchor" href="#课后作业"><span>课后作业</span></a></h2><p>对于网络问题，你尝试过哪些监控方法？有没有令你印象深刻的网络故障，最终又是通过什么方式解决的呢？欢迎留言跟我和其他同学一起讨论。</p><p>今天我们练习的<a href="https://github.com/AndroidAdvanceWithGeektime/Chapter17" target="_blank" rel="noopener noreferrer">Sample</a>是通过PLT Hook，代理Socket相关的几个重要函数，这次还增加了一个一次性Hook所有已经加载Library的方法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int hook_plt_method_all_lib(const char* exclueLibname, const char* name, hook_func hook) {</span></span>
<span class="line"><span>  if (refresh_shared_libs()) {</span></span>
<span class="line"><span>    // Could not properly refresh the cache of shared library data</span></span>
<span class="line"><span>    return -1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  int failures = 0;</span></span>
<span class="line"><span>  for (auto const&amp;amp; lib : allSharedLibs()) {</span></span>
<span class="line"><span>      if (strcmp(lib.first.c_str(), exclueLibname) != 0) {</span></span>
<span class="line"><span>        failures += hook_plt_method(lib.first.c_str(), name, hook);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return failures;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望你通过这几次课后练习，可以学会将Hook技术应用到实践当中。</p><p>欢迎你点击“请朋友读”，把今天的内容分享给好友，邀请他一起学习。最后别忘了在评论区提交今天的作业，我也为认真完成作业的同学准备了丰厚的“学习加油礼包”，期待与你一起切磋进步哦。</p>`,88)]))}const c=e(p,[["render",t]]),d=JSON.parse('{"path":"/posts/Android%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E6%A8%A1%E5%9D%97%E4%B8%80%20%20%E9%AB%98%E8%B4%A8%E9%87%8F%E5%BC%80%E5%8F%91/17%20_%20%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%BD%91%E7%BB%9C%E8%AF%A5%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"通过上一期的学习，我们对如何打造一个高质量的网络已经有了一个整体的认识。但是这就足够了吗？回想一下，一个网络请求从手机到后台服务器，会涉及基站、光纤、路由器这些硬件设施，也会跟运营商和服务器机房有关。 不论是基站故障、光纤被挖断、运营商挟持，还是我们的机房、CDN服务商出现故障，都有可能会引起用户网络出现问题。你有没有感觉线上经常突发各种千奇百怪的网络...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Android%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E6%A8%A1%E5%9D%97%E4%B8%80%20%20%E9%AB%98%E8%B4%A8%E9%87%8F%E5%BC%80%E5%8F%91/17%20_%20%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%BD%91%E7%BB%9C%E8%AF%A5%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"通过上一期的学习，我们对如何打造一个高质量的网络已经有了一个整体的认识。但是这就足够了吗？回想一下，一个网络请求从手机到后台服务器，会涉及基站、光纤、路由器这些硬件设施，也会跟运营商和服务器机房有关。 不论是基站故障、光纤被挖断、运营商挟持，还是我们的机房、CDN服务商出现故障，都有可能会引起用户网络出现问题。你有没有感觉线上经常突发各种千奇百怪的网络..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":13.8,"words":4139},"filePathRelative":"posts/Android开发高手课/模块一  高质量开发/17 _ 网络优化（下）：大数据下网络该如何监控？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"17 | 网络优化（下）：大数据下网络该如何监控？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/61/39/6169a3f8ebca2d2ee09dd0628f5eff39.mp3\\"></audio></p>\\n<p>通过上一期的学习，我们对如何打造一个高质量的网络已经有了一个整体的认识。但是这就足够了吗？回想一下，一个网络请求从手机到后台服务器，会涉及基站、光纤、路由器这些硬件设施，也会跟运营商和服务器机房有关。</p>","autoDesc":true}');export{c as comp,d as data};
