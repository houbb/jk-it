import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-CrA-f6So.js";const p={};function l(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_33-整数的运算有哪些安全威胁" tabindex="-1"><a class="header-anchor" href="#_33-整数的运算有哪些安全威胁"><span>33 _ 整数的运算有哪些安全威胁？</span></a></h1><p><audio id="audio" title="33 | 整数的运算有哪些安全威胁？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/aa/83/aa7059bd7358f5a7d55aa774fac14583.mp3"></audio></p><p>在我的日常工作中，有一类错误，无论是原理还是后果，我都十分清楚。但是写代码的时候，这类错误曾经还是会反复出现。如果不是代码评审和代码分析环节的校正，我都很难意识到自己的代码中存在这样的缺陷。今天，我想和你聊聊，那些“<strong>道理我都懂，但代码就是写不好</strong>”的老顽固问题。</p><p>你不妨先停下来想一想，你有没有类似的经历？ 又是怎么解决的呢？</p><h2 id="评审案例" tabindex="-1"><a class="header-anchor" href="#评审案例"><span>评审案例</span></a></h2><p>HTTP连接经常被中断或者取消，如果客户端已经获得一部分数据，再次连接时，应该可以请求获取剩余的数据，而不是再次请求获取所有数据。这个特性背后的支持协议就是HTTP范围请求协议（RFC 7233）。</p><p>比如下面的例子，客户端请求服务器返回image.jpg图像的前1024个字节。其中“bytes=0-1023”表示请求传输的数据范围是从0到第1023位的字节（0-1023），以及“-512”表示请求传输数据的最后512个字节（-512）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /image.jpg HTTP/1.1</span></span>
<span class="line"><span>Host: www.example.come</span></span>
<span class="line"><span>Range: bytes=0-1023,-512</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果服务器支持该协议，就会只传输图像的指定数据段。响应消息的代码大致如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>HTTP/1.1 206 Partial Content</span></span>
<span class="line"><span>Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES</span></span>
<span class="line"><span>Content-Length: 2345</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--THIS_STRING_SEPARATES</span></span>
<span class="line"><span>Content-Type: image/jpeg</span></span>
<span class="line"><span>Content-Range: bytes 0-1023/2048</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>(binary content)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--THIS_STRING_SEPARATES</span></span>
<span class="line"><span>Content-Type: image/jpeg</span></span>
<span class="line"><span>Content-Range: bytes 1535-2047/2048</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>(binary content)</span></span>
<span class="line"><span>--THIS_STRING_SEPARATES--</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果服务器端使用下属的代码验证请求数据的指定数据段（C语言），你来看看可能存在什么严重的问题？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * Check if the requested range is valid.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * start: the first byte position of the range request</span></span>
<span class="line"><span> * end: the end byte position of the range request </span></span>
<span class="line"><span> * contentLength: the content length of the requested data</span></span>
<span class="line"><span> * sum: the sum of bytes of the range request</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>bool isValid(int start, int end, int contentLength, int* sum )) {</span></span>
<span class="line"><span>    if (start &amp;lt; end) {</span></span>
<span class="line"><span>        *sum += end - start;</span></span>
<span class="line"><span>        if (*sum &amp;gt; contentLength) {</span></span>
<span class="line"><span>            return false;</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            return true;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        return false;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析"><span>案例分析</span></a></h2><p>上面的代码简化自Nginx HTTP服务器关于HTTP范围请求协议在2017年6月份的实现版本。由于讨论的需要，我较大幅度地删减和修改了原来的代码。如果有兴趣，你可以阅读并比较<a href="http://hg.nginx.org/nginx/file/e3723f2a11b7/src/http/modules/ngx_http_range_filter_module.c" target="_blank" rel="noopener noreferrer">2017年7月份的实现版本</a>和<a href="http://hg.nginx.org/nginx/file/aeaac3ccee4f/src/http/modules/ngx_http_range_filter_module.c" target="_blank" rel="noopener noreferrer">2017年6月份的实现版本</a>，看看都有哪些比较有意思的改动。</p><p>上面的代码有许多问题，其中有一个致命的魔鬼藏在下面的一行代码中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        *sum += end - start;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们假设数据长度为1024个字节，HTTP请求的范围有两段，第一段的请求字节数是一个正常的数据 （比如，1023），而第二段的请求字节数的是一个巨大的数据（比如，INT_MAX - 23），以至于两段数据相加时，发生了整数溢出。本来应该是一个很大的数，可是这个数超出了整数可以表达的范围，结果就发生整数溢出，变成了一个很小的数 （比如，（1023 + INT_MAX - 23），结果是999或者-2147482649。这样就通过了上述的HTTP请求范围验证。</p><p>第一段数据也许可以正常使用。然而，由于实际的数据长度不足以满足第二段数据范围请求，就有可能出现非常复杂的状况。 比如说，为了加快反应速度，提高服务器效率，很多HTTP服务器都使用了缓存技术，Nginx也不例外。</p><p>如果使用缓存技术，数据可能并不是直接从原始数据源读取，而是读取缓存的数据，而缓存的数据是一个临时的大集合，可能包括各种各样的数据，包括敏感数据。</p><p>如果发生读取范围溢出，目标数据段之外的缓存数据可能被读取。而目标数据段之外的数据，可能并没有授权给这个用户使用，这样就可能发生敏感信息的泄露。甚至通过设计，攻击者也有可能更改目标数据以外的非授权数据。这样就间接地操纵了服务器。</p><p>关于这个安全漏洞的更多描述，请参阅<a href="https://nvd.nist.gov/vuln/detail/CVE-2017-7529" target="_blank" rel="noopener noreferrer">CVE-2017-7529</a>。这是一个<a href="https://www.first.org/cvss/" target="_blank" rel="noopener noreferrer">通用缺陷评分系统</a>评分为<a href="https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N" target="_blank" rel="noopener noreferrer">7.5</a>的严重安全缺陷。由于Nginx的广泛部署与使用，该漏洞影响了一大批安装了Nginx服务器的系统。</p><p>出问题的表达式使用太普遍了，谁能想到会出现这么严重的安全漏洞呢。我们感兴趣的问题是：<strong>整数的加法，如此普遍的运算，如果都这么脆弱，到底该怎么办才好？</strong></p><h2 id="整数的陷阱" tabindex="-1"><a class="header-anchor" href="#整数的陷阱"><span>整数的陷阱</span></a></h2><p>一个优秀的语言，一定是便于学习和使用的语言。语言语法的设计通常会考虑我们的现有习惯，降低使用门槛。比如，加法运算通常会设计成我们最熟悉的样子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  a = b + c;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们如此熟悉这种表达式，一旦需要加法运算，这种表达式一定首先从我们的脑袋里自动跳出来。我们毫无察觉，也不会有意识地去追究这样一个从学习算数起就开始使用的表达式到底有什么问题。</p><p>那么到底有什么问题呢？</p><p>第一个问题是，我们使用上述表达式时，每个数字都可以是无限大的；然而在计算机的世界里，数字大小都是有限制的。比如，整数一般使用32位（bit），或者4个字节（byte）来表示，整数的大小不能超过32位能够容纳的范围。</p><h3 id="整数运算-可能溢出" tabindex="-1"><a class="header-anchor" href="#整数运算-可能溢出"><span>整数运算，可能溢出</span></a></h3><p>如果我们使用一位（bit）来表达一个整数，那么通常就会是下面这种情况：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 0 + 0 = 0</span></span>
<span class="line"><span> 0 + 1 = 1</span></span>
<span class="line"><span> 1 + 1 = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，1 + 1的结果不是我们习以为常的2，而是0。这是为什么呢？ 因为2太大了，一位的空间不够用的，所以就“溢出”了。“溢出”导致这个运算的结果是0，而不是预想的2。</p><p>再比如说，我们表示时间的时候，如果采用12小时制，12点过一个小时就是1点，而不是13点；如果采取24小时制，24点过两个小时就是2点钟，而不是26点。</p><p>如果我们对于一位的数，以及24小时制还算“清醒”的话，那么对于32位或者64位的数，可能就没那么重视了。你的代码里有没有涉及到整数的运算？有没有潜在的溢出问题？ 我是经常会掉入这个陷阱的。</p><p>整数溢出的问题，曾经在1995年导致<a href="https://around.com/ariane.html" target="_blank" rel="noopener noreferrer">火箭的坠落</a>； 在2016年导致<a href="https://arstechnica.com/tech-policy/2017/06/sorry-maam-you-didnt-win-43m-there-was-a-slot-machine-malfunction/" target="_blank" rel="noopener noreferrer">错误地签发了四千多万美元（最高限额原为1万美元）的博彩奖券</a>。还有绵延不绝的，你我知道抑或不知道的软件安全漏洞。</p><p>我们更关心的是，该怎么避免这类错误？</p><p><strong>首先最重要的，是要借助软件开发的机制，减少代码错误</strong>。比如我们在专栏开始讲的<a href="https://time.geekbang.org/column/article/76349" target="_blank" rel="noopener noreferrer">借助重重关卡</a>减少错误。虽然我在编写代码的时候会时常忘却这个问题，但在评审代码时，有时候还能够记住这个问题的危害。多一双眼睛，就多了一处关卡。</p><p>然后，还要了解一些小技巧，我们看看都有哪些？</p><p>1.<strong>比较运算，选择“比较小的数”</strong>。</p><p>如果表达式出现在比较运算符的两侧，选择产生较小的数的运算。比如下面这段代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// a, b, c are positive integers</span></span>
<span class="line"><span>if (a &amp;lt; (b + c)) {    // (b + c) can overflow</span></span>
<span class="line"><span>    // snipped</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>// a, b, c are positive integers</span></span>
<span class="line"><span>if ((a - b) &amp;lt; c) {    //  no overflow</span></span>
<span class="line"><span>    // snipped</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子适用于正数的运算，如果是负数呢？ 如果不确定是整数还是负数，该怎么办？这个问题，我留给你去思考。</p><p>2.<strong>限定数的范围，选择冗余的空间</strong>。</p><p>如果现实需要32位的整数，就选择64位的存储空间（也就是说，使用64位的整数类型）进行运算。如果现实需要31位的整数，就选择32位的存储空间。限定了数的范围，一定要记得检查数据的范围，千万不可超越这个范围。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>private static int MAX_DATA_SIZE = 16384;  // 2^14 bytes at mosts</span></span>
<span class="line"><span>private final ByteBuffer cache =</span></span>
<span class="line"><span>    ByteBuffer.allocate)(MAX_DATA_SIZE);   // limit the capacity</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static int receive(byte[] data) {</span></span>
<span class="line"><span>    if (data == null || data.length == 0) {    // input check</span></span>
<span class="line"><span>        // snipped</span></span>
<span class="line"><span>    } else if (data.length &amp;gt; MAX_DATA_SIZE) {  // check the range</span></span>
<span class="line"><span>        // throw exception, snipped</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        if (data.length &amp;gt; cache.remaining()) { // check the add-up</span></span>
<span class="line"><span>            // throw exception, insufficient space, too much data</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if ((data.length + 1024) &amp;gt; cache.remaining()) {</span></span>
<span class="line"><span>            // safe &#39;+&#39;, as the numbers are limited to 2^14.</span></span>
<span class="line"><span>            // snipped</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // snipped</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // snipped</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中的加法运算就是安全的。因为运算涉及的数据都被限定在14位范围内，而两个数相加，最多不超过15位。由于我们使用了32位的整数作为数据的类型，那么15位的数据就不会产生溢出问题。</p><p>但是，这种方法要求我们时刻绷紧神经，仔细地定义、检查每个数据的限定范围，对我们自身要求相对有点高。所以涉及到比较运算，我还是建议使用“比较小的数”的办法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-           if ((data.length + 1024) &amp;gt; cache.remaining()) {</span></span>
<span class="line"><span>+           if ((data.length - cache.remaining()) &amp;gt; 1024) {</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.<strong>检查数据溢出</strong>。</p><p>检查数据溢出，虽然代码看起来有点多，但这总是一个有效可行的办法。比如，评审案例中的缺陷修复，就采取了类似如下的修改：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+       if (*sum &amp;gt; (NGX_MAX_OFF_T_VALUE - (end - start))) {</span></span>
<span class="line"><span>+           return false;</span></span>
<span class="line"><span>+       }</span></span>
<span class="line"><span>        *sum += end - start;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从Java 8开始，Java提供了数据溢出保护的运算方法，比如Math.addExact(int, int)，执行两个整数相加的运算，如果有整数溢出，就会抛出ArithmeticException的异常。这些方法也许并不如直接使用运算符直观，但是它们提供了额外的保护机制。如果我们不能确定溢出是否会发生，使用这些方法可以让我们的代码获得更加深度的保护。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    int sum = Math.addExact(a, b);   // sum = a + b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>整数溢出的危害是整数太大了，超出了许可边界。如果整数还没有大到溢出的程度，但也足够大，同样是一个值得警惕的风险。</p><p>其他的语言也可能有类似的数据溢出保护方法，欢迎你在评论区留言分享。</p><h3 id="整数-可能太大" tabindex="-1"><a class="header-anchor" href="#整数-可能太大"><span>整数，可能太大</span></a></h3><p>不比数学世界里的整数，软件世界里的整数，大都具有现实的意义。 比如，整数可以代表人民币，可以代表美元，也可以代表文件长度，代表内存空间，代表运算能力。 <strong>一旦抽象的整数被赋予了现实意义，就会有现实的约束</strong>。比如，1亿元人民币虽然是个小目标，但你要是用来发人手一份的红包，也许就有点大了。再比如，针对32位整数，虽然现代计算机已经可以毫无障碍地表达这个数据了，但要是用来分配应用内存，这个数就有点大了。</p><p>我们要特别警惕大量内存的动态分配。比如说很多协议的设计都会指定待传输数据的大小，而接收端需要按照指定的大小来接收紧接着的数据流。有时候需要分配内存，来存储、处理接收的数据。其中有一种实现，接收到指定大小的数据后，接收端再根据指定的大小分配内存，然后把后续的数据存储在该内存里。指定数据接收完毕，再开始处理该数据。你看出其中的问题了吗？</p><p>一个比较典型的安全攻击是，攻击者会设置非常大的待传输数据的大小（比如2^31)，但是只传输非常小的数据（比如1个字节），然后在很短的时间内，发送多个请求（一个机器或者多个机器）。一个16G内存的服务器，如果有8个这样的请求，内存就红灯高挂了；有10个这样的请求，内存可能就要挂免战牌了。这就破坏了服务器的“可用性”，算是比较严重的安全事故。</p><p>好了，这就是今天的内容，算是关于数的问题的敲门砖，更多的、更深入的话题，可以阅读<a href="https://cwe.mitre.org/data/definitions/190.html" target="_blank" rel="noopener noreferrer">CWE-190</a>，或者留言与我一起讨论。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>通过对这个评审案例的讨论，我想和你分享下面几点个人看法。</p><li> 数值运算，理论结果可能会超出数值类型许可的空间，进而发生实际结果的溢出。 </li><li> 抽象的数据一旦有了现实意义，便有了具体的现实约束，我们一定要考虑这些约束。 </li><li> 很多问题和我们的习惯并不相符，要通过制度设置来减少由于人的固有缺陷带来的经常性问题。 </li><h2 id="一起来动手" tabindex="-1"><a class="header-anchor" href="#一起来动手"><span>一起来动手</span></a></h2><p>我们一起讨论了一些整数的问题，你愿不愿意总结下浮点数的问题？ 我们使用了C语言和Java语言的示例，你了解其他语言关于整数溢出的技术和经验吗？</p><p>欢迎你来评审下面的这段C语言代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int copy_something(char* buf, int len){</span></span>
<span class="line"><span>    char kbuf[800];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if(len &amp;gt; sizeof(kbuf)){</span></span>
<span class="line"><span>        return -1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return memcpy(kbuf, buf, len);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者这段Java代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public static int mixed(int addOn, int multiplied, int scale) {</span></span>
<span class="line"><span>    return addOn + (multiplied * scale);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，是下面这段我们已经非常熟悉的Java代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.HashMap;</span></span>
<span class="line"><span>import java.util.Map;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Solution {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Given an array of integers, return indices of the two numbers</span></span>
<span class="line"><span>     * such that they add up to a specific target.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public int[] twoSum(int[] nums, int target) {</span></span>
<span class="line"><span>        Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();</span></span>
<span class="line"><span>        for (int i = 0; i &amp;lt; nums.length; i++) {</span></span>
<span class="line"><span>            int complement = target - nums[i];</span></span>
<span class="line"><span>            if (map.containsKey(complement)) {</span></span>
<span class="line"><span>                return new int[] { map.get(complement), i };</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            map.put(nums[i], i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        throw new IllegalArgumentException(&amp;quot;No two sum solution&amp;quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面三段代码，你有什么改进的建议呢？可以在评论区与我分享你的想法。</p><p>另外，分享一个最近（2019年3月）发生的和整数有关的安全事故。</p><p>安全起见，一个数字证书的序列号应该至少有64位随机数，少一位都不行。如果你对整数足够敏感的话，就会知道64位是一个特殊的位数。长整型（long）通常使用64位字节来表述。数字证书的序列号能不能使用64位的长整型呢？这就是个坑！</p><p>为了保证序列号是正数，64位的长整型，只有63位有效的数字。因为，64位长整型中，有一位是用来表示数据正负的。所以，长整型就不能用做数字证书的序列号。</p><p>这个坑，就是有人踩了。有数百万张数字证书仅使用了63位的随机数。按照业界规则，这些数字证书需要问题发现5天以内撤销，重新签发。这几乎是一项不可能完成的任务。2019年3月和4月，很多公司都会面临数字证书更新的问题。</p><p>如果你觉得这篇文章有所帮助，欢迎点击“请朋友读”，把它分享给你的朋友或者同事，一起来交流。</p>`,79)]))}const c=n(p,[["render",l]]),h=JSON.parse('{"path":"/posts/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E4%BB%A3%E7%A0%81%E2%80%9C%E5%AE%89%E5%85%A8%E2%80%9D%E7%AF%87/33%20_%20%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%EF%BC%9F.html","title":"33 _ 整数的运算有哪些安全威胁？","lang":"zh-CN","frontmatter":{"description":"33 _ 整数的运算有哪些安全威胁？ 在我的日常工作中，有一类错误，无论是原理还是后果，我都十分清楚。但是写代码的时候，这类错误曾经还是会反复出现。如果不是代码评审和代码分析环节的校正，我都很难意识到自己的代码中存在这样的缺陷。今天，我想和你聊聊，那些“道理我都懂，但代码就是写不好”的老顽固问题。 你不妨先停下来想一想，你有没有类似的经历？ 又是怎么解...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E4%BB%A3%E7%A0%81%E2%80%9C%E5%AE%89%E5%85%A8%E2%80%9D%E7%AF%87/33%20_%20%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"33 _ 整数的运算有哪些安全威胁？"}],["meta",{"property":"og:description","content":"33 _ 整数的运算有哪些安全威胁？ 在我的日常工作中，有一类错误，无论是原理还是后果，我都十分清楚。但是写代码的时候，这类错误曾经还是会反复出现。如果不是代码评审和代码分析环节的校正，我都很难意识到自己的代码中存在这样的缺陷。今天，我想和你聊聊，那些“道理我都懂，但代码就是写不好”的老顽固问题。 你不妨先停下来想一想，你有没有类似的经历？ 又是怎么解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"33 _ 整数的运算有哪些安全威胁？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":13.31,"words":3994},"filePathRelative":"posts/代码精进之路/第三模块：代码“安全”篇/33 _ 整数的运算有哪些安全威胁？.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"33 | 整数的运算有哪些安全威胁？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/aa/83/aa7059bd7358f5a7d55aa774fac14583.mp3\\"></audio></p>\\n<p>在我的日常工作中，有一类错误，无论是原理还是后果，我都十分清楚。但是写代码的时候，这类错误曾经还是会反复出现。如果不是代码评审和代码分析环节的校正，我都很难意识到自己的代码中存在这样的缺陷。今天，我想和你聊聊，那些“<strong>道理我都懂，但代码就是写不好</strong>”的老顽固问题。</p>","autoDesc":true}');export{c as comp,h as data};
