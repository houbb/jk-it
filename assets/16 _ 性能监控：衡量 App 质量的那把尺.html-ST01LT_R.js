import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-CrA-f6So.js";const p={};function l(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_16-性能监控-衡量-app-质量的那把尺" tabindex="-1"><a class="header-anchor" href="#_16-性能监控-衡量-app-质量的那把尺"><span>16 _ 性能监控：衡量 App 质量的那把尺</span></a></h1><p><audio id="audio" title="16 | 性能监控：衡量 App 质量的那把尺" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/4e/07/4e743b0f3e2ee55157e4a2d6b1eb6a07.mp3"></audio></p><p>你好，我是戴铭。</p><p>通常情况下，App 的性能问题虽然不会导致 App不可用，但依然会影响到用户体验。如果这个性能问题不断累积，达到临界点以后，问题就会爆发出来。这时，影响到的就不仅仅是用户了，还有负责App开发的你。</p><p>为了能够主动、高效地发现性能问题，避免App质量进入无人监管的失控状态，我们就需要对App的性能进行监控。目前，对App的性能监控，主要是从线下和线上两个维度展开。</p><p>今天这篇文章，我就从这两个方面来和你聊聊如何做性能监控这个话题。接下来，我们就先看看苹果官方的线下性能监控王牌 Instruments。</p><h2 id="instruments" tabindex="-1"><a class="header-anchor" href="#instruments"><span>Instruments</span></a></h2><p>关于线下性能监控，苹果公司官方就有一个性能监控工具Instruments。它是一款被集成在 Xcode 里，专门用来在线下进行性能分析的工具。</p><p>Instruments的功能非常强大，比如说Energy Log就是用来监控耗电量的，Leaks就是专门用来监控内存泄露问题的，Network就是用来专门检查网络情况的，Time Profiler就是通过时间采样来分析页面卡顿问题的。</p><p>如下图所示，就是Instruments的各种性能检测工具。</p><img src="https://static001.geekbang.org/resource/image/08/e9/087ddcf91e5c222804f753389edf2de9.png" alt=""><p>除了对各种性能问题进行监控外，<strong>最新版本的Instruments 10还有以下两大优势</strong>：</p><li> Instruments基于os_signpost 架构，可以支持所有平台。 </li><li> Instruments由于标准界面（Standard UI）和分析核心（Analysis Core）技术，使得我们可以非常方便地进行自定义性能监测工具的开发。当你想要给Instruments内置的工具换个交互界面，或者新创建一个工具的时候，都可以通过自定义工具这个功能来实现。 </li><p>其实，Instruments的这些优势也不是与生俱来的，都是伴随着移动开发技术的发展而演进来的。就比如说自定义工具的功能吧，这是因为App的规模越来越大，往往还涉及到多个团队合作开发、集成多个公司SDK的情况，所以我们就需要以黑盒的方式来进行性能监控。这样的需求，也就迫使苹果公司要不断地增强Instruments的功能。</p><p>从整体架构来看，Instruments 包括Standard UI 和 Analysis Core 两个组件，它的所有工具都是基于这两个组件开发的。而且，你如果要开发自定义的性能分析工具的话，完全基于这两个组件就可以实现。</p><p><strong>开发一款自定义Instruments工具</strong>，主要包括以下这几个步骤：</p><li> 在Xcode中，点击File &gt; New &gt; Project； </li><li> 在弹出的Project模板选择界面，将其设置为macOS； </li><li> 选择 Instruments Package，点击后即可开始自定义工具的开发了。如下图所示。 </li><img src="https://static001.geekbang.org/resource/image/e5/be/e51d838fda0c79ff0a48566ec87305be.png" alt=""><p>经过上面的三步之后，会在新创建的工程里面生成一个.instrpkg 文件，接下来的开发过程主要就是对这个文件的配置工作了。这些配置工作中最主要的是要完成Standard UI 和 Analysis Core 的配置。</p><p>上面这些内容，就是你在开发一个自定义Instruments工具时，需要完成的编码工作了。可以看到，Instruments 10版本的自定义工具开发还是比较简单的。与此同时，苹果公司还提供了大量的代码片段，帮助你进行个性化的配置。你可以<a href="https://help.apple.com/instruments/developer/mac/current/" target="_blank" rel="noopener noreferrer">点击这个链接</a>，查看官方指南中的详细教程。</p><p>如果你想要更好地进行个性化定制，就还需要再了解Instruments收集和处理数据的机制，也就是<strong>分析核心（Analysis Core ）的工作原理</strong>。</p><p>Analysis Core收集和处理数据的过程，可以大致分为以下这三步：</p><li> 处理我们配置好的各种数据表，并申请存储空间 store； </li><li> store去找数据提供者，如果不能直接找到，就会通过 Modeler 接收其他store 的输入信号进行合成； </li><li> store 获得数据源后，会进行 Binding Solution 工作来优化数据处理过程。 </li><p>这里需要强调的是，在我们通过store找到的这些数据提供者中，对开发者来说最重要的就是 os_signpost。os_signpost 的主要作用，是让你可以在程序中通过编写代码来获取数据。你可以在工程中的任何地方通过 os_signpost API ，将需要的数据提供给 Analysis Core。</p><p>苹果公司在 WWDC 2018 Session 410 <a href="https://developer.apple.com/videos/play/wwdc2018/410" target="_blank" rel="noopener noreferrer">Creating Custom Instruments</a> 里提供了一个范例：通过 os_signpost API 将图片下载的数据提供给 Analysis Core 进行监控观察。这个示例在 App 的代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>os_signpost(.begin, log: parsinglog, name:&amp;quot;Parsing&amp;quot;, &amp;quot;Parsing started SIZE:%ld&amp;quot;, data.count)</span></span>
<span class="line"><span>// Decode the JSON we just downloaded</span></span>
<span class="line"><span>let result = try jsonDecoder.decode(Trail.self, from: data)</span></span>
<span class="line"><span>os_signpost(.end, log: parsingLog, name:&amp;quot;Parsing&amp;quot;, &amp;quot;Parsing finished&amp;quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，上面代码中，os_signpost 的 begin 和 end 需要成对出现。</p><p>上面这段代码就是使用 os_signpost 的 API 获取了程序里的数据。接下来，我们再看看 Instruments 是如何通过配置数据表来使用这些数据的。配置的数据表的 XML 设计如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;os-signpost-interval-schema&amp;gt;</span></span>
<span class="line"><span>&amp;lt;id&amp;gt;json-parse&amp;lt;/id&amp;gt;</span></span>
<span class="line"><span>&amp;lt;title&amp;gt;Image Download&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span>&amp;lt;subsystem&amp;gt;&amp;quot;com.apple.trailblazer&amp;lt;/subsystem&amp;gt;</span></span>
<span class="line"><span>&amp;lt;category&amp;gt;&amp;quot;Networking&amp;lt;/category&amp;gt;</span></span>
<span class="line"><span>&amp;lt;name&amp;gt;&amp;quot;Parsing&amp;quot;&amp;lt;/name&amp;gt;</span></span>
<span class="line"><span>&amp;lt;start-pattern&amp;gt;</span></span>
<span class="line"><span>&amp;lt;message&amp;gt;&amp;quot;Parsing started SIZE:&amp;quot; ?data-size&amp;lt;/message&amp;gt; </span></span>
<span class="line"><span>&amp;lt;/start-pattern&amp;gt;</span></span>
<span class="line"><span>&amp;lt;column&amp;gt;</span></span>
<span class="line"><span>&amp;lt;mnemonic&amp;gt;data-size&amp;lt;/mnemonic&amp;gt;</span></span>
<span class="line"><span>&amp;lt;title&amp;gt;JSON Data Size&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span>&amp;lt;type&amp;gt;size-in-bytes&amp;lt;/type&amp;gt;</span></span>
<span class="line"><span>&amp;lt;expression&amp;gt;?data-size&amp;lt;/expression&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/column&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/os-signpost-interval-schema&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们配置数据表是要对数据输出进行可视化配置，从而可以将代码中的数据展示出来。如下图所示，就是对下载图片大小监控的效果。</p><img src="https://static001.geekbang.org/resource/image/cd/b2/cdf512c900bac905b21d28202386b8b2.png" alt=""><p>通过上面的分析我们可以看到，Instruments 10通过提供 os_signpost API 的方式使得开发者监控自定义的性能指标时更方便，从而解决了在此之前只能通过重新建设工具来完成的问题。并且，Instruments通过 XML 标准数据接口解耦展示和数据分析的思路，也非常值得我们借鉴和学习。</p><p>在线下性能监控中，Instruments可以说是王者，但却对线上监控无能为力。那么，对于线上的性能监控，我们应该怎么实现呢？</p><h2 id="线上性能监控" tabindex="-1"><a class="header-anchor" href="#线上性能监控"><span>线上性能监控</span></a></h2><p>对于线上性能监控，我们需要先明白两个原则：</p><li> 监控代码不要侵入到业务代码中； </li><li> 采用性能消耗最小的监控方案。 </li><p>线上性能监控，主要集中在CPU使用率、FPS的帧率和内存这三个方面。接下来，我们就分别从这三个方面展开讨论吧。</p><h3 id="cpu使用率的线上监控方法" tabindex="-1"><a class="header-anchor" href="#cpu使用率的线上监控方法"><span>CPU使用率的线上监控方法</span></a></h3><p>App作为进程运行起来后会有多个线程，每个线程对CPU 的使用率不同。各个线程对CPU使用率的总和，就是当前App对CPU 的使用率。明白了这一点以后，我们也就摸清楚了对CPU使用率进行线上监控的思路。</p><p>在iOS系统中，你可以在 usr/include/mach/thread_info.h 里看到线程基本信息的结构体，其中的cpu_usage 就是 CPU使用率。结构体的完整代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct thread_basic_info {</span></span>
<span class="line"><span>  time_value_t    user_time;     // 用户运行时长</span></span>
<span class="line"><span>  time_value_t    system_time;   // 系统运行时长</span></span>
<span class="line"><span>  integer_t       cpu_usage;     // CPU 使用率</span></span>
<span class="line"><span>  policy_t        policy;        // 调度策略</span></span>
<span class="line"><span>  integer_t       run_state;     // 运行状态</span></span>
<span class="line"><span>  integer_t       flags;         // 各种标记</span></span>
<span class="line"><span>  integer_t       suspend_count; // 暂停线程的计数</span></span>
<span class="line"><span>  integer_t       sleep_time;    // 休眠的时间</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为每个线程都会有这个 thread_basic_info 结构体，所以接下来的事情就好办了，你只需要定时（比如，将定时间隔设置为2s）去遍历每个线程，累加每个线程的 cpu_usage 字段的值，就能够得到当前App所在进程的 CPU 使用率了。实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+ (integer_t)cpuUsage {</span></span>
<span class="line"><span>    thread_act_array_t threads; //int 组成的数组比如 thread[1] = 5635</span></span>
<span class="line"><span>    mach_msg_type_number_t threadCount = 0; //mach_msg_type_number_t 是 int 类型</span></span>
<span class="line"><span>    const task_t thisTask = mach_task_self();</span></span>
<span class="line"><span>    //根据当前 task 获取所有线程</span></span>
<span class="line"><span>    kern_return_t kr = task_threads(thisTask, &amp;amp;threads, &amp;amp;threadCount);</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    if (kr != KERN_SUCCESS) {</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    integer_t cpuUsage = 0;</span></span>
<span class="line"><span>    // 遍历所有线程</span></span>
<span class="line"><span>    for (int i = 0; i &amp;lt; threadCount; i++) {</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        thread_info_data_t threadInfo;</span></span>
<span class="line"><span>        thread_basic_info_t threadBaseInfo;</span></span>
<span class="line"><span>        mach_msg_type_number_t threadInfoCount = THREAD_INFO_MAX;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        if (thread_info((thread_act_t)threads[i], THREAD_BASIC_INFO, (thread_info_t)threadInfo, &amp;amp;threadInfoCount) == KERN_SUCCESS) {</span></span>
<span class="line"><span>            // 获取 CPU 使用率</span></span>
<span class="line"><span>            threadBaseInfo = (thread_basic_info_t)threadInfo;</span></span>
<span class="line"><span>            if (!(threadBaseInfo-&amp;gt;flags &amp;amp; TH_FLAGS_IDLE)) {</span></span>
<span class="line"><span>                cpuUsage += threadBaseInfo-&amp;gt;cpu_usage;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    assert(vm_deallocate(mach_task_self(), (vm_address_t)threads, threadCount * sizeof(thread_t)) == KERN_SUCCESS);</span></span>
<span class="line"><span>    return cpuUsage;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这段代码中，task_threads 方法能够取到当前进程中的线程总数 threadCount 和所有线程的数组 threads。</p><p>接下来，我们就可以通过遍历这个数组来获取单个线程的基本信息。其中，线程基本信息的结构体是 thread_basic_info_t，这个结构体里就包含了我们需要的 CPU 使用率的字段 cpu_usage。然后，我们累加这个字段就能够获取到当前的整体 CPU 使用率。</p><p>到此，我们就实现了对CPU使用率的线上监控。接下来，我们再看看对FPS的线上监控方法吧。</p><h3 id="fps-线上监控方法" tabindex="-1"><a class="header-anchor" href="#fps-线上监控方法"><span>FPS 线上监控方法</span></a></h3><p>FPS 是指图像连续在显示设备上出现的频率。FPS低，表示App不够流畅，还需要进行优化。</p><p>但是，和前面对CPU使用率和内存使用量的监控不同，iOS系统中没有一个专门的结构体，用来记录与FPS相关的数据。但是，对FPS的监控也可以比较简单的实现：通过注册 CADisplayLink 得到屏幕的同步刷新率，记录每次刷新时间，然后就可以得到 FPS。具体的实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- (void)start {</span></span>
<span class="line"><span>    self.dLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(fpsCount:)];</span></span>
<span class="line"><span>    [self.dLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 方法执行帧率和屏幕刷新率保持一致</span></span>
<span class="line"><span>- (void)fpsCount:(CADisplayLink *)displayLink {</span></span>
<span class="line"><span>    if (lastTimeStamp == 0) {</span></span>
<span class="line"><span>        lastTimeStamp = self.dLink.timestamp;</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        total++;</span></span>
<span class="line"><span>        // 开始渲染时间与上次渲染时间差值</span></span>
<span class="line"><span>        NSTimeInterval useTime = self.dLink.timestamp - lastTimeStamp;</span></span>
<span class="line"><span>        if (useTime &amp;lt; 1) return;</span></span>
<span class="line"><span>        lastTimeStamp = self.dLink.timestamp;</span></span>
<span class="line"><span>        // fps 计算</span></span>
<span class="line"><span>        fps = total / useTime; </span></span>
<span class="line"><span>        total = 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存使用量的线上监控方法" tabindex="-1"><a class="header-anchor" href="#内存使用量的线上监控方法"><span>内存使用量的线上监控方法</span></a></h3><p>通常情况下，我们在获取 iOS 应用内存使用量时，都是使用task_basic_info 里的 resident_size 字段信息。但是，我们发现这样获得的内存使用量和 Instruments 里看到的相差很大。后来，在 2018 WWDC Session 416 <a href="https://developer.apple.com/videos/play/wwdc2018/416/" target="_blank" rel="noopener noreferrer">iOS Memory Deep Dive</a>中，苹果公司介绍说 phys_footprint 才是实际使用的物理内存。</p><p>内存信息存在 task_info.h （完整路径 usr/include/mach/task.info.h）文件的 task_vm_info 结构体中，其中phys_footprint 就是物理内存的使用，而不是驻留内存 resident_size。结构体里和内存相关的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct task_vm_info {</span></span>
<span class="line"><span>  mach_vm_size_t  virtual_size;       // 虚拟内存大小</span></span>
<span class="line"><span>  integer_t region_count;             // 内存区域的数量</span></span>
<span class="line"><span>  integer_t page_size;</span></span>
<span class="line"><span>  mach_vm_size_t  resident_size;      // 驻留内存大小</span></span>
<span class="line"><span>  mach_vm_size_t  resident_size_peak; // 驻留内存峰值</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  /* added for rev1 */</span></span>
<span class="line"><span>  mach_vm_size_t  phys_footprint;     // 物理内存</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，类似于对CPU使用率的监控，我们只要从这个结构体里取出phys_footprint 字段的值，就能够监控到实际物理内存的使用情况了。具体实现代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>uint64_t memoryUsage() {</span></span>
<span class="line"><span>    task_vm_info_data_t vmInfo;</span></span>
<span class="line"><span>    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;</span></span>
<span class="line"><span>    kern_return_t result = task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &amp;amp;vmInfo, &amp;amp;count);</span></span>
<span class="line"><span>    if (result != KERN_SUCCESS)</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>    return vmInfo.phys_footprint;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上三个线上性能监控方案可以看出，它们的代码和业务逻辑是完全解耦的，监控时基本都是直接获取系统本身提供的数据，没有额外的计算量，因此对 App 本身的性能影响也非常小，满足了我们要考虑的两个原则。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>在今天这篇文章中，我和你分享了如何通过线下和线上监控，去掌控App的性能。</p><p>关于线下的性能监控，我们可以使用苹果官方的Instruments 去解决性能监控的问题。同时，我还和你分享了如何使用 Instruments 的 os_signpost API 来完成自定义的性能数据监控工具开发。</p><p>关于线上的性能监控，我们需要在不影响性能的前提下，去监控线上的性能问题。在这一部分内容中，我主要和你介绍了对CPU使用率、内存使用量和FPS的线上监控方案。</p><p>最后，我还要再和你提一个建议。作为一名 iOS 开发者，与其一起开始到处去寻找各种解决方案，不如先摸透苹果公司自己的库和工具，这里面的设计思想和演进包含有大量可以吸取和学习的知识。掌握好了这些知识，你也就能够开发出适合自己团队的工具了。这，也正是我没有在这篇文章中和你介绍第三方线上性能监控工具的原因。</p><h2 id="课后小作业" tabindex="-1"><a class="header-anchor" href="#课后小作业"><span>课后小作业</span></a></h2><p>Instruments 可以自定义性能数据的监控，那么接下来就请你看下，你现在工程中有哪些数据是需要监控的，然后新建一个自定义 Instruments 工具将其监控起来吧。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p>`,71)]))}const c=n(p,[["render",l]]),m=JSON.parse('{"path":"/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%9F%BA%E7%A1%80%E7%AF%87/16%20_%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%EF%BC%9A%E8%A1%A1%E9%87%8F%20App%20%E8%B4%A8%E9%87%8F%E7%9A%84%E9%82%A3%E6%8A%8A%E5%B0%BA.html","title":"16 _ 性能监控：衡量 App 质量的那把尺","lang":"zh-CN","frontmatter":{"description":"16 _ 性能监控：衡量 App 质量的那把尺 你好，我是戴铭。 通常情况下，App 的性能问题虽然不会导致 App不可用，但依然会影响到用户体验。如果这个性能问题不断累积，达到临界点以后，问题就会爆发出来。这时，影响到的就不仅仅是用户了，还有负责App开发的你。 为了能够主动、高效地发现性能问题，避免App质量进入无人监管的失控状态，我们就需要对Ap...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/iOS%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%9F%BA%E7%A1%80%E7%AF%87/16%20_%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%EF%BC%9A%E8%A1%A1%E9%87%8F%20App%20%E8%B4%A8%E9%87%8F%E7%9A%84%E9%82%A3%E6%8A%8A%E5%B0%BA.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"16 _ 性能监控：衡量 App 质量的那把尺"}],["meta",{"property":"og:description","content":"16 _ 性能监控：衡量 App 质量的那把尺 你好，我是戴铭。 通常情况下，App 的性能问题虽然不会导致 App不可用，但依然会影响到用户体验。如果这个性能问题不断累积，达到临界点以后，问题就会爆发出来。这时，影响到的就不仅仅是用户了，还有负责App开发的你。 为了能够主动、高效地发现性能问题，避免App质量进入无人监管的失控状态，我们就需要对Ap..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:30:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16 _ 性能监控：衡量 App 质量的那把尺\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743413423000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":11.46,"words":3437},"filePathRelative":"posts/iOS开发高手课/基础篇/16 _ 性能监控：衡量 App 质量的那把尺.md","localizedDate":"2025年3月31日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"16 | 性能监控：衡量 App 质量的那把尺\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/4e/07/4e743b0f3e2ee55157e4a2d6b1eb6a07.mp3\\"></audio></p>\\n<p>你好，我是戴铭。</p>\\n<p>通常情况下，App 的性能问题虽然不会导致 App不可用，但依然会影响到用户体验。如果这个性能问题不断累积，达到临界点以后，问题就会爆发出来。这时，影响到的就不仅仅是用户了，还有负责App开发的你。</p>","autoDesc":true}');export{c as comp,m as data};
