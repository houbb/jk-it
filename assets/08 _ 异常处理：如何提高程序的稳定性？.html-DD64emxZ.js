import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-6Bz2fGO5.js";const l={};function p(r,s){return i(),a("div",null,s[0]||(s[0]=[e(`<p><audio id="audio" title="08 | 异常处理：如何提高程序的稳定性？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/0c/f7/0c5b7acad86cebfb547c88b1cd22cef7.mp3"></audio></p><p>你好，我是景霄。</p><p>今天这节课，我想和你聊聊Python的异常处理。和其他语言一样，异常处理是Python中一种很常见，并且很重要的机制与代码规范。</p><p>我在实际工作中，见过很多次这样的情况：一位工程师提交了代码，不过代码某处忘记了异常处理。碰巧这种异常发生的频率不低，所以在代码push到线上后没多久，就会收到紧急通知——服务器崩溃了。</p><p>如果事情严重，对用户的影响也很大，这位工程师还得去专门的会议上做自我检讨，可以说是很惨了。这类事件层出不穷，也告诉我们，正确理解和处理程序中的异常尤为关键。</p><h2 id="错误与异常" tabindex="-1"><a class="header-anchor" href="#错误与异常"><span><strong>错误与异常</strong></span></a></h2><p>首先要了解，Python中的错误和异常是什么？两者之间又有什么联系和区别呢？</p><p>通常来说，程序中的错误至少包括两种，一种是语法错误，另一种则是异常。</p><p>所谓语法错误，你应该很清楚，也就是你写的代码不符合编程规范，无法被识别与执行，比如下面这个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if name is not None</span></span>
<span class="line"><span>    print(name)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If语句漏掉了冒号，不符合Python的语法规范，所以程序就会报错<code>invalid syntax</code>。</p><p>而异常则是指程序的语法正确，也可以被执行，但在执行过程中遇到了错误，抛出了异常，比如下面的3个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>10 / 0</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;</span></span>
<span class="line"><span>ZeroDivisionError: integer division or modulo by zero</span></span>
<span class="line"><span></span></span>
<span class="line"><span>order * 2</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;</span></span>
<span class="line"><span>NameError: name &#39;order&#39; is not defined</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1 + [1, 2]</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;</span></span>
<span class="line"><span>TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;list&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们语法完全正确，但显然，我们不能做除法时让分母为0；也不能使用未定义的变量做运算；而让一个整型和一个列表相加也是不可取的。</p><p>于是，当程序运行到这些地方时，就抛出了异常，并且终止运行。例子中的<code>ZeroDivisionError</code> <code>NameError</code>和<code>TypeError</code>，就是三种常见的异常类型。</p><p>当然，Python中还有很多其他异常类型，比如<code>KeyError</code>是指字典中的键找不到；<code>FileNotFoundError</code>是指发送了读取文件的请求，但相应的文件不存在等等，我在此不一一赘述，你可以自行参考<a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">相应文档</a>。</p><h2 id="如何处理异常" tabindex="-1"><a class="header-anchor" href="#如何处理异常"><span><strong>如何处理异常</strong></span></a></h2><p>刚刚讲到，如果执行到程序中某处抛出了异常，程序就会被终止并退出。你可能会问，那有没有什么办法可以不终止程序，让其照样运行下去呢？答案当然是肯定的，这也就是我们所说的异常处理，通常使用try和except来解决，比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    s = input(&#39;please enter two numbers separated by comma: &#39;)</span></span>
<span class="line"><span>    num1 = int(s.split(&#39;,&#39;)[0].strip())</span></span>
<span class="line"><span>    num2 = int(s.split(&#39;,&#39;)[1].strip())</span></span>
<span class="line"><span>    ... </span></span>
<span class="line"><span>except ValueError as err:</span></span>
<span class="line"><span>    print(&#39;Value Error: {}&#39;.format(err))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&#39;continue&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里默认用户输入以逗号相隔的两个整形数字，将其提取后，做后续的操作（注意input函数会将输入转换为字符串类型）。如果我们输入<code>a,b</code>，程序便会抛出异常<code>invalid literal for int() with base 10: &#39;a&#39;</code>，然后跳出try这个block。</p><p>由于程序抛出的异常类型是ValueError，和except block所catch的异常类型相匹配，所以except block便会被执行，最终输出<code>Value Error: invalid literal for int() with base 10: &#39;a&#39;</code>，并打印出<code>continue</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>please enter two numbers separated by comma: a,b</span></span>
<span class="line"><span>Value Error: invalid literal for int() with base 10: &#39;a&#39;</span></span>
<span class="line"><span>continue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，except block只接受与它相匹配的异常类型并执行，如果程序抛出的异常并不匹配，那么程序照样会终止并退出。</p><p>所以，还是刚刚这个例子，如果我们只输入<code>1</code>，程序抛出的异常就是<code>IndexError: list index out of range</code>，与ValueError不匹配，那么except block就不会被执行，程序便会终止并退出（continue不会被打印）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>please enter two numbers separated by comma: 1</span></span>
<span class="line"><span>IndexError Traceback (most recent call last)</span></span>
<span class="line"><span>IndexError: list index out of range</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，很显然，这样强调一种类型的写法有很大的局限性。那么，该怎么解决这个问题呢？</p><p>其中一种解决方案，是在except block中加入多种异常的类型，比如下面这样的写法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    s = input(&#39;please enter two numbers separated by comma: &#39;)</span></span>
<span class="line"><span>    num1 = int(s.split(&#39;,&#39;)[0].strip())</span></span>
<span class="line"><span>    num2 = int(s.split(&#39;,&#39;)[1].strip())</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except (ValueError, IndexError) as err:</span></span>
<span class="line"><span>    print(&#39;Error: {}&#39;.format(err))</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>print(&#39;continue&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者第二种写法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    s = input(&#39;please enter two numbers separated by comma: &#39;)</span></span>
<span class="line"><span>    num1 = int(s.split(&#39;,&#39;)[0].strip())</span></span>
<span class="line"><span>    num2 = int(s.split(&#39;,&#39;)[1].strip())</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except ValueError as err:</span></span>
<span class="line"><span>    print(&#39;Value Error: {}&#39;.format(err))</span></span>
<span class="line"><span>except IndexError as err:</span></span>
<span class="line"><span>    print(&#39;Index Error: {}&#39;.format(err))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&#39;continue&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，每次程序执行时，except block中只要有一个exception类型与实际匹配即可。</p><p>不过，很多时候，我们很难保证程序覆盖所有的异常类型，所以，更通常的做法，是在最后一个except block，声明其处理的异常类型是Exception。Exception是其他所有非系统异常的基类，能够匹配任意非系统异常。那么这段代码就可以写成下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    s = input(&#39;please enter two numbers separated by comma: &#39;)</span></span>
<span class="line"><span>    num1 = int(s.split(&#39;,&#39;)[0].strip())</span></span>
<span class="line"><span>    num2 = int(s.split(&#39;,&#39;)[1].strip())</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except ValueError as err:</span></span>
<span class="line"><span>    print(&#39;Value Error: {}&#39;.format(err))</span></span>
<span class="line"><span>except IndexError as err:</span></span>
<span class="line"><span>    print(&#39;Index Error: {}&#39;.format(err))</span></span>
<span class="line"><span>except Exception as err:</span></span>
<span class="line"><span>    print(&#39;Other error: {}&#39;.format(err))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&#39;continue&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你也可以在except后面省略异常类型，这表示与任意异常相匹配（包括系统异常等）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    s = input(&#39;please enter two numbers separated by comma: &#39;)</span></span>
<span class="line"><span>    num1 = int(s.split(&#39;,&#39;)[0].strip())</span></span>
<span class="line"><span>    num2 = int(s.split(&#39;,&#39;)[1].strip())</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except ValueError as err:</span></span>
<span class="line"><span>    print(&#39;Value Error: {}&#39;.format(err))</span></span>
<span class="line"><span>except IndexError as err:</span></span>
<span class="line"><span>    print(&#39;Index Error: {}&#39;.format(err))</span></span>
<span class="line"><span>except:</span></span>
<span class="line"><span>    print(&#39;Other error&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&#39;continue&#39;)</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，当程序中存在多个except block时，最多只有一个except block会被执行。换句话说，如果多个except声明的异常类型都与实际相匹配，那么只有最前面的except block会被执行，其他则被忽略。</p><p>异常处理中，还有一个很常见的用法是finally，经常和try、except放在一起来用。无论发生什么情况，finally block中的语句都会被执行，哪怕前面的try和excep block中使用了return语句。</p><p>一个常见的应用场景，便是文件的读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import sys</span></span>
<span class="line"><span>try:</span></span>
<span class="line"><span>    f = open(&#39;file.txt&#39;, &#39;r&#39;)</span></span>
<span class="line"><span>    .... # some data processing</span></span>
<span class="line"><span>except OSError as err:</span></span>
<span class="line"><span>    print(&#39;OS error: {}&#39;.format(err))</span></span>
<span class="line"><span>except:</span></span>
<span class="line"><span>    print(&#39;Unexpected error:&#39;, sys.exc_info()[0])</span></span>
<span class="line"><span>finally:</span></span>
<span class="line"><span>    f.close()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，try block尝试读取file.txt这个文件，并对其中的数据进行一系列的处理，到最后，无论是读取成功还是读取失败，程序都会执行finally中的语句——关闭这个文件流，确保文件的完整性。因此，在finally中，我们通常会放一些<strong>无论如何都要执行</strong>的语句。</p><p>值得一提的是，对于文件的读取，我们也常常使用with open，你也许在前面的例子中已经看到过，with open会在最后自动关闭文件，让语句更加简洁。</p><h2 id="用户自定义异常" tabindex="-1"><a class="header-anchor" href="#用户自定义异常"><span><strong>用户自定义异常</strong></span></a></h2><p>前面的例子里充斥了很多Python内置的异常类型，你可能会问，我可以创建自己的异常类型吗？</p><p>答案是肯定是，Python当然允许我们这么做。下面这个例子，我们创建了自定义的异常类型MyInputError，定义并实现了初始化函数和str函数（直接print时调用）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class MyInputError(Exception):</span></span>
<span class="line"><span>    &amp;quot;&amp;quot;&amp;quot;Exception raised when there&#39;re errors in input&amp;quot;&amp;quot;&amp;quot;</span></span>
<span class="line"><span>    def __init__(self, value): # 自定义异常类型的初始化</span></span>
<span class="line"><span>        self.value = value</span></span>
<span class="line"><span>    def __str__(self): # 自定义异常类型的string表达形式</span></span>
<span class="line"><span>        return (&amp;quot;{} is invalid input&amp;quot;.format(repr(self.value)))</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>try:</span></span>
<span class="line"><span>    raise MyInputError(1) # 抛出MyInputError这个异常</span></span>
<span class="line"><span>except MyInputError as err:</span></span>
<span class="line"><span>    print(&#39;error: {}&#39;.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你执行上述代码块并输出，便会得到下面的结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error: 1 is invalid input</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实际工作中，如果内置的异常类型无法满足我们的需求，或者为了让异常更加详细、可读，想增加一些异常类型的其他功能，我们可以自定义所需异常类型。不过，大多数情况下，Python内置的异常类型就足够好了。</p><h2 id="异常的使用场景与注意点" tabindex="-1"><a class="header-anchor" href="#异常的使用场景与注意点"><span><strong>异常的使用场景与注意点</strong></span></a></h2><p>学完了前面的基础知识，接下来我们着重谈一下，异常的使用场景与注意点。</p><p>通常来说，在程序中，如果我们不确定某段代码能否成功执行，往往这个地方就需要使用异常处理。除了上述文件读取的例子，我可以再举一个例子来说明。</p><p>大型社交网站的后台，需要针对用户发送的请求返回相应记录。用户记录往往储存在key-value结构的数据库中，每次有请求过来后，我们拿到用户的ID，并用ID查询数据库中此人的记录，就能返回相应的结果。</p><p>而数据库返回的原始数据，往往是json string的形式，这就需要我们首先对json string进行decode（解码），你可能很容易想到下面的方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import json</span></span>
<span class="line"><span>raw_data = queryDB(uid) # 根据用户的id，返回相应的信息</span></span>
<span class="line"><span>data = json.loads(raw_data)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的代码是不是就足够了呢？</p><p>要知道，在json.loads()函数中，输入的字符串如果不符合其规范，那么便无法解码，就会抛出异常，因此加上异常处理十分必要。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    data = json.loads(raw_data)</span></span>
<span class="line"><span>    ....</span></span>
<span class="line"><span>except JSONDecodeError as err:</span></span>
<span class="line"><span>    print(&#39;JSONDecodeError: {}&#39;.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，有一点切记，我们不能走向另一个极端——滥用异常处理。</p><p>比如，当你想要查找字典中某个键对应的值时，绝不能写成下面这种形式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20}</span></span>
<span class="line"><span>try:</span></span>
<span class="line"><span>    value = d[&#39;dob&#39;]</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>except KeyError as err:</span></span>
<span class="line"><span>    print(&#39;KeyError: {}&#39;.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>诚然，这样的代码并没有bug，但是让人看了摸不着头脑，也显得很冗余。如果你的代码中充斥着这种写法，无疑对阅读、协作来说都是障碍。因此，对于flow-control（流程控制）的代码逻辑，我们一般不用异常处理。</p><p>字典这个例子，写成下面这样就很好。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if &#39;dob&#39; in d:</span></span>
<span class="line"><span>    value = d[&#39;dob&#39;]</span></span>
<span class="line"><span>    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>这节课， 我们一起学习了Python的异常处理及其使用场景，你需要重点掌握下面几点。</p><li> 异常，通常是指程序运行的过程中遇到了错误，终止并退出。我们通常使用try except语句去处理异常，这样程序就不会被终止，仍能继续执行。 </li><li> 处理异常时，如果有必须执行的语句，比如文件打开后必须关闭等等，则可以放在finally block中。 </li><li> 异常处理，通常用在你不确定某段代码能否成功执行，也无法轻易判断的情况下，比如数据库的连接、读取等等。正常的flow-control逻辑，不要使用异常处理，直接用条件语句解决就可以了。 </li><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span><strong>思考题</strong></span></a></h2><p>最后，给你留一个思考题。在异常处理时，如果try block中有多处抛出异常，需要我们使用多个try except block吗？以数据库的连接、读取为例，下面两种写法，你觉得哪种更好呢？</p><p>第一种：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    db = DB.connect(&#39;&amp;lt;db path&amp;gt;&#39;) # 可能会抛出异常</span></span>
<span class="line"><span>    raw_data = DB.queryData(&#39;&amp;lt;viewer_id&amp;gt;&#39;) # 可能会抛出异常</span></span>
<span class="line"><span>except (DBConnectionError, DBQueryDataError) err:</span></span>
<span class="line"><span>    print(&#39;Error: {}&#39;.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    db = DB.connect(&#39;&amp;lt;db path&amp;gt;&#39;) # 可能会抛出异常</span></span>
<span class="line"><span>    try:</span></span>
<span class="line"><span>        raw_data = DB.queryData(&#39;&amp;lt;viewer_id&amp;gt;&#39;)</span></span>
<span class="line"><span>    except DBQueryDataError as err:</span></span>
<span class="line"><span>         print(&#39;DB query data error: {}&#39;.format(err))</span></span>
<span class="line"><span>except DBConnectionError as err:</span></span>
<span class="line"><span>     print(&#39;DB connection error: {}&#39;.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎在留言区写下你的答案，还有你今天学习的心得和疑惑，也欢迎你把这篇文章分享给你的同事、朋友。</p>`,75)]))}const c=n(l,[["render",p]]),o=JSON.parse('{"path":"/posts/Python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E5%9F%BA%E7%A1%80%E7%AF%87/08%20_%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%9F.html","title":"","lang":"zh-CN","frontmatter":{"description":"你好，我是景霄。 今天这节课，我想和你聊聊Python的异常处理。和其他语言一样，异常处理是Python中一种很常见，并且很重要的机制与代码规范。 我在实际工作中，见过很多次这样的情况：一位工程师提交了代码，不过代码某处忘记了异常处理。碰巧这种异常发生的频率不低，所以在代码push到线上后没多久，就会收到紧急通知——服务器崩溃了。 如果事情严重，对用户...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/jk-it/posts/Python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E5%9F%BA%E7%A1%80%E7%AF%87/08%20_%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"你好，我是景霄。 今天这节课，我想和你聊聊Python的异常处理。和其他语言一样，异常处理是Python中一种很常见，并且很重要的机制与代码规范。 我在实际工作中，见过很多次这样的情况：一位工程师提交了代码，不过代码某处忘记了异常处理。碰巧这种异常发生的频率不低，所以在代码push到线上后没多久，就会收到紧急通知——服务器崩溃了。 如果事情严重，对用户..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T09:00:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T09:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T09:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743411611000,"updatedTime":1743411611000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.04,"words":3011},"filePathRelative":"posts/Python核心技术与实战/基础篇/08 _ 异常处理：如何提高程序的稳定性？.md","localizedDate":"2025年3月31日","excerpt":"<p><audio id=\\"audio\\" title=\\"08 | 异常处理：如何提高程序的稳定性？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/0c/f7/0c5b7acad86cebfb547c88b1cd22cef7.mp3\\"></audio></p>\\n<p>你好，我是景霄。</p>\\n<p>今天这节课，我想和你聊聊Python的异常处理。和其他语言一样，异常处理是Python中一种很常见，并且很重要的机制与代码规范。</p>\\n<p>我在实际工作中，见过很多次这样的情况：一位工程师提交了代码，不过代码某处忘记了异常处理。碰巧这种异常发生的频率不低，所以在代码push到线上后没多久，就会收到紧急通知——服务器崩溃了。</p>","autoDesc":true}');export{c as comp,o as data};
